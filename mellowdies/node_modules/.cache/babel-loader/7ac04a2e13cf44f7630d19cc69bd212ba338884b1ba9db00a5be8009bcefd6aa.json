{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst {\n  cssExportConvention\n} = require(\"../util/conventions\");\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst NullDependency = require(\"./NullDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../../declarations/WebpackOptions\").CssGeneratorExportsConvention} CssGeneratorExportsConvention */\n/** @typedef {import(\"../CssModule\")} CssModule */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Dependency\").ExportsSpec} ExportsSpec */\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../DependencyTemplate\").CssDependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../css/CssExportsGenerator\")} CssExportsGenerator */\n/** @typedef {import(\"../css/CssGenerator\")} CssGenerator */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n/** @typedef {import(\"../util/Hash\")} Hash */\n\nclass CssExportDependency extends NullDependency {\n  /**\n   * @param {string} name name\n   * @param {string} value value\n   */\n  constructor(name, value) {\n    super();\n    this.name = name;\n    this.value = value;\n  }\n  get type() {\n    return \"css :export\";\n  }\n\n  /**\n   * @param {string} name export name\n   * @param {CssGeneratorExportsConvention} convention convention of the export name\n   * @returns {string[]} convention results\n   */\n  getExportsConventionNames(name, convention) {\n    if (this._conventionNames) {\n      return this._conventionNames;\n    }\n    this._conventionNames = cssExportConvention(name, convention);\n    return this._conventionNames;\n  }\n\n  /**\n   * Returns the exported names\n   * @param {ModuleGraph} moduleGraph module graph\n   * @returns {ExportsSpec | undefined} export names\n   */\n  getExports(moduleGraph) {\n    const module = /** @type {CssModule} */moduleGraph.getParentModule(this);\n    const convention = /** @type {CssGenerator | CssExportsGenerator} */\n    module.generator.convention;\n    const names = this.getExportsConventionNames(this.name, convention);\n    return {\n      exports: names.map(name => ({\n        name,\n        canMangle: true\n      })),\n      dependencies: undefined\n    };\n  }\n\n  /**\n   * Update the hash\n   * @param {Hash} hash hash to be updated\n   * @param {UpdateHashContext} context context\n   * @returns {void}\n   */\n  updateHash(hash, {\n    chunkGraph\n  }) {\n    const module = /** @type {CssModule} */\n    chunkGraph.moduleGraph.getParentModule(this);\n    const generator = /** @type {CssGenerator | CssExportsGenerator} */\n    module.generator;\n    const names = this.getExportsConventionNames(this.name, generator.convention);\n    hash.update(\"exportsConvention\");\n    hash.update(JSON.stringify(names));\n  }\n\n  /**\n   * @param {ObjectSerializerContext} context context\n   */\n  serialize(context) {\n    const {\n      write\n    } = context;\n    write(this.name);\n    write(this.value);\n    super.serialize(context);\n  }\n\n  /**\n   * @param {ObjectDeserializerContext} context context\n   */\n  deserialize(context) {\n    const {\n      read\n    } = context;\n    this.name = read();\n    this.value = read();\n    super.deserialize(context);\n  }\n}\nCssExportDependency.Template = class CssExportDependencyTemplate extends NullDependency.Template {\n  /**\n   * @param {Dependency} dependency the dependency for which the template should be applied\n   * @param {ReplaceSource} source the current replace source which can be modified\n   * @param {DependencyTemplateContext} templateContext the context object\n   * @returns {void}\n   */\n  apply(dependency, source, {\n    cssExportsData,\n    module: m,\n    runtime,\n    moduleGraph\n  }) {\n    const dep = /** @type {CssExportDependency} */dependency;\n    const module = /** @type {CssModule} */m;\n    const convention = /** @type {CssGenerator | CssExportsGenerator} */module.generator.convention;\n    const names = dep.getExportsConventionNames(dep.name, convention);\n    const usedNames = /** @type {string[]} */\n    names.map(name => moduleGraph.getExportInfo(module, name).getUsedName(name, runtime)).filter(Boolean);\n    if (usedNames.length === 0) return;\n    for (const used of usedNames) {\n      cssExportsData.exports.set(used, dep.value);\n    }\n  }\n};\nmakeSerializable(CssExportDependency, \"webpack/lib/dependencies/CssExportDependency\");\nmodule.exports = CssExportDependency;","map":{"version":3,"names":["cssExportConvention","require","makeSerializable","NullDependency","CssExportDependency","constructor","name","value","type","getExportsConventionNames","convention","_conventionNames","getExports","moduleGraph","module","getParentModule","generator","names","exports","map","canMangle","dependencies","undefined","updateHash","hash","chunkGraph","update","JSON","stringify","serialize","context","write","deserialize","read","Template","CssExportDependencyTemplate","apply","dependency","source","cssExportsData","m","runtime","dep","usedNames","getExportInfo","getUsedName","filter","Boolean","length","used","set"],"sources":["C:/Users/james/Downloads/Mellowdies/mellowdies/node_modules/webpack/lib/dependencies/CssExportDependency.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst { cssExportConvention } = require(\"../util/conventions\");\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst NullDependency = require(\"./NullDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../../declarations/WebpackOptions\").CssGeneratorExportsConvention} CssGeneratorExportsConvention */\n/** @typedef {import(\"../CssModule\")} CssModule */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Dependency\").ExportsSpec} ExportsSpec */\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../DependencyTemplate\").CssDependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../css/CssExportsGenerator\")} CssExportsGenerator */\n/** @typedef {import(\"../css/CssGenerator\")} CssGenerator */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n/** @typedef {import(\"../util/Hash\")} Hash */\n\nclass CssExportDependency extends NullDependency {\n\t/**\n\t * @param {string} name name\n\t * @param {string} value value\n\t */\n\tconstructor(name, value) {\n\t\tsuper();\n\t\tthis.name = name;\n\t\tthis.value = value;\n\t}\n\n\tget type() {\n\t\treturn \"css :export\";\n\t}\n\n\t/**\n\t * @param {string} name export name\n\t * @param {CssGeneratorExportsConvention} convention convention of the export name\n\t * @returns {string[]} convention results\n\t */\n\tgetExportsConventionNames(name, convention) {\n\t\tif (this._conventionNames) {\n\t\t\treturn this._conventionNames;\n\t\t}\n\t\tthis._conventionNames = cssExportConvention(name, convention);\n\t\treturn this._conventionNames;\n\t}\n\n\t/**\n\t * Returns the exported names\n\t * @param {ModuleGraph} moduleGraph module graph\n\t * @returns {ExportsSpec | undefined} export names\n\t */\n\tgetExports(moduleGraph) {\n\t\tconst module = /** @type {CssModule} */ (moduleGraph.getParentModule(this));\n\t\tconst convention =\n\t\t\t/** @type {CssGenerator | CssExportsGenerator} */\n\t\t\t(module.generator).convention;\n\t\tconst names = this.getExportsConventionNames(this.name, convention);\n\t\treturn {\n\t\t\texports: names.map(name => ({\n\t\t\t\tname,\n\t\t\t\tcanMangle: true\n\t\t\t})),\n\t\t\tdependencies: undefined\n\t\t};\n\t}\n\n\t/**\n\t * Update the hash\n\t * @param {Hash} hash hash to be updated\n\t * @param {UpdateHashContext} context context\n\t * @returns {void}\n\t */\n\tupdateHash(hash, { chunkGraph }) {\n\t\tconst module = /** @type {CssModule} */ (\n\t\t\tchunkGraph.moduleGraph.getParentModule(this)\n\t\t);\n\t\tconst generator =\n\t\t\t/** @type {CssGenerator | CssExportsGenerator} */\n\t\t\t(module.generator);\n\t\tconst names = this.getExportsConventionNames(\n\t\t\tthis.name,\n\t\t\tgenerator.convention\n\t\t);\n\t\thash.update(\"exportsConvention\");\n\t\thash.update(JSON.stringify(names));\n\t}\n\n\t/**\n\t * @param {ObjectSerializerContext} context context\n\t */\n\tserialize(context) {\n\t\tconst { write } = context;\n\t\twrite(this.name);\n\t\twrite(this.value);\n\t\tsuper.serialize(context);\n\t}\n\n\t/**\n\t * @param {ObjectDeserializerContext} context context\n\t */\n\tdeserialize(context) {\n\t\tconst { read } = context;\n\t\tthis.name = read();\n\t\tthis.value = read();\n\t\tsuper.deserialize(context);\n\t}\n}\n\nCssExportDependency.Template = class CssExportDependencyTemplate extends (\n\tNullDependency.Template\n) {\n\t/**\n\t * @param {Dependency} dependency the dependency for which the template should be applied\n\t * @param {ReplaceSource} source the current replace source which can be modified\n\t * @param {DependencyTemplateContext} templateContext the context object\n\t * @returns {void}\n\t */\n\tapply(\n\t\tdependency,\n\t\tsource,\n\t\t{ cssExportsData, module: m, runtime, moduleGraph }\n\t) {\n\t\tconst dep = /** @type {CssExportDependency} */ (dependency);\n\t\tconst module = /** @type {CssModule} */ (m);\n\t\tconst convention = /** @type {CssGenerator | CssExportsGenerator} */ (\n\t\t\tmodule.generator\n\t\t).convention;\n\t\tconst names = dep.getExportsConventionNames(dep.name, convention);\n\t\tconst usedNames = /** @type {string[]} */ (\n\t\t\tnames\n\t\t\t\t.map(name =>\n\t\t\t\t\tmoduleGraph.getExportInfo(module, name).getUsedName(name, runtime)\n\t\t\t\t)\n\t\t\t\t.filter(Boolean)\n\t\t);\n\t\tif (usedNames.length === 0) return;\n\n\t\tfor (const used of usedNames) {\n\t\t\tcssExportsData.exports.set(used, dep.value);\n\t\t}\n\t}\n};\n\nmakeSerializable(\n\tCssExportDependency,\n\t\"webpack/lib/dependencies/CssExportDependency\"\n);\n\nmodule.exports = CssExportDependency;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}