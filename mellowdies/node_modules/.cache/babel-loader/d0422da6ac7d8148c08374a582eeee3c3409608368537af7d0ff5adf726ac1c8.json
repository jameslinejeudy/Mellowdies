{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\james\\\\Downloads\\\\Mellowdies\\\\mellowdies\\\\src\\\\Landingpage\\\\Landingpage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport WaveSurfer from 'wavesurfer.js';\nimport TimelinePlugin from \"wavesurfer.js/dist/plugins/timeline\";\nimport { useLocation } from 'react-router-dom';\nimport Sidebar from './Sidebar.js';\nimport cloud from '../images/backgrounds/cloud.png';\nimport PlayButton from './PlayButton.js';\nimport { sliceAudio, deleteAudioSection, handleTrackClick } from './Audiotrack.js'; // Import the new functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pagebackground = {\n  backgroundSize: 'cover',\n  backgroundImage: `url(${cloud})`,\n  backgroundPosition: 'center',\n  padding: '10px',\n  height: '100vh',\n  margin: 0,\n  display: 'flex',\n  flexDirection: 'column',\n  fontFamily: 'Concert One'\n};\nconst musicbackground = {\n  width: '75%',\n  height: '80%',\n  position: 'fixed',\n  top: '0',\n  right: '0',\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'flex-start',\n  alignItems: 'left',\n  backgroundColor: 'rgba(255, 255, 255, 0.3)',\n  marginTop: '5px',\n  boxShadow: '0px 0px 15px 5px rgba(255, 255, 255, 0.6)',\n  overflowY: 'auto',\n  padding: '10px'\n};\nconst trackNameStyle = {\n  position: 'relative',\n  color: '#000000',\n  fontSize: '0.8rem',\n  zIndex: '1002',\n  padding: '5px',\n  borderRadius: '5px',\n  backgroundColor: 'rgba(255, 255, 255, 0.7)'\n};\nconst waveformStyle = {\n  width: '100%',\n  height: '75px',\n  position: 'relative',\n  marginBottom: '20px'\n};\nconst timelineStyle = {\n  width: '100%',\n  height: '75px',\n  position: 'relative'\n};\nfunction Landingpage() {\n  _s();\n  const wavesurferRefs = useRef([]); // Array to hold refs for each WaveSurfer instance\n  const location = useLocation();\n  const {\n    audioFiles\n  } = location.state || {\n    audioFiles: []\n  };\n  const [isReady, setIsReady] = useState(false);\n  const [speed, setSpeed] = useState(1);\n  const [progress, setProgress] = useState(0);\n  useEffect(() => {\n    // Initialize the wavesurferRefs array\n    wavesurferRefs.current = [];\n    let longestDuration = 0; // Variable to keep track of the longest track duration\n\n    if (audioFiles && audioFiles.length > 0) {\n      audioFiles.forEach((file, index) => {\n        const containerId = `waveform-${index}`;\n        const timelineId = `timeline-${index}`;\n        const waveSurfer = WaveSurfer.create({\n          container: `#${containerId}`,\n          waveColor: 'blue',\n          progressColor: '#00FFFF',\n          height: 75,\n          autoCenter: true,\n          interact: true,\n          backend: 'MediaElement',\n          cursorWidth: 2,\n          cursorColor: '#FF0000',\n          backgroundColor: 'rgba(255, 255, 255, 0)',\n          minPxPerSec: 100,\n          plugins: [TimelinePlugin.create({\n            container: `#${timelineId}`,\n            primaryColor: '#000',\n            secondaryColor: '#c0c0c0',\n            primaryFontColor: '#000',\n            secondaryFontColor: '#000'\n          })]\n        });\n        waveSurfer.load(file.url);\n        waveSurfer.on('ready', () => {\n          setIsReady(true);\n          const duration = waveSurfer.getDuration();\n          if (duration > longestDuration) {\n            longestDuration = duration; // Update longest track duration\n          }\n\n          // After loading all the tracks, we configure the timeline based on the longest track\n          if (index === audioFiles.length - 1) {\n            // Last track loaded, now configure the timeline\n            const firstWaveSurfer = wavesurferRefs.current[0]; // Use the first WaveSurfer instance\n\n            // Timeline plugin configuration using TimelinePluginOptions\n            firstWaveSurfer.addPlugin(TimelinePlugin.create({\n              container: `#timeline`,\n              // Single timeline container at the top\n              duration: longestDuration,\n              // Set timeline to the longest track's duration\n              timeInterval: Math.ceil(longestDuration / 10),\n              // Interval between time markers\n              primaryLabelInterval: Math.ceil(longestDuration / 5),\n              // Primary label interval\n              secondaryLabelInterval: Math.ceil(longestDuration / 10),\n              // Secondary label interval\n              formatTimeCallback: seconds => {\n                const minutes = Math.floor(seconds / 60);\n                const remainingSeconds = Math.floor(seconds % 60);\n                return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\n              },\n              style: {\n                color: '#000',\n                fontSize: '12px',\n                fontFamily: 'Arial'\n              },\n              height: 30,\n              // Timeline height\n              insertPosition: 'beforeend' // Timeline insert position\n            })).initPlugin('timeline');\n          }\n        });\n        waveSurfer.on('audioprocess', () => {\n          setProgress(waveSurfer.getCurrentTime() / waveSurfer.getDuration() * 100);\n        });\n        waveSurfer.on('seek', progress => {\n          waveSurfer.on('seek', progress => {\n            const duration = waveSurfer.getDuration();\n            const clickedTime = progress * duration; // Get the time in seconds where the user clicked\n\n            // You can update the startTime and endTime dynamically based on where the user clicked\n            const startTime = clickedTime; // Set slice start point at the clicked position\n            const endTime = startTime + 5; // Example: slice 5 seconds after the clicked position (adjust as needed)\n\n            sliceAudio(waveSurfer, startTime, endTime);\n\n            // If you want to allow deleting audio sections after the user clicks, set start and end times dynamically\n            // const deleteStart = clickedTime;\n            // const deleteEnd = deleteStart + 5;  // Example: delete 5 seconds from the clicked position (adjust as needed)\n            // deleteAudioSection(waveSurfer, deleteStart, deleteEnd);\n          });\n        });\n        waveSurfer.on('click', e => {\n          const boundingRect = e.target.getBoundingClientRect();\n          const clickPositionX = e.clientX - boundingRect.left;\n          const clickPosition = clickPositionX / boundingRect.width; // normalized value between 0 and 1\n          handleTrackClick(waveSurfer, clickPosition);\n\n          // Example usage: slice between 5s and 10s\n          const startTime = 5; // You can dynamically calculate this based on clicks or UI input\n          const endTime = 10;\n          sliceAudio(waveSurfer, startTime, endTime);\n\n          // Example usage: delete section between 10s and 15s\n          const deleteStart = 10;\n          const deleteEnd = 15;\n          deleteAudioSection(waveSurfer, deleteStart, deleteEnd);\n        });\n\n        // Store the waveSurfer instance in the refs array\n        wavesurferRefs.current[index] = waveSurfer;\n      });\n\n      // Cleanup function to properly handle the destruction of WaveSurfer instances\n      return () => {\n        wavesurferRefs.current.forEach(waveSurfer => {\n          if (waveSurfer) {\n            waveSurfer.destroy();\n          }\n        });\n      };\n    } else {\n      console.log('No audio files available to display.');\n    }\n  }, [audioFiles]);\n  /*#__PURE__*/_jsxDEV(PlayButton, {\n    wavesurferRefs: wavesurferRefs,\n    setSpeed: setSpeed,\n    isReady: isReady,\n    speed: speed\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: pagebackground,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: musicbackground,\n      children: audioFiles.map((file, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: waveformStyle,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: trackNameStyle,\n          children: file.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: `timeline-${index}`,\n          style: timelineStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: `waveform-${index}`,\n          style: {\n            width: '100%',\n            height: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }, this), audioFiles && audioFiles.length > 0 ? /*#__PURE__*/_jsxDEV(PlayButton, {\n      wavesurferRefs: wavesurferRefs // Pass the refs to control the tracks\n      ,\n      setSpeed: setSpeed // Pass the setSpeed function for speed control\n      ,\n      isReady: isReady // Pass the readiness state\n      ,\n      speed: speed // Pass the current speed value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No audio tracks available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 9\n  }, this);\n}\n_s(Landingpage, \"dK/LU+t3NJJfJRth0ItGrPDsyZM=\", false, function () {\n  return [useLocation];\n});\n_c = Landingpage;\nexport default Landingpage;\nvar _c;\n$RefreshReg$(_c, \"Landingpage\");","map":{"version":3,"names":["React","useEffect","useRef","useState","WaveSurfer","TimelinePlugin","useLocation","Sidebar","cloud","PlayButton","sliceAudio","deleteAudioSection","handleTrackClick","jsxDEV","_jsxDEV","pagebackground","backgroundSize","backgroundImage","backgroundPosition","padding","height","margin","display","flexDirection","fontFamily","musicbackground","width","position","top","right","justifyContent","alignItems","backgroundColor","marginTop","boxShadow","overflowY","trackNameStyle","color","fontSize","zIndex","borderRadius","waveformStyle","marginBottom","timelineStyle","Landingpage","_s","wavesurferRefs","location","audioFiles","state","isReady","setIsReady","speed","setSpeed","progress","setProgress","current","longestDuration","length","forEach","file","index","containerId","timelineId","waveSurfer","create","container","waveColor","progressColor","autoCenter","interact","backend","cursorWidth","cursorColor","minPxPerSec","plugins","primaryColor","secondaryColor","primaryFontColor","secondaryFontColor","load","url","on","duration","getDuration","firstWaveSurfer","addPlugin","timeInterval","Math","ceil","primaryLabelInterval","secondaryLabelInterval","formatTimeCallback","seconds","minutes","floor","remainingSeconds","style","insertPosition","initPlugin","getCurrentTime","clickedTime","startTime","endTime","e","boundingRect","target","getBoundingClientRect","clickPositionX","clientX","left","clickPosition","deleteStart","deleteEnd","destroy","console","log","fileName","_jsxFileName","lineNumber","columnNumber","children","map","name","id","_c","$RefreshReg$"],"sources":["C:/Users/james/Downloads/Mellowdies/mellowdies/src/Landingpage/Landingpage.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport WaveSurfer from 'wavesurfer.js';\r\nimport TimelinePlugin from \"wavesurfer.js/dist/plugins/timeline\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport Sidebar from './Sidebar.js';\r\nimport cloud from '../images/backgrounds/cloud.png';\r\nimport PlayButton from './PlayButton.js';\r\nimport { sliceAudio, deleteAudioSection, handleTrackClick } from './Audiotrack.js'; // Import the new functions\r\n\r\n\r\nconst pagebackground = {\r\n    backgroundSize: 'cover',\r\n    backgroundImage: `url(${cloud})`,\r\n    backgroundPosition: 'center',\r\n    padding: '10px',\r\n    height: '100vh',\r\n    margin: 0,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    fontFamily: 'Concert One',\r\n};\r\n\r\nconst musicbackground = {\r\n    width: '75%',\r\n    height: '80%',\r\n    position: 'fixed',\r\n    top: '0',\r\n    right: '0',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'flex-start',\r\n    alignItems: 'left',\r\n    backgroundColor: 'rgba(255, 255, 255, 0.3)',\r\n    marginTop: '5px',\r\n    boxShadow: '0px 0px 15px 5px rgba(255, 255, 255, 0.6)',\r\n    overflowY: 'auto',\r\n    padding: '10px',\r\n};\r\n\r\nconst trackNameStyle = {\r\n    position: 'relative',\r\n    color: '#000000',\r\n    fontSize: '0.8rem',\r\n    zIndex: '1002',\r\n    padding: '5px',\r\n    borderRadius: '5px',\r\n    backgroundColor: 'rgba(255, 255, 255, 0.7)',\r\n};\r\n\r\nconst waveformStyle = {\r\n    width: '100%',\r\n    height: '75px',\r\n    position: 'relative',\r\n    marginBottom: '20px',\r\n};\r\n\r\nconst timelineStyle = {\r\n    width: '100%',\r\n    height: '75px',\r\n    position: 'relative',\r\n};\r\n\r\n\r\nfunction Landingpage() {\r\n    const wavesurferRefs = useRef([]);  // Array to hold refs for each WaveSurfer instance\r\n    const location = useLocation();\r\n    const { audioFiles } = location.state || { audioFiles: [] };\r\n    const [isReady, setIsReady] = useState(false);\r\n    const [speed, setSpeed] = useState(1);\r\n    const [progress, setProgress] = useState(0);\r\n\r\n    useEffect(() => {\r\n        // Initialize the wavesurferRefs array\r\n        wavesurferRefs.current = [];\r\n        let longestDuration = 0;  // Variable to keep track of the longest track duration\r\n\r\n\r\n        if (audioFiles && audioFiles.length > 0) {\r\n            audioFiles.forEach((file, index) => {\r\n                const containerId = `waveform-${index}`;\r\n                const timelineId = `timeline-${index}`;                \r\n\r\n                const waveSurfer = WaveSurfer.create({\r\n                    container: `#${containerId}`,\r\n                    waveColor: 'blue',\r\n                    progressColor: '#00FFFF',\r\n                    height: 75,\r\n                    autoCenter: true,\r\n                    interact: true,\r\n                    backend: 'MediaElement',\r\n                    cursorWidth: 2,\r\n                    cursorColor: '#FF0000',\r\n                    backgroundColor: 'rgba(255, 255, 255, 0)',\r\n                    minPxPerSec: 100,\r\n                    plugins: [\r\n                        TimelinePlugin.create({\r\n                            container: `#${timelineId}`,\r\n                            primaryColor: '#000',\r\n                            secondaryColor: '#c0c0c0',\r\n                            primaryFontColor: '#000',\r\n                            secondaryFontColor: '#000',\r\n                        })\r\n                    ]\r\n                });\r\n\r\n                waveSurfer.load(file.url);\r\n\r\n                waveSurfer.on('ready', () => {\r\n                    setIsReady(true);\r\n                    const duration = waveSurfer.getDuration();\r\n                    if (duration > longestDuration) {\r\n                        longestDuration = duration;  // Update longest track duration\r\n                    }\r\n    \r\n                    // After loading all the tracks, we configure the timeline based on the longest track\r\n                    if (index === audioFiles.length - 1) {  // Last track loaded, now configure the timeline\r\n                        const firstWaveSurfer = wavesurferRefs.current[0];  // Use the first WaveSurfer instance\r\n                        \r\n                        // Timeline plugin configuration using TimelinePluginOptions\r\n                        firstWaveSurfer.addPlugin(TimelinePlugin.create({\r\n                            container: `#timeline`,  // Single timeline container at the top\r\n                            duration: longestDuration,  // Set timeline to the longest track's duration\r\n                            timeInterval: Math.ceil(longestDuration / 10),  // Interval between time markers\r\n                            primaryLabelInterval: Math.ceil(longestDuration / 5),  // Primary label interval\r\n                            secondaryLabelInterval: Math.ceil(longestDuration / 10),  // Secondary label interval\r\n                            formatTimeCallback: (seconds) => {\r\n                                const minutes = Math.floor(seconds / 60);\r\n                                const remainingSeconds = Math.floor(seconds % 60);\r\n                                return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\r\n                            },\r\n                            style: {\r\n                                color: '#000',\r\n                                fontSize: '12px',\r\n                                fontFamily: 'Arial',\r\n                            },\r\n                            height: 30,  // Timeline height\r\n                            insertPosition: 'beforeend',  // Timeline insert position\r\n                        })).initPlugin('timeline');\r\n                    }\r\n                });\r\n                waveSurfer.on('audioprocess', () => {\r\n                    setProgress(waveSurfer.getCurrentTime() / waveSurfer.getDuration() * 100);\r\n                });\r\n\r\n                waveSurfer.on('seek', (progress) => {\r\n                    waveSurfer.on('seek', (progress) => {\r\n                        const duration = waveSurfer.getDuration();\r\n                        const clickedTime = progress * duration;  // Get the time in seconds where the user clicked\r\n        \r\n                        // You can update the startTime and endTime dynamically based on where the user clicked\r\n                        const startTime = clickedTime;  // Set slice start point at the clicked position\r\n                        const endTime = startTime + 5;  // Example: slice 5 seconds after the clicked position (adjust as needed)\r\n        \r\n                        sliceAudio(waveSurfer, startTime, endTime);\r\n        \r\n                        // If you want to allow deleting audio sections after the user clicks, set start and end times dynamically\r\n                        // const deleteStart = clickedTime;\r\n                        // const deleteEnd = deleteStart + 5;  // Example: delete 5 seconds from the clicked position (adjust as needed)\r\n                        // deleteAudioSection(waveSurfer, deleteStart, deleteEnd);\r\n                    });\r\n                        });\r\n\r\n            waveSurfer.on('click', (e) => {\r\n                const boundingRect = e.target.getBoundingClientRect();\r\n                const clickPositionX = e.clientX - boundingRect.left;\r\n                const clickPosition = clickPositionX / boundingRect.width; // normalized value between 0 and 1\r\n                handleTrackClick(waveSurfer, clickPosition);\r\n\r\n                // Example usage: slice between 5s and 10s\r\n                const startTime = 5; // You can dynamically calculate this based on clicks or UI input\r\n                const endTime = 10;\r\n                sliceAudio(waveSurfer, startTime, endTime);\r\n\r\n                // Example usage: delete section between 10s and 15s\r\n                const deleteStart = 10;\r\n                const deleteEnd = 15;\r\n                deleteAudioSection(waveSurfer, deleteStart, deleteEnd);\r\n            });\r\n\r\n            // Store the waveSurfer instance in the refs array\r\n            wavesurferRefs.current[index] = waveSurfer;\r\n        });\r\n\r\n            // Cleanup function to properly handle the destruction of WaveSurfer instances\r\n            return () => {\r\n                wavesurferRefs.current.forEach(waveSurfer => {\r\n                    if (waveSurfer) {\r\n                        waveSurfer.destroy();\r\n                    }\r\n                });\r\n            };\r\n        } else {\r\n            console.log('No audio files available to display.');\r\n        }\r\n    }, [audioFiles]);\r\n\r\n    <PlayButton\r\n    wavesurferRefs={wavesurferRefs}\r\n    setSpeed={setSpeed}\r\n    isReady={isReady}\r\n    speed={speed}\r\n   />\r\n\r\n    return (\r\n        <div style={pagebackground}>\r\n            <div style={musicbackground}>\r\n                {audioFiles.map((file, index) => (\r\n                    <div key={index} style={waveformStyle}>\r\n                        <div style={trackNameStyle}>{file.name}</div>\r\n                        <div id={`timeline-${index}`} style={timelineStyle}></div>\r\n                        <div id={`waveform-${index}`} style={{ width: '100%', height: '100%' }}></div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            <Sidebar/>\r\n\r\n            {audioFiles && audioFiles.length > 0 ? (\r\n                <PlayButton\r\n                wavesurferRefs={wavesurferRefs}  // Pass the refs to control the tracks\r\n                setSpeed={setSpeed}               // Pass the setSpeed function for speed control\r\n                isReady={isReady}                 // Pass the readiness state\r\n                speed={speed}                     // Pass the current speed value\r\n                />\r\n            ) : (\r\n                <p>No audio tracks available.</p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Landingpage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}