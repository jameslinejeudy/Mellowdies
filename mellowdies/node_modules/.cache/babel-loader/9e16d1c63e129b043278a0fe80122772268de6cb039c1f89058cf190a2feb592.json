{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elect\\\\Documents\\\\CIS\\\\4914\\\\Mellowdies\\\\mellowdies\\\\src\\\\Landingpage\\\\Landingpage.js\",\n  _s2 = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport WaveSurfer from 'wavesurfer.js';\nimport WebAudioPlayer from 'wavesurfer.js/dist/webaudio.js';\nimport RegionsPlugin from \"wavesurfer.js/dist/plugins/regions.js\";\nimport TimelinePlugin from 'wavesurfer.js/dist/plugins/timeline';\nimport { useLocation } from 'react-router-dom';\nimport Sidebar from './Sidebar.js';\nimport PlayButton from './PlayButton.js';\n//import PlusIcon from '../images/icons/plus.png';\nimport './Landingpage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar blobber = require('audiobuffer-to-blob');\nconst waveSurferData = [];\nconst regions = RegionsPlugin.create();\nconst audioContext = new AudioContext();\nconst webAudioPlayer = new WebAudioPlayer(audioContext);\nlet fileLoaded = false;\nconst eqBands = [32, 64, 125, 250, 500, 1000, 2000, 4000, 8000, 16000];\nlet filters = [];\nfunction createFilters(audioCtx, band) {\n  const filter = audioCtx.createBiquadFilter();\n  filter.type = band <= 32 ? 'lowshelf' : band >= 16000 ? 'highshelf' : 'peaking';\n  filter.gain.value = 0;\n  filter.Q.value = 1;\n  filter.frequency.value = band;\n  return filter;\n}\nfor (let i = 0; i < 10; i++) {\n  let filter = createFilters(webAudioPlayer.audioContext, eqBands[i]);\n  filters.push(filter);\n}\nfunction Landingpage() {\n  _s2();\n  var _location$state,\n    _s = $RefreshSig$();\n  const navigate = useNavigate();\n  const wavesurferRefs = useRef([]);\n  const containerRefs = useRef([]);\n  const musicbackgroundRef = useRef(null);\n  const location = useLocation();\n  const [audioFiles, setAudioFiles] = useState(((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.audioFiles) || []);\n  const [isReady, setIsReady] = useState(false);\n  const [speed, setSpeed] = useState(1);\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const fileInputRef = useRef(null);\n  let longestDuration = 0;\n  useEffect(() => {\n    var _location$state2;\n    if ((_location$state2 = location.state) !== null && _location$state2 !== void 0 && _location$state2.audioFiles) {\n      setAudioFiles(location.state.audioFiles);\n    }\n  }, [location.state]);\n  const initializeWaveSurfer = ({\n    navigate\n  }) => {\n    _s();\n    wavesurferRefs.current = [];\n    const location = useLocation();\n    if (audioFiles && audioFiles.length > 0) {\n      audioFiles.forEach((file, index) => {\n        const container = containerRefs.current[index];\n        if (!container) {\n          console.error(`Container for index ${index} not found`);\n          return;\n        }\n        if (file.url) {\n          webAudioPlayer.src = file.url;\n        } else {\n          webAudioPlayer.src = location.newFile;\n        }\n        fileLoaded = true;\n        const waveSurfer = WaveSurfer.create({\n          container: container,\n          waveColor: 'blue',\n          progressColor: '#00FFFF',\n          height: 75,\n          autoCenter: true,\n          interact: true,\n          cursorWidth: 2,\n          cursorColor: '#FF0000',\n          backgroundColor: 'rgba(255, 255, 255, 0)',\n          minPxPerSec: 50,\n          media: webAudioPlayer,\n          plugins: [regions]\n        });\n        waveSurfer.on('ready', () => {\n          setIsReady(true);\n          const buffer = waveSurfer.getDecodedData();\n          console.log('buffer length : ', buffer.length);\n          console.log('buffer duration : ', buffer.duration);\n          console.log('buffer sampleRate : ', buffer.sampleRate);\n          console.log('buffer numberOfChannels : ', buffer.numberOfChannels);\n          const duration = waveSurfer.getDuration();\n          if (duration > longestDuration) {\n            longestDuration = duration;\n          }\n          if (index === 0) {\n            const timeline = TimelinePlugin.create({\n              insertPosition: 'beforebegin',\n              primaryColor: '#000',\n              secondaryColor: '#c0c0c0',\n              primaryFontColor: '#000',\n              secondaryFontColor: '#000',\n              secondaryLabelOpacity: 0.9,\n              timeInterval: 0.2,\n              primaryLabelInterval: 5,\n              secondaryLabelInterval: 1\n            });\n            waveSurfer.registerPlugin(timeline);\n          }\n        });\n        regions.on('region-created', region => {\n          regions.getRegions().forEach(r => {\n            if (r.id !== region.id) {\n              r.remove();\n            }\n          });\n        });\n        regions.on('region-clicked', (region, e) => {\n          e.stopPropagation();\n          region.remove();\n        });\n        regions.enableDragSelection({\n          color: 'rgba(245, 137, 5, 0.4)'\n        });\n        wavesurferRefs.current[index] = waveSurfer;\n        waveSurferData.push({\n          waveSurfer,\n          regions,\n          filters,\n          webAudioPlayer\n        });\n      });\n    }\n  };\n  _s(initializeWaveSurfer, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n    return [useLocation];\n  });\n  const scheduleWaveSurferInitialization = () => {\n    setTimeout(() => initializeWaveSurfer(), 100);\n  };\n  if (audioFiles && audioFiles.length > 0 && wavesurferRefs.current.length === 0) {\n    scheduleWaveSurferInitialization();\n  }\n  const mergeAudioFiles = async () => {\n    const buffer = waveSurferData[0].waveSurfer.getDecodedData();\n    const finalBlob = bufferToWaveBlob(buffer, buffer.sampleRate);\n    navigate('/Exportpage', {\n      state: {\n        mergedAudio: URL.createObjectURL(finalBlob)\n      }\n    });\n  };\n  const bufferToWaveBlob = (buffer, sampleRate) => {\n    const numOfChannels = buffer.numberOfChannels;\n    const length = buffer.length * numOfChannels * 2 + 44;\n    const result = new DataView(new ArrayBuffer(length));\n    const writeString = (view, offset, string) => {\n      for (let i = 0; i < string.length; i++) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n      }\n    };\n    let offset = 0;\n    writeString(result, offset, 'RIFF');\n    offset += 4;\n    result.setUint32(offset, 36 + buffer.length * numOfChannels * 2, true);\n    offset += 4;\n    writeString(result, offset, 'WAVE');\n    offset += 4;\n    writeString(result, offset, 'fmt ');\n    offset += 4;\n    result.setUint32(offset, 16, true);\n    offset += 4;\n    result.setUint16(offset, 1, true);\n    offset += 2;\n    result.setUint16(offset, numOfChannels, true);\n    offset += 2;\n    result.setUint32(offset, sampleRate, true);\n    offset += 4;\n    result.setUint32(offset, sampleRate * 2 * numOfChannels, true);\n    offset += 4;\n    result.setUint16(offset, numOfChannels * 2, true);\n    offset += 2;\n    result.setUint16(offset, 16, true);\n    offset += 2;\n    writeString(result, offset, 'data');\n    offset += 4;\n    result.setUint32(offset, buffer.length * numOfChannels * 2, true);\n    offset += 4;\n    for (let i = 0; i < buffer.length; i++) {\n      for (let channel = 0; channel < numOfChannels; channel++) {\n        const sample = buffer.getChannelData(channel)[i];\n        const clampedSample = Math.max(-1, Math.min(1, sample));\n        result.setInt16(offset, clampedSample < 0 ? clampedSample * 0x8000 : clampedSample * 0x7FFF, true);\n        offset += 2;\n      }\n    }\n    return new Blob([result], {\n      type: 'audio/wav'\n    });\n  };\n  const handleFilesButtonClick = () => {\n    fileInputRef.current.click();\n    setIsDropdownOpen(false);\n  };\n  const handleAddFiles = event => {\n    const newFiles = Array.from(event.target.files).map(file => ({\n      name: file.name,\n      url: URL.createObjectURL(file),\n      mimeType: file.type\n    }));\n    if (newFiles.length > 0) {\n      setAudioFiles(prevAudioFiles => [...prevAudioFiles, ...newFiles]);\n    } else {\n      alert('Please select audio files.');\n    }\n  };\n  const toggleDropdown = () => {\n    setIsDropdownOpen(!isDropdownOpen);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pagebackground\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"musicbackground\",\n      ref: musicbackgroundRef,\n      children: audioFiles.map((file, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"trackName\",\n          className: \"trackNameStyle\",\n          children: file.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"timeline\",\n          className: \"timelineStyle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"waveformStyle\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: el => containerRefs.current[index] = el,\n            style: {\n              width: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Sidebar, {\n      waveData: waveSurferData,\n      fileLoaded: fileLoaded\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }, this), audioFiles && audioFiles.length > 0 ? /*#__PURE__*/_jsxDEV(PlayButton, {\n      wavesurferRefs: wavesurferRefs,\n      setSpeed: setSpeed,\n      isReady: isReady,\n      speed: speed,\n      aContext: audioContext\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No audio tracks available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"exportButton\",\n      onClick: async () => {\n        await mergeAudioFiles();\n      },\n      children: \"Export\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 9\n  }, this);\n}\n_s2(Landingpage, \"sEXoAu3AfcX1bWIXAvWGS5kPBXI=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Landingpage;\nexport default Landingpage;\nvar _c;\n$RefreshReg$(_c, \"Landingpage\");","map":{"version":3,"names":["React","useRef","useState","useEffect","useNavigate","WaveSurfer","WebAudioPlayer","RegionsPlugin","TimelinePlugin","useLocation","Sidebar","PlayButton","jsxDEV","_jsxDEV","blobber","require","waveSurferData","regions","create","audioContext","AudioContext","webAudioPlayer","fileLoaded","eqBands","filters","createFilters","audioCtx","band","filter","createBiquadFilter","type","gain","value","Q","frequency","i","push","Landingpage","_s2","_location$state","_s","$RefreshSig$","navigate","wavesurferRefs","containerRefs","musicbackgroundRef","location","audioFiles","setAudioFiles","state","isReady","setIsReady","speed","setSpeed","isDropdownOpen","setIsDropdownOpen","fileInputRef","longestDuration","_location$state2","initializeWaveSurfer","current","length","forEach","file","index","container","console","error","url","src","newFile","waveSurfer","waveColor","progressColor","height","autoCenter","interact","cursorWidth","cursorColor","backgroundColor","minPxPerSec","media","plugins","on","buffer","getDecodedData","log","duration","sampleRate","numberOfChannels","getDuration","timeline","insertPosition","primaryColor","secondaryColor","primaryFontColor","secondaryFontColor","secondaryLabelOpacity","timeInterval","primaryLabelInterval","secondaryLabelInterval","registerPlugin","region","getRegions","r","id","remove","e","stopPropagation","enableDragSelection","color","scheduleWaveSurferInitialization","setTimeout","mergeAudioFiles","finalBlob","bufferToWaveBlob","mergedAudio","URL","createObjectURL","numOfChannels","result","DataView","ArrayBuffer","writeString","view","offset","string","setUint8","charCodeAt","setUint32","setUint16","channel","sample","getChannelData","clampedSample","Math","max","min","setInt16","Blob","handleFilesButtonClick","click","handleAddFiles","event","newFiles","Array","from","target","files","map","name","mimeType","prevAudioFiles","alert","toggleDropdown","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","el","style","width","waveData","aContext","onClick","_c","$RefreshReg$"],"sources":["C:/Users/elect/Documents/CIS/4914/Mellowdies/mellowdies/src/Landingpage/Landingpage.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';  \r\nimport WaveSurfer from 'wavesurfer.js';\r\nimport WebAudioPlayer from 'wavesurfer.js/dist/webaudio.js';\r\nimport RegionsPlugin from \"wavesurfer.js/dist/plugins/regions.js\";\r\nimport TimelinePlugin from 'wavesurfer.js/dist/plugins/timeline';  \r\nimport { useLocation } from 'react-router-dom';\r\nimport Sidebar from './Sidebar.js';\r\nimport PlayButton from './PlayButton.js';\r\n//import PlusIcon from '../images/icons/plus.png';\r\nimport './Landingpage.css';  \r\n\r\nvar blobber = require('audiobuffer-to-blob');\r\n\r\nconst waveSurferData = [];\r\nconst regions = RegionsPlugin.create();\r\nconst audioContext = new AudioContext();\r\nconst webAudioPlayer = new WebAudioPlayer(audioContext);\r\nlet fileLoaded = false;\r\nconst eqBands = [32, 64, 125, 250, 500, 1000, 2000, 4000, 8000, 16000];\r\nlet filters = [];\r\n\r\nfunction createFilters (audioCtx, band) {\r\n    const filter = audioCtx.createBiquadFilter()\r\n    filter.type = band <= 32 ? 'lowshelf' : band >= 16000 ? 'highshelf' : 'peaking'\r\n    filter.gain.value = 0\r\n    filter.Q.value = 1 \r\n    filter.frequency.value = band \r\n    return filter\r\n  }\r\n\r\nfor (let i = 0; i < 10; i++) {\r\n    let filter = createFilters(webAudioPlayer.audioContext, eqBands[i])\r\n    filters.push(filter);\r\n}\r\n\r\nfunction Landingpage() {\r\n    const navigate = useNavigate(); \r\n    const wavesurferRefs = useRef([]);\r\n    const containerRefs = useRef([]);\r\n    const musicbackgroundRef = useRef(null);  \r\n    const location = useLocation();\r\n\r\n    const [audioFiles, setAudioFiles] = useState(location.state?.audioFiles || []);\r\n    const [isReady, setIsReady] = useState(false);\r\n    const [speed, setSpeed] = useState(1);\r\n    const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n    const fileInputRef = useRef(null); \r\n    let longestDuration = 0;  \r\n\r\n    useEffect(() => {\r\n        if (location.state?.audioFiles) {\r\n            setAudioFiles(location.state.audioFiles);\r\n        }\r\n    }, [location.state]);\r\n\r\n    const initializeWaveSurfer = ({navigate}) => {\r\n        wavesurferRefs.current = [];\r\n        const location = useLocation();\r\n    \r\n        if (audioFiles && audioFiles.length > 0) {\r\n            audioFiles.forEach((file, index) => {\r\n                const container = containerRefs.current[index];\r\n                if (!container) {\r\n                    console.error(`Container for index ${index} not found`);\r\n                    return;\r\n                }\r\n                \r\n                if (file.url) {  \r\n                    webAudioPlayer.src = file.url;\r\n                } else {\r\n                    webAudioPlayer.src = location.newFile;\r\n                }\r\n\r\n                fileLoaded = true;\r\n                \r\n                const waveSurfer = WaveSurfer.create({\r\n                    container: container, \r\n                    waveColor: 'blue',\r\n                    progressColor: '#00FFFF',\r\n                    height: 75,\r\n                    autoCenter: true,\r\n                    interact: true,\r\n                    cursorWidth: 2,\r\n                    cursorColor: '#FF0000',\r\n                    backgroundColor: 'rgba(255, 255, 255, 0)',\r\n                    minPxPerSec: 50,\r\n                    media: webAudioPlayer,\r\n                    plugins: [regions],\r\n                });\r\n\r\n                waveSurfer.on('ready', () => {setIsReady(true);\r\n                    const buffer = waveSurfer.getDecodedData();\r\n        \r\n                    console.log('buffer length : ', buffer.length);\r\n                    console.log('buffer duration : ', buffer.duration);\r\n                    console.log('buffer sampleRate : ', buffer.sampleRate);\r\n                    console.log('buffer numberOfChannels : ', buffer.numberOfChannels);\r\n\r\n                    const duration = waveSurfer.getDuration();\r\n\r\n                    if (duration > longestDuration) {\r\n                        longestDuration = duration;  \r\n                    }\r\n\r\n                    if (index === 0) {\r\n                        const timeline = TimelinePlugin.create({\r\n                            insertPosition: 'beforebegin',\r\n                            primaryColor: '#000',\r\n                            secondaryColor: '#c0c0c0',\r\n                            primaryFontColor: '#000',\r\n                            secondaryFontColor: '#000',\r\n                            secondaryLabelOpacity: 0.9,\r\n                            timeInterval: 0.2,\r\n                            primaryLabelInterval: 5,\r\n                            secondaryLabelInterval: 1,\r\n                        });\r\n\r\n                        waveSurfer.registerPlugin(timeline);\r\n                    }\r\n                });\r\n    \r\n                regions.on('region-created', (region) => {\r\n                    regions.getRegions().forEach((r) => {\r\n                        if (r.id !== region.id) {\r\n                            r.remove();\r\n                        }\r\n                    });\r\n                });\r\n\r\n                regions.on('region-clicked', (region, e) => {\r\n                    e.stopPropagation();\r\n                    region.remove();\r\n                });\r\n    \r\n                regions.enableDragSelection({\r\n                    color: 'rgba(245, 137, 5, 0.4)',\r\n                });\r\n    \r\n                wavesurferRefs.current[index] = waveSurfer;\r\n                waveSurferData.push({ waveSurfer, regions, filters, webAudioPlayer});\r\n            });\r\n        }\r\n    };\r\n\r\n    const scheduleWaveSurferInitialization = () => {\r\n        setTimeout(() => initializeWaveSurfer(), 100); \r\n    };\r\n\r\n    if (audioFiles && audioFiles.length > 0 && wavesurferRefs.current.length === 0) {\r\n        scheduleWaveSurferInitialization();\r\n    }\r\n\r\n    const mergeAudioFiles = async () => {\r\n        const buffer = waveSurferData[0].waveSurfer.getDecodedData();\r\n    \r\n        const finalBlob = bufferToWaveBlob(buffer, buffer.sampleRate);\r\n    \r\n        navigate('/Exportpage', { state: { mergedAudio: URL.createObjectURL(finalBlob) } });\r\n    };\r\n    \r\n    const bufferToWaveBlob = (buffer, sampleRate) => {\r\n        const numOfChannels = buffer.numberOfChannels;\r\n        const length = buffer.length * numOfChannels * 2 + 44;\r\n        const result = new DataView(new ArrayBuffer(length));\r\n    \r\n        const writeString = (view, offset, string) => {\r\n            for (let i = 0; i < string.length; i++) {\r\n                view.setUint8(offset + i, string.charCodeAt(i));\r\n            }\r\n        };\r\n    \r\n        let offset = 0;\r\n    \r\n        writeString(result, offset, 'RIFF'); offset += 4;\r\n        result.setUint32(offset, 36 + buffer.length * numOfChannels * 2, true); offset += 4;\r\n        writeString(result, offset, 'WAVE'); offset += 4;\r\n        writeString(result, offset, 'fmt '); offset += 4;\r\n        result.setUint32(offset, 16, true); offset += 4;  \r\n        result.setUint16(offset, 1, true); offset += 2;   \r\n        result.setUint16(offset, numOfChannels, true); offset += 2; \r\n        result.setUint32(offset, sampleRate, true); offset += 4;    \r\n        result.setUint32(offset, sampleRate * 2 * numOfChannels, true); offset += 4; \r\n        result.setUint16(offset, numOfChannels * 2, true); offset += 2; \r\n        result.setUint16(offset, 16, true); offset += 2; \r\n    \r\n        \r\n        writeString(result, offset, 'data'); offset += 4;\r\n        result.setUint32(offset, buffer.length * numOfChannels * 2, true); offset += 4;\r\n    \r\n        for (let i = 0; i < buffer.length; i++) {\r\n            for (let channel = 0; channel < numOfChannels; channel++) {\r\n                const sample = buffer.getChannelData(channel)[i];\r\n                const clampedSample = Math.max(-1, Math.min(1, sample));\r\n                result.setInt16(offset, clampedSample < 0 ? clampedSample * 0x8000 : clampedSample * 0x7FFF, true);\r\n                offset += 2;\r\n            }\r\n        }\r\n    \r\n        return new Blob([result], { type: 'audio/wav' });\r\n    };\r\n\r\n    const handleFilesButtonClick = () => {\r\n        fileInputRef.current.click(); \r\n        setIsDropdownOpen(false);\r\n    };\r\n\r\n    const handleAddFiles = (event) => {\r\n        const newFiles = Array.from(event.target.files).map(file => ({\r\n            name: file.name,\r\n            url: URL.createObjectURL(file),\r\n            mimeType: file.type\r\n        }));\r\n\r\n    if (newFiles.length > 0) {\r\n        setAudioFiles((prevAudioFiles) => [...prevAudioFiles, ...newFiles]);  \r\n    } else {\r\n        alert('Please select audio files.');\r\n    }\r\n};\r\n\r\n    const toggleDropdown = () => {\r\n        setIsDropdownOpen(!isDropdownOpen);\r\n    };\r\n\r\n    return (\r\n        <div className=\"pagebackground\">\r\n            <div\r\n                className=\"musicbackground\"\r\n                ref={musicbackgroundRef}\r\n            >\r\n                {audioFiles.map((file, index) => (\r\n                    <div>\r\n                        <div id=\"trackName\" className=\"trackNameStyle\">{file.name}</div>\r\n                        <div id=\"timeline\" className=\"timelineStyle\"></div>\r\n                        <div key={index} className=\"waveformStyle\">\r\n                            <div ref={el => containerRefs.current[index] = el} style={{ width: '100%' }}></div>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            <Sidebar waveData={waveSurferData} fileLoaded={fileLoaded}/>\r\n\r\n            {audioFiles && audioFiles.length > 0 ? (\r\n                <PlayButton \r\n                    wavesurferRefs={wavesurferRefs}\r\n                    setSpeed={setSpeed}  \r\n                    isReady={isReady}\r\n                    speed={speed}\r\n                    aContext={audioContext}\r\n                />\r\n            ) : (\r\n                <p>No audio tracks available.</p>\r\n            )}\r\n\r\n            <button className=\"exportButton\" onClick={async () => {\r\n            await mergeAudioFiles();  \r\n            }}>\r\n            Export\r\n            </button>\r\n            \r\n            {/*\r\n            <button className=\"dropdownButton\" onClick={toggleDropdown}>\r\n                <img src={PlusIcon} alt=\"Add Tracks\" style={{ width: '22px', height: '22px' }} />\r\n            </button>\r\n\r\n            {isDropdownOpen && (\r\n                 <div className=\"dropdownMenu\">\r\n                    <button onClick={handleFilesButtonClick}>FILES</button>\r\n                    <button onClick={() => alert('Google Drive Selected')}>GOOGLE DRIVE</button>\r\n                </div>\r\n            )}\r\n\r\n            <input\r\n                type=\"file\"\r\n                multiple\r\n                ref={fileInputRef}\r\n                accept='audio/*'\r\n                style={{ display: 'none' }}\r\n                onChange={handleAddFiles} \r\n            />\r\n            */}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Landingpage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}