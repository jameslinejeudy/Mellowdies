{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst StartupChunkDependenciesPlugin = require(\"../runtime/StartupChunkDependenciesPlugin\");\nconst ImportScriptsChunkLoadingRuntimeModule = require(\"./ImportScriptsChunkLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass ImportScriptsChunkLoadingPlugin {\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    new StartupChunkDependenciesPlugin({\n      chunkLoading: \"import-scripts\",\n      asyncChunkLoading: true\n    }).apply(compiler);\n    compiler.hooks.thisCompilation.tap(\"ImportScriptsChunkLoadingPlugin\", compilation => {\n      const globalChunkLoading = compilation.outputOptions.chunkLoading;\n      /**\n       * @param {Chunk} chunk chunk\n       * @returns {boolean} true, if wasm loading is enabled for the chunk\n       */\n      const isEnabledForChunk = chunk => {\n        const options = chunk.getEntryOptions();\n        const chunkLoading = options && options.chunkLoading !== undefined ? options.chunkLoading : globalChunkLoading;\n        return chunkLoading === \"import-scripts\";\n      };\n      const onceForChunkSet = new WeakSet();\n      /**\n       * @param {Chunk} chunk chunk\n       * @param {Set<string>} set runtime requirements\n       */\n      const handler = (chunk, set) => {\n        if (onceForChunkSet.has(chunk)) return;\n        onceForChunkSet.add(chunk);\n        if (!isEnabledForChunk(chunk)) return;\n        const withCreateScriptUrl = Boolean(compilation.outputOptions.trustedTypes);\n        set.add(RuntimeGlobals.moduleFactoriesAddOnly);\n        set.add(RuntimeGlobals.hasOwnProperty);\n        if (withCreateScriptUrl) {\n          set.add(RuntimeGlobals.createScriptUrl);\n        }\n        compilation.addRuntimeModule(chunk, new ImportScriptsChunkLoadingRuntimeModule(set, withCreateScriptUrl));\n      };\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.ensureChunkHandlers).tap(\"ImportScriptsChunkLoadingPlugin\", handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.hmrDownloadUpdateHandlers).tap(\"ImportScriptsChunkLoadingPlugin\", handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.hmrDownloadManifest).tap(\"ImportScriptsChunkLoadingPlugin\", handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.baseURI).tap(\"ImportScriptsChunkLoadingPlugin\", handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.ensureChunkHandlers).tap(\"ImportScriptsChunkLoadingPlugin\", (chunk, set) => {\n        if (!isEnabledForChunk(chunk)) return;\n        set.add(RuntimeGlobals.publicPath);\n        set.add(RuntimeGlobals.getChunkScriptFilename);\n      });\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.hmrDownloadUpdateHandlers).tap(\"ImportScriptsChunkLoadingPlugin\", (chunk, set) => {\n        if (!isEnabledForChunk(chunk)) return;\n        set.add(RuntimeGlobals.publicPath);\n        set.add(RuntimeGlobals.getChunkUpdateScriptFilename);\n        set.add(RuntimeGlobals.moduleCache);\n        set.add(RuntimeGlobals.hmrModuleData);\n        set.add(RuntimeGlobals.moduleFactoriesAddOnly);\n      });\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.hmrDownloadManifest).tap(\"ImportScriptsChunkLoadingPlugin\", (chunk, set) => {\n        if (!isEnabledForChunk(chunk)) return;\n        set.add(RuntimeGlobals.publicPath);\n        set.add(RuntimeGlobals.getUpdateManifestFilename);\n      });\n    });\n  }\n}\nmodule.exports = ImportScriptsChunkLoadingPlugin;","map":{"version":3,"names":["RuntimeGlobals","require","StartupChunkDependenciesPlugin","ImportScriptsChunkLoadingRuntimeModule","ImportScriptsChunkLoadingPlugin","apply","compiler","chunkLoading","asyncChunkLoading","hooks","thisCompilation","tap","compilation","globalChunkLoading","outputOptions","isEnabledForChunk","chunk","options","getEntryOptions","undefined","onceForChunkSet","WeakSet","handler","set","has","add","withCreateScriptUrl","Boolean","trustedTypes","moduleFactoriesAddOnly","hasOwnProperty","createScriptUrl","addRuntimeModule","runtimeRequirementInTree","for","ensureChunkHandlers","hmrDownloadUpdateHandlers","hmrDownloadManifest","baseURI","publicPath","getChunkScriptFilename","getChunkUpdateScriptFilename","moduleCache","hmrModuleData","getUpdateManifestFilename","module","exports"],"sources":["C:/Users/james/Downloads/Mellowdies/mellowdies/node_modules/webpack/lib/webworker/ImportScriptsChunkLoadingPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst StartupChunkDependenciesPlugin = require(\"../runtime/StartupChunkDependenciesPlugin\");\nconst ImportScriptsChunkLoadingRuntimeModule = require(\"./ImportScriptsChunkLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass ImportScriptsChunkLoadingPlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tnew StartupChunkDependenciesPlugin({\n\t\t\tchunkLoading: \"import-scripts\",\n\t\t\tasyncChunkLoading: true\n\t\t}).apply(compiler);\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\t\"ImportScriptsChunkLoadingPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tconst globalChunkLoading = compilation.outputOptions.chunkLoading;\n\t\t\t\t/**\n\t\t\t\t * @param {Chunk} chunk chunk\n\t\t\t\t * @returns {boolean} true, if wasm loading is enabled for the chunk\n\t\t\t\t */\n\t\t\t\tconst isEnabledForChunk = chunk => {\n\t\t\t\t\tconst options = chunk.getEntryOptions();\n\t\t\t\t\tconst chunkLoading =\n\t\t\t\t\t\toptions && options.chunkLoading !== undefined\n\t\t\t\t\t\t\t? options.chunkLoading\n\t\t\t\t\t\t\t: globalChunkLoading;\n\t\t\t\t\treturn chunkLoading === \"import-scripts\";\n\t\t\t\t};\n\t\t\t\tconst onceForChunkSet = new WeakSet();\n\t\t\t\t/**\n\t\t\t\t * @param {Chunk} chunk chunk\n\t\t\t\t * @param {Set<string>} set runtime requirements\n\t\t\t\t */\n\t\t\t\tconst handler = (chunk, set) => {\n\t\t\t\t\tif (onceForChunkSet.has(chunk)) return;\n\t\t\t\t\tonceForChunkSet.add(chunk);\n\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\tconst withCreateScriptUrl = Boolean(\n\t\t\t\t\t\tcompilation.outputOptions.trustedTypes\n\t\t\t\t\t);\n\t\t\t\t\tset.add(RuntimeGlobals.moduleFactoriesAddOnly);\n\t\t\t\t\tset.add(RuntimeGlobals.hasOwnProperty);\n\t\t\t\t\tif (withCreateScriptUrl) {\n\t\t\t\t\t\tset.add(RuntimeGlobals.createScriptUrl);\n\t\t\t\t\t}\n\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\tchunk,\n\t\t\t\t\t\tnew ImportScriptsChunkLoadingRuntimeModule(set, withCreateScriptUrl)\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.ensureChunkHandlers)\n\t\t\t\t\t.tap(\"ImportScriptsChunkLoadingPlugin\", handler);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.hmrDownloadUpdateHandlers)\n\t\t\t\t\t.tap(\"ImportScriptsChunkLoadingPlugin\", handler);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.hmrDownloadManifest)\n\t\t\t\t\t.tap(\"ImportScriptsChunkLoadingPlugin\", handler);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.baseURI)\n\t\t\t\t\t.tap(\"ImportScriptsChunkLoadingPlugin\", handler);\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.ensureChunkHandlers)\n\t\t\t\t\t.tap(\"ImportScriptsChunkLoadingPlugin\", (chunk, set) => {\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\t\tset.add(RuntimeGlobals.publicPath);\n\t\t\t\t\t\tset.add(RuntimeGlobals.getChunkScriptFilename);\n\t\t\t\t\t});\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.hmrDownloadUpdateHandlers)\n\t\t\t\t\t.tap(\"ImportScriptsChunkLoadingPlugin\", (chunk, set) => {\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\t\tset.add(RuntimeGlobals.publicPath);\n\t\t\t\t\t\tset.add(RuntimeGlobals.getChunkUpdateScriptFilename);\n\t\t\t\t\t\tset.add(RuntimeGlobals.moduleCache);\n\t\t\t\t\t\tset.add(RuntimeGlobals.hmrModuleData);\n\t\t\t\t\t\tset.add(RuntimeGlobals.moduleFactoriesAddOnly);\n\t\t\t\t\t});\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.hmrDownloadManifest)\n\t\t\t\t\t.tap(\"ImportScriptsChunkLoadingPlugin\", (chunk, set) => {\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\t\tset.add(RuntimeGlobals.publicPath);\n\t\t\t\t\t\tset.add(RuntimeGlobals.getUpdateManifestFilename);\n\t\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\nmodule.exports = ImportScriptsChunkLoadingPlugin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}