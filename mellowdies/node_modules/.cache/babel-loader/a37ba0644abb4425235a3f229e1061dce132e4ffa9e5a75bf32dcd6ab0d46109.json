{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\james\\\\Downloads\\\\Mellowdies\\\\mellowdies\\\\src\\\\Landingpage\\\\Landingpage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport WaveSurfer from 'wavesurfer.js';\nimport TimelinePlugin from \"wavesurfer.js/dist/plugins/timeline\";\nimport { useLocation } from 'react-router-dom';\nimport Sidebar from './Sidebar.js';\nimport cloud from '../images/backgrounds/cloud.png';\nimport './Landingpage.css';\nimport PlayButton from './PlayButton.js';\nimport { sliceAudio, deleteAudioSection, handleTrackClick } from './Audiotrack.js'; // Import the new functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Landingpage() {\n  _s();\n  const wavesurferRefs = useRef([]); // Array to hold refs for each WaveSurfer instance\n  const location = useLocation();\n  const {\n    audioFiles\n  } = location.state || {\n    audioFiles: []\n  };\n  const [isReady, setIsReady] = useState(false);\n  const [speed, setSpeed] = useState(1);\n  const [progress, setProgress] = useState(0);\n  let longestDuration = 0; // Variable to keep track of the longest track duration\n\n  useEffect(() => {\n    // Initialize the wavesurferRefs array\n    wavesurferRefs.current = [];\n    if (audioFiles && audioFiles.length > 0) {\n      audioFiles.forEach((file, index) => {\n        const containerId = `waveform-${index}`;\n        const waveSurfer = WaveSurfer.create({\n          container: `#${containerId}`,\n          waveColor: 'blue',\n          progressColor: '#00FFFF',\n          height: 75,\n          autoCenter: true,\n          interact: true,\n          backend: 'MediaElement',\n          cursorWidth: 2,\n          cursorColor: '#FF0000',\n          backgroundColor: 'rgba(255, 255, 255, 0)',\n          minPxPerSec: 100\n        });\n        waveSurfer.load(file.url);\n        waveSurfer.on('ready', () => {\n          setIsReady(true);\n          const duration = waveSurfer.getDuration();\n          if (duration > longestDuration) {\n            longestDuration = duration; // Update longest track duration\n          }\n\n          // After loading all the tracks, configure the timeline based on the longest track\n          if (index === audioFiles.length - 1) {\n            // Last track loaded\n            const firstWaveSurfer = wavesurferRefs.current[0]; // Use the first WaveSurfer instance\n\n            // Timeline plugin configuration using TimelinePluginOptions\n            firstWaveSurfer.addPlugin(TimelinePlugin.create({\n              container: `#timeline`,\n              // Single timeline container at the top\n              duration: longestDuration,\n              // Set timeline to the longest track's duration\n              timeInterval: Math.ceil(longestDuration / 10),\n              // Interval between time markers\n              primaryLabelInterval: Math.ceil(longestDuration / 5),\n              // Primary label interval\n              secondaryLabelInterval: Math.ceil(longestDuration / 10),\n              // Secondary label interval\n              formatTimeCallback: seconds => {\n                const minutes = Math.floor(seconds / 60);\n                const remainingSeconds = Math.floor(seconds % 60);\n                return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\n              },\n              style: {\n                color: '#000',\n                fontSize: '12px',\n                fontFamily: 'Arial'\n              },\n              height: 30,\n              // Timeline height\n              insertPosition: 'beforeend' // Timeline insert position\n            })).initPlugin('timeline');\n          }\n        });\n        waveSurfer.on('audioprocess', () => {\n          setProgress(waveSurfer.getCurrentTime() / waveSurfer.getDuration() * 100);\n        });\n        waveSurfer.on('seek', progress => {\n          const duration = waveSurfer.getDuration();\n          const clickedTime = progress * duration; // Get the time in seconds where the user clicked\n\n          const startTime = clickedTime; // Set slice start point at the clicked position\n          const endTime = startTime + 5; // Example: slice 5 seconds after the clicked position (adjust as needed)\n\n          sliceAudio(waveSurfer, startTime, endTime);\n        });\n\n        // Store the waveSurfer instance in the refs array\n        wavesurferRefs.current[index] = waveSurfer;\n      });\n\n      // Cleanup function to properly handle the destruction of WaveSurfer instances\n      return () => {\n        wavesurferRefs.current.forEach(waveSurfer => {\n          if (waveSurfer) {\n            waveSurfer.destroy();\n          }\n        });\n      };\n    } else {\n      console.log('No audio files available to display.');\n    }\n  }, [audioFiles]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: pagebackground,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"timeline\",\n      style: timelineStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: musicbackground,\n      children: audioFiles.map((file, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: waveformStyle,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: trackNameStyle,\n          children: file.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: `waveform-${index}`,\n          style: {\n            width: '100%',\n            height: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), audioFiles && audioFiles.length > 0 ? /*#__PURE__*/_jsxDEV(PlayButton, {\n      wavesurferRefs: wavesurferRefs // Pass the refs to control the tracks\n      ,\n      setSpeed: setSpeed // Pass the setSpeed function for speed control\n      ,\n      isReady: isReady // Pass the readiness state\n      ,\n      speed: speed // Pass the current speed value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No audio tracks available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n}\n_s(Landingpage, \"dK/LU+t3NJJfJRth0ItGrPDsyZM=\", false, function () {\n  return [useLocation];\n});\n_c = Landingpage;\nexport default Landingpage;\nvar _c;\n$RefreshReg$(_c, \"Landingpage\");","map":{"version":3,"names":["React","useEffect","useRef","useState","WaveSurfer","TimelinePlugin","useLocation","Sidebar","cloud","PlayButton","sliceAudio","deleteAudioSection","handleTrackClick","jsxDEV","_jsxDEV","Landingpage","_s","wavesurferRefs","location","audioFiles","state","isReady","setIsReady","speed","setSpeed","progress","setProgress","longestDuration","current","length","forEach","file","index","containerId","waveSurfer","create","container","waveColor","progressColor","height","autoCenter","interact","backend","cursorWidth","cursorColor","backgroundColor","minPxPerSec","load","url","on","duration","getDuration","firstWaveSurfer","addPlugin","timeInterval","Math","ceil","primaryLabelInterval","secondaryLabelInterval","formatTimeCallback","seconds","minutes","floor","remainingSeconds","style","color","fontSize","fontFamily","insertPosition","initPlugin","getCurrentTime","clickedTime","startTime","endTime","destroy","console","log","pagebackground","children","id","timelineStyle","fileName","_jsxFileName","lineNumber","columnNumber","musicbackground","map","waveformStyle","trackNameStyle","name","width","_c","$RefreshReg$"],"sources":["C:/Users/james/Downloads/Mellowdies/mellowdies/src/Landingpage/Landingpage.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport WaveSurfer from 'wavesurfer.js';\r\nimport TimelinePlugin from \"wavesurfer.js/dist/plugins/timeline\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport Sidebar from './Sidebar.js';\r\nimport cloud from '../images/backgrounds/cloud.png';\r\nimport './Landingpage.css';  \r\nimport PlayButton from './PlayButton.js';\r\nimport { sliceAudio, deleteAudioSection, handleTrackClick } from './Audiotrack.js'; // Import the new functions\r\n\r\n\r\n\r\nfunction Landingpage() {\r\n    const wavesurferRefs = useRef([]);  // Array to hold refs for each WaveSurfer instance\r\n    const location = useLocation();\r\n    const { audioFiles } = location.state || { audioFiles: [] };\r\n    const [isReady, setIsReady] = useState(false);\r\n    const [speed, setSpeed] = useState(1);\r\n    const [progress, setProgress] = useState(0);\r\n    let longestDuration = 0;  // Variable to keep track of the longest track duration\r\n\r\n    useEffect(() => {\r\n        // Initialize the wavesurferRefs array\r\n        wavesurferRefs.current = [];\r\n\r\n        if (audioFiles && audioFiles.length > 0) {\r\n            audioFiles.forEach((file, index) => {\r\n                const containerId = `waveform-${index}`;\r\n\r\n                const waveSurfer = WaveSurfer.create({\r\n                    container: `#${containerId}`,\r\n                    waveColor: 'blue',\r\n                    progressColor: '#00FFFF',\r\n                    height: 75,\r\n                    autoCenter: true,\r\n                    interact: true,\r\n                    backend: 'MediaElement',\r\n                    cursorWidth: 2,\r\n                    cursorColor: '#FF0000',\r\n                    backgroundColor: 'rgba(255, 255, 255, 0)',\r\n                    minPxPerSec: 100,\r\n                });\r\n\r\n                waveSurfer.load(file.url);\r\n\r\n                waveSurfer.on('ready', () => {\r\n                    setIsReady(true);\r\n                    const duration = waveSurfer.getDuration();\r\n                    if (duration > longestDuration) {\r\n                        longestDuration = duration;  // Update longest track duration\r\n                    }\r\n\r\n                    // After loading all the tracks, configure the timeline based on the longest track\r\n                    if (index === audioFiles.length - 1) {  // Last track loaded\r\n                        const firstWaveSurfer = wavesurferRefs.current[0];  // Use the first WaveSurfer instance\r\n                        \r\n                        // Timeline plugin configuration using TimelinePluginOptions\r\n                        firstWaveSurfer.addPlugin(TimelinePlugin.create({\r\n                            container: `#timeline`,  // Single timeline container at the top\r\n                            duration: longestDuration,  // Set timeline to the longest track's duration\r\n                            timeInterval: Math.ceil(longestDuration / 10),  // Interval between time markers\r\n                            primaryLabelInterval: Math.ceil(longestDuration / 5),  // Primary label interval\r\n                            secondaryLabelInterval: Math.ceil(longestDuration / 10),  // Secondary label interval\r\n                            formatTimeCallback: (seconds) => {\r\n                                const minutes = Math.floor(seconds / 60);\r\n                                const remainingSeconds = Math.floor(seconds % 60);\r\n                                return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\r\n                            },\r\n                            style: {\r\n                                color: '#000',\r\n                                fontSize: '12px',\r\n                                fontFamily: 'Arial',\r\n                            },\r\n                            height: 30,  // Timeline height\r\n                            insertPosition: 'beforeend',  // Timeline insert position\r\n                        })).initPlugin('timeline');\r\n                    }\r\n                });\r\n\r\n                waveSurfer.on('audioprocess', () => {\r\n                    setProgress(waveSurfer.getCurrentTime() / waveSurfer.getDuration() * 100);\r\n                });\r\n\r\n                waveSurfer.on('seek', (progress) => {\r\n                    const duration = waveSurfer.getDuration();\r\n                    const clickedTime = progress * duration;  // Get the time in seconds where the user clicked\r\n\r\n                    const startTime = clickedTime;  // Set slice start point at the clicked position\r\n                    const endTime = startTime + 5;  // Example: slice 5 seconds after the clicked position (adjust as needed)\r\n\r\n                    sliceAudio(waveSurfer, startTime, endTime);\r\n                });\r\n\r\n                // Store the waveSurfer instance in the refs array\r\n                wavesurferRefs.current[index] = waveSurfer;\r\n            });\r\n\r\n            // Cleanup function to properly handle the destruction of WaveSurfer instances\r\n            return () => {\r\n                wavesurferRefs.current.forEach(waveSurfer => {\r\n                    if (waveSurfer) {\r\n                        waveSurfer.destroy();\r\n                    }\r\n                });\r\n            };\r\n        } else {\r\n            console.log('No audio files available to display.');\r\n        }\r\n    }, [audioFiles]);\r\n\r\n    return (\r\n        <div style={pagebackground}>\r\n            {/* Add a single timeline container at the top */}\r\n            <div id=\"timeline\" style={timelineStyle}></div>\r\n\r\n            <div style={musicbackground}>\r\n                {audioFiles.map((file, index) => (\r\n                    <div key={index} style={waveformStyle}>\r\n                        <div style={trackNameStyle}>{file.name}</div>\r\n                        <div id={`waveform-${index}`} style={{ width: '100%', height: '100%' }}></div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            <Sidebar/>\r\n\r\n            {audioFiles && audioFiles.length > 0 ? (\r\n                <PlayButton\r\n                    wavesurferRefs={wavesurferRefs}  // Pass the refs to control the tracks\r\n                    setSpeed={setSpeed}               // Pass the setSpeed function for speed control\r\n                    isReady={isReady}                 // Pass the readiness state\r\n                    speed={speed}                     // Pass the current speed value\r\n                />\r\n            ) : (\r\n                <p>No audio tracks available.</p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Landingpage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}