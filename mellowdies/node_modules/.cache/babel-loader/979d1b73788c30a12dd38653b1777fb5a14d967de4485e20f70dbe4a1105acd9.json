{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elect\\\\Documents\\\\CIS\\\\4914\\\\Mellowdies\\\\mellowdies\\\\src\\\\Landingpage\\\\Landingpage.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport WaveSurfer from 'wavesurfer.js';\nimport RegionsPlugin from \"wavesurfer.js/dist/plugins/regions.js\";\nimport { useLocation } from 'react-router-dom';\nimport Sidebar from './Sidebar.js';\nimport cloud from '../images/cloud.png';\nimport PlayButton from './PlayButton.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst controller = new AbortController();\nconst signal = controller.signal;\nvar toWav = require('audiobuffer-to-wav');\nconst pagebackground = {\n  backgroundSize: 'cover',\n  backgroundImage: `url(${cloud})`,\n  backgroundPosition: 'center',\n  padding: '10px',\n  height: '100vh',\n  margin: 0,\n  display: 'flex',\n  flexDirection: 'column',\n  fontFamily: 'Concert One'\n};\nconst musicbackground = {\n  width: '75%',\n  height: '80%',\n  position: 'fixed',\n  top: '0',\n  right: '0',\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'flex-start',\n  alignItems: 'left',\n  backgroundColor: 'rgba(255, 255, 255, 0.3)',\n  marginTop: '5px',\n  boxShadow: '0px 0px 15px 5px rgba(255, 255, 255, 0.6)',\n  overflowY: 'auto',\n  padding: '10px'\n};\nconst trackNameStyle = {\n  position: 'relative',\n  color: '#000000',\n  fontSize: '0.8rem',\n  zIndex: '1002',\n  padding: '5px',\n  borderRadius: '5px',\n  backgroundColor: 'rgba(255, 255, 255, 0.7)'\n};\nconst waveformStyle = {\n  width: '100%',\n  height: '75px',\n  position: 'relative',\n  marginBottom: '20px'\n};\nfunction copy(region, instance) {\n  var segmentDuration = region.end - region.start;\n  var originalBuffer = instance.backend.buffer;\n  var emptySegment = instance.backend.ac.createBuffer(originalBuffer.numberOfChannels, segmentDuration * originalBuffer.sampleRate, originalBuffer.sampleRate);\n  for (var i = 0; i < originalBuffer.numberOfChannels; i++) {\n    var chanData = originalBuffer.getChannelData(i);\n    var emptySegmentData = emptySegment.getChannelData(i);\n    var mid_data = chanData.subarray(region.start * originalBuffer.sampleRate, region.end * originalBuffer.sampleRate);\n    emptySegmentData.set(mid_data);\n  }\n  return emptySegment;\n}\nfunction bufferToWave(abuffer, offset, len) {\n  var numOfChan = abuffer.numberOfChannels,\n    length = len * numOfChan * 2 + 44,\n    buffer = new ArrayBuffer(length),\n    view = new DataView(buffer),\n    channels = [],\n    i,\n    sample,\n    pos = 0;\n\n  // write WAVE header\n  setUint32(0x46464952); // \"RIFF\"\n  setUint32(length - 8); // file length - 8\n  setUint32(0x45564157); // \"WAVE\"\n\n  setUint32(0x20746d66); // \"fmt \" chunk\n  setUint32(16); // length = 16\n  setUint16(1); // PCM (uncompressed)\n  setUint16(numOfChan);\n  setUint32(abuffer.sampleRate);\n  setUint32(abuffer.sampleRate * 2 * numOfChan); // avg. bytes/sec\n  setUint16(numOfChan * 2); // block-align\n  setUint16(16); // 16-bit (hardcoded in this demo)\n\n  setUint32(0x61746164); // \"data\" - chunk\n  setUint32(length - pos - 4); // chunk length\n\n  // write interleaved data\n  for (i = 0; i < abuffer.numberOfChannels; i++) channels.push(abuffer.getChannelData(i));\n  while (pos < length) {\n    for (i = 0; i < numOfChan; i++) {\n      // interleave channels\n      sample = Math.max(-1, Math.min(1, channels[i][offset])); // clamp\n      sample = (0.5 + sample < 0 ? sample * 32768 : sample * 32767) | 0; // scale to 16-bit signed int\n      view.setInt16(pos, sample, true); // update data chunk\n      pos += 2;\n    }\n    offset++; // next source sample\n  }\n\n  // create Blob\n  return (URL || webkitURL).createObjectURL(new Blob([buffer], {\n    type: \"audio/wav\"\n  }));\n  function setUint16(data) {\n    view.setUint16(pos, data, true);\n    pos += 2;\n  }\n  function setUint32(data) {\n    view.setUint32(pos, data, true);\n    pos += 4;\n  }\n}\nfunction regionToSend(buffer, regions) {\n  if (regions.getRegions().length === 0) {\n    alert(\"Please create a section first.\");\n    return;\n  }\n  const currRegion = regions.getRegions().at(0); // Assuming one region at a time\n  const length = currRegion.end - currRegion.start;\n  console.log(currRegion.end);\n  console.log(currRegion.start);\n  if (length > 15) {\n    alert(\"Section is too long, please limit to 15 seconds or less.\");\n    return;\n  }\n  const wavFileURL = bufferToWave(buffer, currRegion.start, length);\n  console.log(wavFileURL);\n  return wavFileURL;\n}\n;\nfunction Landingpage() {\n  _s();\n  const wavesurferRefs = useRef([]);\n  const location = useLocation();\n  const {\n    audioFiles\n  } = location.state || {\n    audioFiles: []\n  };\n  const [isReady, setIsReady] = useState(false);\n  const [speed, setSpeed] = useState(1);\n  const [progress, setProgress] = useState(0);\n  const containerRefs = useRef([]);\n  const regions = RegionsPlugin.create();\n  var regionURL = \"\";\n  const initializeWaveSurfer = () => {\n    wavesurferRefs.current = [];\n    if (audioFiles && audioFiles.length > 0) {\n      audioFiles.forEach((file, index) => {\n        const container = containerRefs.current[index];\n        if (!container) {\n          console.error(`Container for index ${index} not found`);\n          return;\n        }\n        const waveSurfer = WaveSurfer.create({\n          container: container,\n          // Safely use the container\n          waveColor: 'blue',\n          progressColor: '#00FFFF',\n          height: 75,\n          backend: 'MediaElement',\n          plugins: [regions]\n        });\n        waveSurfer.load(file.url).catch(error => console.log(error));\n        waveSurfer.on('ready', () => {\n          setIsReady(true);\n          const buffer = waveSurfer.getDecodedData();\n          // console.log(buffer);\n\n          let channel0Peaks = buffer.getChannelData(0);\n          console.log('channel0Peaks : ', channel0Peaks);\n          let channel1Peaks = buffer.getChannelData(1);\n          console.log('channel1Peaks : ', channel1Peaks);\n          console.log('buffer length : ', buffer.length);\n          console.log('buffer duration : ', buffer.duration);\n          console.log('buffer sampleRate : ', buffer.sampleRate);\n          console.log('buffer numberOfChannels : ', buffer.numberOfChannels);\n        });\n        waveSurfer.on('audioprocess', () => {\n          setProgress(waveSurfer.getCurrentTime() / waveSurfer.getDuration() * 100);\n        });\n        waveSurfer.on('seek', progress => {\n          setProgress(progress * 100);\n        });\n        regions.on('region-created', region => {\n          regions.getRegions().forEach(r => {\n            if (r.id !== region.id) {\n              r.remove();\n            }\n          });\n        });\n        regions.on('region-clicked', (region, e) => {\n          e.stopPropagation();\n          const buffer = copy(region, waveSurfer);\n          var blob = new window.Blob([new DataView(toWav(buffer))], {\n            type: \"audio/wav\"\n          });\n          regionURL = window.URL.createObjectURL(blob);\n          console.log(regionURL);\n        });\n        regions.enableDragSelection({\n          color: 'rgba(245, 137, 5, 0.4)'\n        });\n        wavesurferRefs.current[index] = waveSurfer;\n      });\n    }\n  };\n  const scheduleWaveSurferInitialization = () => {\n    setTimeout(() => initializeWaveSurfer(), 100); // Small delay\n  };\n  if (audioFiles && audioFiles.length > 0 && wavesurferRefs.current.length === 0) {\n    scheduleWaveSurferInitialization();\n  }\n  const handlePlaybackRateChange = rate => {\n    setSpeed(rate);\n    wavesurferRefs.current.forEach(waveSurfer => waveSurfer.setPlaybackRate(rate));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: pagebackground,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: musicbackground,\n      children: audioFiles.map((file, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: waveformStyle,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: trackNameStyle,\n          children: file.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: el => containerRefs.current[index] = el,\n          style: {\n            width: '100%',\n            height: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Sidebar, {\n      regionURL: regionURL\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 13\n    }, this), audioFiles && audioFiles.length > 0 ? /*#__PURE__*/_jsxDEV(PlayButton, {\n      playAllTracks: () => wavesurferRefs.current.forEach(waveSurfer => waveSurfer.playPause()),\n      forwardAllTracks: () => {\n        wavesurferRefs.current.forEach(waveSurfer => {\n          const currentTime = waveSurfer.getCurrentTime();\n          const duration = waveSurfer.getDuration();\n          waveSurfer.seekTo((currentTime + 5) / duration);\n        });\n      },\n      backwardAllTracks: () => {\n        wavesurferRefs.current.forEach(waveSurfer => {\n          const currentTime = waveSurfer.getCurrentTime();\n          waveSurfer.seekTo(Math.max((currentTime - 5) / waveSurfer.getDuration(), 0));\n        });\n      },\n      seekAllTracks: seekTo => wavesurferRefs.current.forEach(waveSurfer => waveSurfer.seekTo(seekTo)),\n      changeSpeedAllTracks: handlePlaybackRateChange,\n      isReady: isReady,\n      speed: speed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No audio tracks available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 249,\n    columnNumber: 9\n  }, this);\n}\n_s(Landingpage, \"kA/gkhyJrp/KKR5rWILX+yPdPBM=\", false, function () {\n  return [useLocation];\n});\n_c = Landingpage;\nexport default Landingpage;\nvar _c;\n$RefreshReg$(_c, \"Landingpage\");","map":{"version":3,"names":["React","useRef","useState","WaveSurfer","RegionsPlugin","useLocation","Sidebar","cloud","PlayButton","jsxDEV","_jsxDEV","controller","AbortController","signal","toWav","require","pagebackground","backgroundSize","backgroundImage","backgroundPosition","padding","height","margin","display","flexDirection","fontFamily","musicbackground","width","position","top","right","justifyContent","alignItems","backgroundColor","marginTop","boxShadow","overflowY","trackNameStyle","color","fontSize","zIndex","borderRadius","waveformStyle","marginBottom","copy","region","instance","segmentDuration","end","start","originalBuffer","backend","buffer","emptySegment","ac","createBuffer","numberOfChannels","sampleRate","i","chanData","getChannelData","emptySegmentData","mid_data","subarray","set","bufferToWave","abuffer","offset","len","numOfChan","length","ArrayBuffer","view","DataView","channels","sample","pos","setUint32","setUint16","push","Math","max","min","setInt16","URL","webkitURL","createObjectURL","Blob","type","data","regionToSend","regions","getRegions","alert","currRegion","at","console","log","wavFileURL","Landingpage","_s","wavesurferRefs","location","audioFiles","state","isReady","setIsReady","speed","setSpeed","progress","setProgress","containerRefs","create","regionURL","initializeWaveSurfer","current","forEach","file","index","container","error","waveSurfer","waveColor","progressColor","plugins","load","url","catch","on","getDecodedData","channel0Peaks","channel1Peaks","duration","getCurrentTime","getDuration","r","id","remove","e","stopPropagation","blob","window","enableDragSelection","scheduleWaveSurferInitialization","setTimeout","handlePlaybackRateChange","rate","setPlaybackRate","style","children","map","name","fileName","_jsxFileName","lineNumber","columnNumber","ref","el","playAllTracks","playPause","forwardAllTracks","currentTime","seekTo","backwardAllTracks","seekAllTracks","changeSpeedAllTracks","_c","$RefreshReg$"],"sources":["C:/Users/elect/Documents/CIS/4914/Mellowdies/mellowdies/src/Landingpage/Landingpage.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport WaveSurfer from 'wavesurfer.js';\r\nimport RegionsPlugin from \"wavesurfer.js/dist/plugins/regions.js\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport Sidebar from './Sidebar.js';\r\nimport cloud from '../images/cloud.png';\r\nimport PlayButton from './PlayButton.js';\r\n\r\nconst controller = new AbortController();\r\nconst signal = controller.signal;\r\nvar toWav = require('audiobuffer-to-wav');\r\n\r\nconst pagebackground = {\r\n    backgroundSize: 'cover',\r\n    backgroundImage: `url(${cloud})`,\r\n    backgroundPosition: 'center',\r\n    padding: '10px',\r\n    height: '100vh',\r\n    margin: 0,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    fontFamily: 'Concert One',\r\n};\r\n\r\nconst musicbackground = {\r\n    width: '75%',\r\n    height: '80%',\r\n    position: 'fixed',\r\n    top: '0',\r\n    right: '0',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'flex-start',\r\n    alignItems: 'left',\r\n    backgroundColor: 'rgba(255, 255, 255, 0.3)',\r\n    marginTop: '5px',\r\n    boxShadow: '0px 0px 15px 5px rgba(255, 255, 255, 0.6)',\r\n    overflowY: 'auto',\r\n    padding: '10px',\r\n};\r\n\r\nconst trackNameStyle = {\r\n    position: 'relative',\r\n    color: '#000000',\r\n    fontSize: '0.8rem',\r\n    zIndex: '1002',\r\n    padding: '5px',\r\n    borderRadius: '5px',\r\n    backgroundColor: 'rgba(255, 255, 255, 0.7)',\r\n};\r\n\r\nconst waveformStyle = {\r\n    width: '100%',\r\n    height: '75px',\r\n    position: 'relative',\r\n    marginBottom: '20px',\r\n};\r\n\r\nfunction copy(region, instance){\r\n    var segmentDuration = region.end - region.start\r\n\r\n    var originalBuffer = instance.backend.buffer;\r\n    var emptySegment = instance.backend.ac.createBuffer(\r\n        originalBuffer.numberOfChannels,\r\n        segmentDuration * originalBuffer.sampleRate,\r\n        originalBuffer.sampleRate\r\n    );\r\n    for (var i = 0; i < originalBuffer.numberOfChannels; i++) {\r\n        var chanData = originalBuffer.getChannelData(i);\r\n        var emptySegmentData = emptySegment.getChannelData(i);\r\n        var mid_data = chanData.subarray( region.start * originalBuffer.sampleRate, region.end * originalBuffer.sampleRate);\r\n        emptySegmentData.set(mid_data);\r\n    }\r\n\r\n    return emptySegment\r\n}\r\n\r\n\r\nfunction bufferToWave(abuffer, offset, len) {\r\n\r\n    var numOfChan = abuffer.numberOfChannels,\r\n        length = len * numOfChan * 2 + 44,\r\n        buffer = new ArrayBuffer(length),\r\n        view = new DataView(buffer),\r\n        channels = [], i, sample,\r\n        pos = 0;\r\n        \r\n    // write WAVE header\r\n    setUint32(0x46464952);                         // \"RIFF\"\r\n    setUint32(length - 8);                         // file length - 8\r\n    setUint32(0x45564157);                         // \"WAVE\"\r\n    \r\n    setUint32(0x20746d66);                         // \"fmt \" chunk\r\n    setUint32(16);                                 // length = 16\r\n    setUint16(1);                                  // PCM (uncompressed)\r\n    setUint16(numOfChan);\r\n    setUint32(abuffer.sampleRate);\r\n    setUint32(abuffer.sampleRate * 2 * numOfChan); // avg. bytes/sec\r\n    setUint16(numOfChan * 2);                      // block-align\r\n    setUint16(16);                                 // 16-bit (hardcoded in this demo)\r\n    \r\n    setUint32(0x61746164);                         // \"data\" - chunk\r\n    setUint32(length - pos - 4);                   // chunk length\r\n    \r\n    // write interleaved data\r\n    for(i = 0; i < abuffer.numberOfChannels; i++)\r\n      channels.push(abuffer.getChannelData(i));\r\n    \r\n    while(pos < length) {\r\n      for(i = 0; i < numOfChan; i++) {             // interleave channels\r\n        sample = Math.max(-1, Math.min(1, channels[i][offset])); // clamp\r\n        sample = (0.5 + sample < 0 ? sample * 32768 : sample * 32767)|0; // scale to 16-bit signed int\r\n        view.setInt16(pos, sample, true);          // update data chunk\r\n        pos += 2;\r\n      }\r\n      offset++                                     // next source sample\r\n    }\r\n  \r\n    // create Blob\r\n    return (URL || webkitURL).createObjectURL(new Blob([buffer], {type: \"audio/wav\"}));\r\n    \r\n    function setUint16(data) {\r\n      view.setUint16(pos, data, true);\r\n      pos += 2;\r\n    }\r\n    \r\n    function setUint32(data) {\r\n      view.setUint32(pos, data, true);\r\n      pos += 4;\r\n    }\r\n  }\r\n  \r\nfunction regionToSend(buffer, regions) {\r\n    if (regions.getRegions().length === 0) {\r\n        alert(\"Please create a section first.\");\r\n        return;\r\n    }\r\n\r\n    const currRegion = regions.getRegions().at(0); // Assuming one region at a time\r\n    const length = currRegion.end - currRegion.start;\r\n    console.log(currRegion.end);\r\n    console.log(currRegion.start);\r\n    if (length > 15) {\r\n        alert(\"Section is too long, please limit to 15 seconds or less.\");\r\n        return;\r\n    }\r\n\r\n    const wavFileURL = bufferToWave(buffer, currRegion.start, length);\r\n    console.log(wavFileURL);\r\n    return wavFileURL;\r\n};\r\n  \r\n\r\nfunction Landingpage() {\r\n    const wavesurferRefs = useRef([]);\r\n    const location = useLocation();\r\n    const { audioFiles } = location.state || { audioFiles: [] };\r\n    const [isReady, setIsReady] = useState(false);\r\n    const [speed, setSpeed] = useState(1);\r\n    const [progress, setProgress] = useState(0);\r\n    const containerRefs = useRef([]);\r\n    const regions = RegionsPlugin.create();\r\n    var regionURL = \"\";\r\n\r\n    const initializeWaveSurfer = () => {\r\n        wavesurferRefs.current = [];\r\n    \r\n        if (audioFiles && audioFiles.length > 0) {\r\n            audioFiles.forEach((file, index) => {\r\n                const container = containerRefs.current[index];\r\n                if (!container) {\r\n                    console.error(`Container for index ${index} not found`);\r\n                    return;\r\n                }\r\n    \r\n                const waveSurfer = WaveSurfer.create({\r\n                    container: container, // Safely use the container\r\n                    waveColor: 'blue',\r\n                    progressColor: '#00FFFF',\r\n                    height: 75,\r\n                    backend: 'MediaElement',\r\n                    plugins: [regions],\r\n                });\r\n\r\n                waveSurfer.load(file.url).catch(error => console.log(error));\r\n    \r\n                waveSurfer.on('ready', () => {setIsReady(true);\r\n                    const buffer = waveSurfer.getDecodedData();\r\n                    // console.log(buffer);\r\n        \r\n                    let channel0Peaks = buffer.getChannelData(0);\r\n                    console.log('channel0Peaks : ', channel0Peaks);\r\n        \r\n                    let channel1Peaks = buffer.getChannelData(1);\r\n                    console.log('channel1Peaks : ', channel1Peaks);\r\n        \r\n                    console.log('buffer length : ', buffer.length);\r\n                    console.log('buffer duration : ', buffer.duration);\r\n                    console.log('buffer sampleRate : ', buffer.sampleRate);\r\n                    console.log('buffer numberOfChannels : ', buffer.numberOfChannels);});\r\n    \r\n                waveSurfer.on('audioprocess', () => {\r\n                    setProgress(waveSurfer.getCurrentTime() / waveSurfer.getDuration() * 100);\r\n                });\r\n    \r\n                waveSurfer.on('seek', (progress) => {\r\n                    setProgress(progress * 100);\r\n                });\r\n    \r\n                regions.on('region-created', (region) => {\r\n                    regions.getRegions().forEach((r) => {\r\n                        if (r.id !== region.id) {\r\n                            r.remove();\r\n                        }\r\n                    });\r\n                });\r\n    \r\n                regions.on('region-clicked', (region, e) => {\r\n                    e.stopPropagation();\r\n                    const buffer = copy(region,waveSurfer);\r\n                    var blob = new window.Blob([new DataView(toWav(buffer))], {type: \"audio/wav\"})\r\n                    regionURL = window.URL.createObjectURL(blob);\r\n                    console.log(regionURL);\r\n                });\r\n    \r\n                regions.enableDragSelection({\r\n                    color: 'rgba(245, 137, 5, 0.4)',\r\n                });\r\n    \r\n                wavesurferRefs.current[index] = waveSurfer;\r\n            });\r\n        }\r\n    };\r\n\r\n    const scheduleWaveSurferInitialization = () => {\r\n        setTimeout(() => initializeWaveSurfer(), 100); // Small delay\r\n    };\r\n\r\n    if (audioFiles && audioFiles.length > 0 && wavesurferRefs.current.length === 0) {\r\n        scheduleWaveSurferInitialization();\r\n    }\r\n\r\n    const handlePlaybackRateChange = (rate) => {\r\n        setSpeed(rate);\r\n        wavesurferRefs.current.forEach(waveSurfer => waveSurfer.setPlaybackRate(rate));\r\n    };\r\n\r\n    return (\r\n        <div style={pagebackground}>\r\n            <div style={musicbackground}>\r\n                {audioFiles.map((file, index) => (\r\n                    <div key={index} style={waveformStyle}>\r\n                        <div style={trackNameStyle}>{file.name}</div>\r\n                        <div ref={el => containerRefs.current[index] = el} style={{ width: '100%', height: '100%' }}></div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            <Sidebar regionURL = {regionURL}/>\r\n\r\n            {audioFiles && audioFiles.length > 0 ? (\r\n                <PlayButton\r\n                    playAllTracks={() => wavesurferRefs.current.forEach(waveSurfer => waveSurfer.playPause())}\r\n                    forwardAllTracks={() => {\r\n                        wavesurferRefs.current.forEach(waveSurfer => {\r\n                            const currentTime = waveSurfer.getCurrentTime();\r\n                            const duration = waveSurfer.getDuration();\r\n                            waveSurfer.seekTo((currentTime + 5) / duration);\r\n                        });\r\n                    }}\r\n                    backwardAllTracks={() => {\r\n                        wavesurferRefs.current.forEach(waveSurfer => {\r\n                            const currentTime = waveSurfer.getCurrentTime();\r\n                            waveSurfer.seekTo(Math.max((currentTime - 5) / waveSurfer.getDuration(), 0));\r\n                        });\r\n                    }}\r\n                    seekAllTracks={(seekTo) => wavesurferRefs.current.forEach(waveSurfer => waveSurfer.seekTo(seekTo))}\r\n                    changeSpeedAllTracks={handlePlaybackRateChange}\r\n                    isReady={isReady}\r\n                    speed={speed}\r\n                />\r\n            ) : (\r\n                <p>No audio tracks available.</p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Landingpage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}