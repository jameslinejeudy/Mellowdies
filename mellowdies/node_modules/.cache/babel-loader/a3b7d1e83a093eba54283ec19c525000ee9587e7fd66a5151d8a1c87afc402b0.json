{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\james\\\\Downloads\\\\Mellowdies\\\\mellowdies\\\\src\\\\Landingpage\\\\Landingpage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport WaveSurfer from 'wavesurfer.js';\nimport TimelinePlugin from \"wavesurfer.js/dist/plugins/timeline\";\nimport { useLocation } from 'react-router-dom';\nimport Sidebar from './Sidebar.js';\nimport './Landingpage.css';\nimport PlayButton from './PlayButton.js';\nimport { sliceAudio, deleteAudioSection, handleTrackClick } from './Audiotrack.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Landingpage() {\n  _s();\n  const wavesurferRefs = useRef([]); // Array to hold refs for each WaveSurfer instance\n  const location = useLocation();\n  const {\n    audioFiles\n  } = location.state || {\n    audioFiles: []\n  };\n  const [isReady, setIsReady] = useState(false);\n  const [speed, setSpeed] = useState(1);\n  const [progress, setProgress] = useState(0);\n  const [waveformWidths, setWaveformWidths] = useState([]); // Store the widths of waveforms\n\n  useEffect(() => {\n    // Initialize the wavesurferRefs array and waveform widths\n    wavesurferRefs.current = [];\n    let widths = [];\n    if (audioFiles && audioFiles.length > 0) {\n      audioFiles.forEach((file, index) => {\n        const containerId = `waveform-${index}`;\n        const waveSurfer = WaveSurfer.create({\n          container: `#${containerId}`,\n          waveColor: 'blue',\n          progressColor: '#00FFFF',\n          height: 75,\n          autoCenter: true,\n          interact: true,\n          backend: 'MediaElement',\n          cursorWidth: 2,\n          cursorColor: '#FF0000',\n          backgroundColor: 'rgba(255, 255, 255, 0)',\n          minPxPerSec: 100 // Adjust this for width control\n        });\n        waveSurfer.load(file.url);\n        waveSurfer.on('ready', () => {\n          setIsReady(true);\n          const duration = waveSurfer.getDuration();\n\n          // Calculate width based on duration\n          const width = duration * 100; // 100px per second as a base width calculation\n          widths.push(width);\n          setWaveformWidths([...widths]);\n\n          // Configure timeline only for the first track\n          if (index === 0) {\n            waveSurfer.addPlugin(TimelinePlugin.create({\n              container: `#timeline`,\n              duration: duration,\n              timeInterval: Math.ceil(duration / 10),\n              primaryLabelInterval: Math.ceil(duration / 5),\n              secondaryLabelInterval: Math.ceil(duration / 10),\n              formatTimeCallback: seconds => {\n                const minutes = Math.floor(seconds / 60);\n                const remainingSeconds = Math.floor(seconds % 60);\n                return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\n              },\n              style: {\n                color: '#000',\n                fontSize: '12px',\n                fontFamily: 'Arial'\n              },\n              height: 30,\n              insertPosition: 'beforeend'\n            })).initPlugin('timeline');\n          }\n        });\n        waveSurfer.on('audioprocess', () => {\n          setProgress(waveSurfer.getCurrentTime() / waveSurfer.getDuration() * 100);\n        });\n        waveSurfer.on('seek', progress => {\n          const duration = waveSurfer.getDuration();\n          const clickedTime = progress * duration;\n          const startTime = clickedTime;\n          const endTime = startTime + 5;\n          sliceAudio(waveSurfer, startTime, endTime);\n        });\n\n        // Store the waveSurfer instance in the refs array\n        wavesurferRefs.current[index] = waveSurfer;\n      });\n\n      // Cleanup function\n      return () => {\n        wavesurferRefs.current.forEach(waveSurfer => {\n          if (waveSurfer) {\n            waveSurfer.destroy();\n          }\n        });\n      };\n    } else {\n      console.log('No audio files available to display.');\n    }\n  }, [audioFiles]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pagebackground\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"timeline\",\n      className: \"timelineStyle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"musicbackground\",\n      children: audioFiles.map((file, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"waveformStyle\",\n        style: {\n          width: `${waveformWidths[index]}px`\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: `waveform-${index}`,\n          style: {\n            height: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), audioFiles && audioFiles.length > 0 ? /*#__PURE__*/_jsxDEV(PlayButton, {\n      wavesurferRefs: wavesurferRefs,\n      setSpeed: setSpeed,\n      isReady: isReady,\n      speed: speed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No audio tracks available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n}\n_s(Landingpage, \"zfkfcyK7MGoqAPn2G0WmfcY9WkY=\", false, function () {\n  return [useLocation];\n});\n_c = Landingpage;\nexport default Landingpage;\nvar _c;\n$RefreshReg$(_c, \"Landingpage\");","map":{"version":3,"names":["React","useEffect","useRef","useState","WaveSurfer","TimelinePlugin","useLocation","Sidebar","PlayButton","sliceAudio","deleteAudioSection","handleTrackClick","jsxDEV","_jsxDEV","Landingpage","_s","wavesurferRefs","location","audioFiles","state","isReady","setIsReady","speed","setSpeed","progress","setProgress","waveformWidths","setWaveformWidths","current","widths","length","forEach","file","index","containerId","waveSurfer","create","container","waveColor","progressColor","height","autoCenter","interact","backend","cursorWidth","cursorColor","backgroundColor","minPxPerSec","load","url","on","duration","getDuration","width","push","addPlugin","timeInterval","Math","ceil","primaryLabelInterval","secondaryLabelInterval","formatTimeCallback","seconds","minutes","floor","remainingSeconds","style","color","fontSize","fontFamily","insertPosition","initPlugin","getCurrentTime","clickedTime","startTime","endTime","destroy","console","log","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","$RefreshReg$"],"sources":["C:/Users/james/Downloads/Mellowdies/mellowdies/src/Landingpage/Landingpage.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport WaveSurfer from 'wavesurfer.js';\r\nimport TimelinePlugin from \"wavesurfer.js/dist/plugins/timeline\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport Sidebar from './Sidebar.js';\r\nimport './Landingpage.css';  \r\nimport PlayButton from './PlayButton.js';\r\nimport { sliceAudio, deleteAudioSection, handleTrackClick } from './Audiotrack.js'; \r\n\r\nfunction Landingpage() {\r\n    const wavesurferRefs = useRef([]);  // Array to hold refs for each WaveSurfer instance\r\n    const location = useLocation();\r\n    const { audioFiles } = location.state || { audioFiles: [] };\r\n    const [isReady, setIsReady] = useState(false);\r\n    const [speed, setSpeed] = useState(1);\r\n    const [progress, setProgress] = useState(0);\r\n    const [waveformWidths, setWaveformWidths] = useState([]);  // Store the widths of waveforms\r\n\r\n    useEffect(() => {\r\n        // Initialize the wavesurferRefs array and waveform widths\r\n        wavesurferRefs.current = [];\r\n        let widths = [];\r\n\r\n        if (audioFiles && audioFiles.length > 0) {\r\n            audioFiles.forEach((file, index) => {\r\n                const containerId = `waveform-${index}`;\r\n\r\n                const waveSurfer = WaveSurfer.create({\r\n                    container: `#${containerId}`,\r\n                    waveColor: 'blue',\r\n                    progressColor: '#00FFFF',\r\n                    height: 75,\r\n                    autoCenter: true,\r\n                    interact: true,\r\n                    backend: 'MediaElement',\r\n                    cursorWidth: 2,\r\n                    cursorColor: '#FF0000',\r\n                    backgroundColor: 'rgba(255, 255, 255, 0)',\r\n                    minPxPerSec: 100,  // Adjust this for width control\r\n                });\r\n\r\n                waveSurfer.load(file.url);\r\n\r\n                waveSurfer.on('ready', () => {\r\n                    setIsReady(true);\r\n                    const duration = waveSurfer.getDuration();\r\n\r\n                    // Calculate width based on duration\r\n                    const width = duration * 100;  // 100px per second as a base width calculation\r\n                    widths.push(width);\r\n                    setWaveformWidths([...widths]);\r\n\r\n                    // Configure timeline only for the first track\r\n                    if (index === 0) {\r\n                        waveSurfer.addPlugin(TimelinePlugin.create({\r\n                            container: `#timeline`,\r\n                            duration: duration,\r\n                            timeInterval: Math.ceil(duration / 10),\r\n                            primaryLabelInterval: Math.ceil(duration / 5),\r\n                            secondaryLabelInterval: Math.ceil(duration / 10),\r\n                            formatTimeCallback: (seconds) => {\r\n                                const minutes = Math.floor(seconds / 60);\r\n                                const remainingSeconds = Math.floor(seconds % 60);\r\n                                return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\r\n                            },\r\n                            style: {\r\n                                color: '#000',\r\n                                fontSize: '12px',\r\n                                fontFamily: 'Arial',\r\n                            },\r\n                            height: 30,\r\n                            insertPosition: 'beforeend',\r\n                        })).initPlugin('timeline');\r\n                    }\r\n                });\r\n\r\n                waveSurfer.on('audioprocess', () => {\r\n                    setProgress(waveSurfer.getCurrentTime() / waveSurfer.getDuration() * 100);\r\n                });\r\n\r\n                waveSurfer.on('seek', (progress) => {\r\n                    const duration = waveSurfer.getDuration();\r\n                    const clickedTime = progress * duration;\r\n\r\n                    const startTime = clickedTime;\r\n                    const endTime = startTime + 5;\r\n\r\n                    sliceAudio(waveSurfer, startTime, endTime);\r\n                });\r\n\r\n                // Store the waveSurfer instance in the refs array\r\n                wavesurferRefs.current[index] = waveSurfer;\r\n            });\r\n\r\n            // Cleanup function\r\n            return () => {\r\n                wavesurferRefs.current.forEach(waveSurfer => {\r\n                    if (waveSurfer) {\r\n                        waveSurfer.destroy();\r\n                    }\r\n                });\r\n            };\r\n        } else {\r\n            console.log('No audio files available to display.');\r\n        }\r\n    }, [audioFiles]);\r\n\r\n    return (\r\n        <div className=\"pagebackground\">\r\n            <div id=\"timeline\" className=\"timelineStyle\"></div>\r\n\r\n            <div className=\"musicbackground\">\r\n                {audioFiles.map((file, index) => (\r\n                    <div key={index} className=\"waveformStyle\" style={{ width: `${waveformWidths[index]}px` }}>\r\n                        <div id={`waveform-${index}`} style={{ height: '100%' }}></div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            <Sidebar/>\r\n\r\n            {audioFiles && audioFiles.length > 0 ? (\r\n                <PlayButton\r\n                    wavesurferRefs={wavesurferRefs}\r\n                    setSpeed={setSpeed}\r\n                    isReady={isReady}\r\n                    speed={speed}\r\n                />\r\n            ) : (\r\n                <p>No audio tracks available.</p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Landingpage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}