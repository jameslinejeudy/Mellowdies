{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Mellowdies\\\\mellowdies\\\\src\\\\Landingpage\\\\Menu.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Menu.css';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar utils = require(\"audio-buffer-utils\");\nvar blobber = require('audiobuffer-to-blob');\nvar slicer = require('audiobuffer-slice');\nlet sliceBuffer = null;\nlet buffers = [];\nlet copyBufs = [];\nfunction storeBuffer(buffer) {\n  buffers.push(buffer);\n}\nfunction getAudioSlice(buffer, start, end) {\n  slicer(buffer, start * 1000, end * 1000, function (error, slicedBuffer) {\n    if (error) {\n      console.error(error);\n      return;\n    } else {\n      sliceBuffer = slicedBuffer;\n    }\n  });\n  return sliceBuffer;\n}\nfunction Menu({\n  handleBack,\n  waveData\n}) {\n  _s();\n  const filters = waveData[0].filters;\n  const [isGainModalOpen, setGainModalOpen] = useState(false);\n  const [isDelayModalOpen, setDelayModalOpen] = useState(false);\n  const [isDistortionModalOpen, setDistortionModalOpen] = useState(false);\n  const [isReverbModalOpen, setReverbModalOpen] = useState(false);\n  const [isEquaModalOpen, setEquaModalOpen] = useState(false);\n  const [isEquaInit, setEquaInit] = useState(false);\n  const [gainValue, setGainValue] = useState(100);\n  const [delayTime, setDelayTime] = useState(0.00);\n  const [feedback, setFeedback] = useState(0.00);\n  const [wetness, setWetness] = useState(0.00);\n  const [dryness, setDryness] = useState(0.00);\n  const [gainDistortValue, setGainDistortValue] = useState(100);\n  const [reverbTime, setReverbTime] = useState(0.00);\n  const [decay, setDecay] = useState(0.00);\n  const [reverbWet, setReverbWet] = useState(0.00);\n  const [filter0Val, setFilter0] = useState(filters[0].gain.value);\n  const [filter1Val, setFilter1] = useState(filters[1].gain.value);\n  const [filter2Val, setFilter2] = useState(filters[2].gain.value);\n  const [filter3Val, setFilter3] = useState(filters[3].gain.value);\n  const [filter4Val, setFilter4] = useState(filters[4].gain.value);\n  const [filter5Val, setFilter5] = useState(filters[5].gain.value);\n  const [filter6Val, setFilter6] = useState(filters[6].gain.value);\n  const [filter7Val, setFilter7] = useState(filters[7].gain.value);\n  const [filter8Val, setFilter8] = useState(filters[8].gain.value);\n  const [filter9Val, setFilter9] = useState(filters[9].gain.value);\n  const [showAdvanced, setShowAdvanced] = useState(false);\n  const error = message => toast.error(message);\n  const success = message => toast.success(message);\n  const toggleAdvancedOptions = () => {\n    setShowAdvanced(prev => !prev);\n  };\n  if (isEquaInit === false) {\n    waveData[0].webAudioPlayer.gainNode.connect(filters[0]);\n    filters[0].connect(filters[1]);\n    filters[1].connect(filters[2]);\n    filters[2].connect(filters[3]);\n    filters[3].connect(filters[4]);\n    filters[4].connect(filters[5]);\n    filters[5].connect(filters[6]);\n    filters[6].connect(filters[7]);\n    filters[7].connect(filters[8]);\n    filters[8].connect(filters[9]);\n    filters[9].connect(waveData[0].webAudioPlayer.audioContext.destination);\n  }\n  const setFilter = () => {\n    filters[0].gain.value = filter0Val;\n    filters[1].gain.value = filter1Val;\n    filters[2].gain.value = filter2Val;\n    filters[3].gain.value = filter3Val;\n    filters[4].gain.value = filter4Val;\n    filters[5].gain.value = filter5Val;\n    filters[6].gain.value = filter6Val;\n    filters[7].gain.value = filter7Val;\n    filters[8].gain.value = filter8Val;\n    filters[9].gain.value = filter9Val;\n    success(\"EQ applied to current playback.\");\n  };\n  const undo = () => {\n    if (buffers.length > 1) {\n      let blob = blobber(buffers.pop());\n      waveData[0].waveSurfer.loadBlob(blob).catch(error => console.log(error));\n      success(\"Undid last action.\");\n    } else {\n      error(\"Nothing to undo.\");\n      return;\n    }\n  };\n  const reset = () => {\n    if (buffers.length >= 1) {\n      waveData[0].waveSurfer.loadBlob(blobber(buffers[0])).catch(error => console.log(error));\n      buffers = [];\n      success(\"All changes have been reset.\");\n    } else {\n      error(\"Nothing to reset.\");\n      return;\n    }\n  };\n  const reverse = () => {\n    console.log(buffers.length);\n    if (waveData[0].regions.getRegions().length != 1) {\n      error(\"Please select a region to apply the effect.\");\n      return;\n    }\n    let buffer = waveData[0].waveSurfer.getDecodedData();\n    let clone = utils.clone(buffer);\n    storeBuffer(clone);\n    let region = waveData[0].regions.getRegions()[0];\n    let sampleRate = buffer.sampleRate;\n    if (buffer) {\n      utils.reverse(buffer, buffer, region.start * sampleRate, region.end * sampleRate);\n      success(\"Reversed region.\");\n      let blob = blobber(buffer);\n      waveData[0].waveSurfer.loadBlob(blob).catch(error => console.log(error));\n    } else {\n      error('No audio buffer loaded');\n    }\n  };\n  const invert = () => {\n    if (waveData[0].regions.getRegions().length != 1) {\n      error(\"Please select a region to apply the effect.\");\n      return;\n    }\n    let buffer = waveData[0].waveSurfer.getDecodedData();\n    let clone = utils.clone(buffer);\n    storeBuffer(clone);\n    let region = waveData[0].regions.getRegions()[0];\n    let sampleRate = buffer.sampleRate;\n    if (buffer) {\n      utils.invert(buffer, buffer, region.start * sampleRate, region.end * sampleRate);\n      success(\"Inverted region.\");\n      let blob = blobber(buffer);\n      waveData[0].waveSurfer.loadBlob(blob).catch(error => console.log(error));\n    } else {\n      error('No audio buffer loaded');\n    }\n  };\n  const normalize = () => {\n    if (waveData[0].regions.getRegions().length != 1) {\n      error(\"Please select a region to apply the effect.\");\n      return;\n    }\n    let buffer = waveData[0].waveSurfer.getDecodedData();\n    let clone = utils.clone(buffer);\n    storeBuffer(clone);\n    let region = waveData[0].regions.getRegions()[0];\n    let sampleRate = buffer.sampleRate;\n    if (buffer) {\n      utils.normalize(buffer, buffer, region.start * sampleRate, region.end * sampleRate);\n      success(\"Normalized region.\");\n      let blob = blobber(buffer);\n      waveData[0].waveSurfer.loadBlob(blob).catch(error => console.log(error));\n    } else {\n      error('No audio buffer loaded');\n    }\n  };\n  const openGainModal = () => setGainModalOpen(true);\n  const closeGainModal = () => setGainModalOpen(false);\n  const adjustGain = () => {\n    if (waveData[0].regions.getRegions().length != 1) {\n      error(\"Please select a region to apply the effect.\");\n      return;\n    }\n    let buffer = waveData[0].waveSurfer.getDecodedData();\n    let clone = utils.clone(buffer);\n    storeBuffer(clone);\n    let region = waveData[0].regions.getRegions()[0];\n    let sampleRate = buffer.sampleRate;\n    let gain = gainValue / 100;\n    let start = Math.floor(region.start * sampleRate);\n    let end = Math.ceil(region.end * sampleRate);\n    if (buffer) {\n      for (let channel = 0; channel < buffer.numberOfChannels; channel += 1) {\n        let channelData = buffer.getChannelData(channel);\n        for (let sample = start; sample < end; sample += 1) {\n          channelData[sample] *= gain;\n        }\n      }\n      success('Adjusted gain on region:', gain);\n      let blob = blobber(buffer);\n      waveData[0].waveSurfer.loadBlob(blob).catch(error => console.log(error));\n    }\n  };\n  const fadeIn = () => {\n    if (waveData[0].regions.getRegions().length != 1) {\n      error(\"Please select a region to apply the effect.\");\n      return;\n    }\n    let buffer = waveData[0].waveSurfer.getDecodedData();\n    let clone = utils.clone(buffer);\n    storeBuffer(clone);\n    let region = waveData[0].regions.getRegions()[0];\n    let sampleRate = buffer.sampleRate;\n    let start = Math.floor(region.start * sampleRate);\n    let end = Math.ceil(region.end * sampleRate);\n    let stepInc = 1 / (end - start);\n    let currGain = 0;\n    let steps = 0;\n    if (buffer) {\n      for (let channel = 0; channel < buffer.numberOfChannels; channel += 1) {\n        let channelData = buffer.getChannelData(channel);\n        for (let sample = start; sample < end; sample += 1) {\n          channelData[sample] *= currGain + steps * stepInc;\n          steps += 1;\n        }\n        steps = 0;\n      }\n      success('Region faded in.');\n      let blob = blobber(buffer);\n      waveData[0].waveSurfer.loadBlob(blob).catch(error => console.log(error));\n    }\n  };\n  const fadeOut = () => {\n    if (waveData[0].regions.getRegions().length != 1) {\n      error(\"Please select a region to apply the effect.\");\n      return;\n    }\n    let buffer = waveData[0].waveSurfer.getDecodedData();\n    let clone = utils.clone(buffer);\n    storeBuffer(clone);\n    let region = waveData[0].regions.getRegions()[0];\n    let sampleRate = buffer.sampleRate;\n    let start = Math.floor(region.start * sampleRate);\n    let end = Math.ceil(region.end * sampleRate);\n    let stepInc = 1 / (end - start);\n    let currGain = 1;\n    let steps = 0;\n    if (buffer) {\n      for (let channel = 0; channel < buffer.numberOfChannels; channel += 1) {\n        let channelData = buffer.getChannelData(channel);\n        for (let sample = start; sample < end; sample += 1) {\n          channelData[sample] *= currGain - steps * stepInc;\n          steps += 1;\n        }\n        steps = 0;\n      }\n      success('Region faded out.');\n      let blob = blobber(buffer);\n      waveData[0].waveSurfer.loadBlob(blob).catch(error => console.log(error));\n    }\n  };\n  const openDistortionModal = () => setDistortionModalOpen(true);\n  const closeDistortionModal = () => setDistortionModalOpen(false);\n  const distort = () => {\n    if (waveData[0].regions.getRegions().length != 1) {\n      error(\"Please select a region to apply the effect.\");\n      return;\n    }\n    let buffer = waveData[0].waveSurfer.getDecodedData();\n    if (!buffer) return;\n    let clone = utils.clone(buffer);\n    storeBuffer(clone);\n    let region = waveData[0].regions.getRegions()[0];\n    let sampleRate = buffer.sampleRate;\n    const gain = gainDistortValue / 100;\n    const wet = 0.5;\n    const dry = 1 - wet;\n    let start = Math.floor(region.start * sampleRate);\n    let end = Math.ceil(region.end * sampleRate);\n    if (buffer) {\n      for (let channel = 0; channel < buffer.numberOfChannels; channel += 1) {\n        let channelData = buffer.getChannelData(channel);\n        for (let sample = start; sample < end; sample += 1) {\n          const drySample = channelData[sample];\n          const wetSample = Math.atan(gain * drySample);\n          channelData[sample] = dry * drySample + wet * wetSample;\n        }\n      }\n      success('Applied distortion to region.');\n      let blob = blobber(buffer);\n      waveData[0].waveSurfer.loadBlob(blob).catch(error => console.log(error));\n    }\n  };\n  const openDelayModal = () => setDelayModalOpen(true);\n  const closeDelayModal = () => setDelayModalOpen(false);\n  const delay = () => {\n    if (waveData[0].regions.getRegions().length != 1) {\n      error(\"Please select a region to apply the effect.\");\n      return;\n    }\n    let buffer = waveData[0].waveSurfer.getDecodedData();\n    if (!buffer) return;\n    let clone = utils.clone(buffer);\n    storeBuffer(clone);\n    let region = waveData[0].regions.getRegions()[0];\n    let sampleRate = buffer.sampleRate;\n    let start = Math.floor(region.start * sampleRate);\n    let end = Math.ceil(region.end * sampleRate);\n    let wet = wetness;\n    let dry = dryness;\n    let feeder = feedback;\n    let numChannels = buffer.numberOfChannels;\n    let delaySamples = Math.ceil(sampleRate * delayTime);\n    if (numChannels === 1) {\n      let channelData = buffer.getChannelData(0);\n      let delayBuffer = new Float32Array(delaySamples).fill(0);\n      for (let i = start; i < end; i++) {\n        let delayIndex = (i - start) % delaySamples;\n        let delayedSample = delayBuffer[delayIndex];\n        channelData[i] = channelData[i] * dry + delayedSample * wet;\n        delayBuffer[delayIndex] = feeder * delayedSample + channelData[i];\n      }\n    } else if (numChannels === 2) {\n      let channelLeft = buffer.getChannelData(0);\n      let channelRight = buffer.getChannelData(1);\n      let delayBufferLeft = new Float32Array(delaySamples).fill(0);\n      let delayBufferRight = new Float32Array(delaySamples).fill(0);\n      for (let i = start; i < end; i++) {\n        let delayIndex = (i - start) % delaySamples;\n        let delayedLeft = delayBufferLeft[delayIndex];\n        channelLeft[i] = channelLeft[i] * dry + delayedLeft * wet;\n        delayBufferLeft[delayIndex] = feeder * delayedLeft + channelLeft[i];\n        let delayedRight = delayBufferRight[delayIndex];\n        channelRight[i] = channelRight[i] * dry + delayedRight * wet;\n        delayBufferRight[delayIndex] = feeder * delayedRight + channelRight[i];\n      }\n    }\n    success(\"Applied delay to region.\");\n    let blob = blobber(buffer);\n    waveData[0].waveSurfer.loadBlob(blob).catch(error => console.error(error));\n  };\n  const openReverbModal = () => setReverbModalOpen(true);\n  const closeReverbModal = () => setReverbModalOpen(false);\n  const reverb = () => {\n    if (waveData[0].regions.getRegions().length != 1) {\n      error(\"Please select a region to apply the effect.\");\n      return;\n    }\n    let buffer = waveData[0].waveSurfer.getDecodedData();\n    if (!buffer) return;\n    let clone = utils.clone(buffer);\n    storeBuffer(clone);\n    let region = waveData[0].regions.getRegions()[0];\n    let sampleRate = buffer.sampleRate;\n    let start = Math.floor(region.start * sampleRate);\n    let end = Math.ceil(region.end * sampleRate);\n    let bufferSize = end - start;\n    let channelLeft = buffer.getChannelData(0);\n    let channelRight = buffer.getChannelData(1);\n    let samplesLeft = new Float32Array(channelLeft.subarray(start, end));\n    let samplesRight = new Float32Array(channelRight.subarray(start, end));\n    const combDelays = [0.0297, 0.0371, 0.0411, 0.0437].map(t => Math.floor(t * sampleRate));\n    const combGains = [0.773, 0.802, 0.753, 0.733];\n    const allPassDelays = [0.005, 0.0017].map(t => Math.floor(t * sampleRate));\n    const decayFactor = decay || 0.5;\n    const wetLevel = reverbWet || 0.5;\n    const processCombFilters = samples => {\n      const combBuffers = combDelays.map(delay => new Float32Array(delay).fill(0));\n      let output = new Float32Array(samples.length);\n      for (let i = 0; i < samples.length; i++) {\n        let wetSample = 0;\n        for (let c = 0; c < combBuffers.length; c++) {\n          const delay = combBuffers[c];\n          const delayIndex = i % delay.length;\n          const delayedSample = delay[delayIndex];\n          wetSample += delayedSample;\n          delay[delayIndex] = samples[i] + delayedSample * combGains[c] * decayFactor;\n        }\n        output[i] = wetSample;\n      }\n      return output;\n    };\n    let combOutputLeft = processCombFilters(samplesLeft);\n    let combOutputRight = processCombFilters(samplesRight);\n    const processAllPassFilters = samples => {\n      const allPassBuffers = allPassDelays.map(delay => new Float32Array(delay).fill(0));\n      for (let i = 0; i < samples.length; i++) {\n        for (let a = 0; a < allPassBuffers.length; a++) {\n          const delay = allPassBuffers[a];\n          const delayIndex = i % delay.length;\n          const delayedSample = delay[delayIndex];\n          const allPassSample = -0.7 * samples[i] + delayedSample + 0.7 * samples[i];\n          delay[delayIndex] = samples[i] + delayedSample * 0.7;\n          samples[i] = allPassSample;\n        }\n      }\n      return samples;\n    };\n    let allPassOutputLeft = processAllPassFilters(combOutputLeft);\n    let allPassOutputRight = processAllPassFilters(combOutputRight);\n    for (let i = 0; i < bufferSize; i++) {\n      channelLeft[start + i] = (1 - wetLevel) * samplesLeft[i] + wetLevel * allPassOutputLeft[i];\n      channelRight[start + i] = (1 - wetLevel) * samplesRight[i] + wetLevel * allPassOutputRight[i];\n    }\n    success('Applied reverb to region');\n    let blob = blobber(buffer);\n    waveData[0].waveSurfer.loadBlob(blob).catch(error => console.log(error));\n  };\n  const closeEquaModal = () => setEquaModalOpen(false);\n  const openEquaModal = () => {\n    setEquaInit(true);\n    setEquaModalOpen(true);\n  };\n  const cut = () => {\n    if (waveData[0].regions.getRegions().length === 1) {\n      let buffer = waveData[0].waveSurfer.getDecodedData();\n      let clone = utils.clone(buffer);\n      storeBuffer(clone);\n      let region = waveData[0].regions.getRegions()[0];\n      let slicedBuffer = getAudioSlice(buffer, region.start, region.end);\n      copyBufs[0] = slicedBuffer;\n      let newBuf1 = getAudioSlice(buffer, 0, region.start);\n      let newBuf2 = getAudioSlice(buffer, region.end, buffer.duration);\n      let newBuf = utils.concat(newBuf1, newBuf2);\n      let blob = blobber(newBuf);\n      waveData[0].waveSurfer.loadBlob(blob).catch(error => console.log(error));\n      success(\"Region has been cut.\");\n      return;\n    } else {\n      error(\"Please select a region to cut.\");\n      return;\n    }\n  };\n  const copy = () => {\n    if (waveData[0].regions.getRegions().length === 1) {\n      let buffer = waveData[0].waveSurfer.getDecodedData();\n      let clone = utils.clone(buffer);\n      storeBuffer(clone);\n      let region = waveData[0].regions.getRegions()[0];\n      let slicedBuffer = getAudioSlice(buffer, region.start, region.end);\n      copyBufs[0] = slicedBuffer;\n      success(\"Region has been copied.\");\n      return;\n    } else {\n      error(\"Please select a region to copy.\");\n      return;\n    }\n  };\n  const paste = () => {\n    if (copyBufs.length >= 1) {\n      let buffer = waveData[0].waveSurfer.getDecodedData();\n      let clone = utils.clone(buffer);\n      storeBuffer(clone);\n      if (waveData[0].regions.getRegions().length === 1) {\n        let region = waveData[0].regions.getRegions()[0];\n        let newBuf1 = getAudioSlice(buffer, 0, region.start);\n        let newBuf2 = getAudioSlice(buffer, region.end, buffer.duration);\n        let newBuf = utils.concat(newBuf1, copyBufs[0], newBuf2);\n        let blob = blobber(newBuf);\n        waveData[0].waveSurfer.loadBlob(blob).catch(error => console.log(error));\n        success(\"Region has been pasted.\");\n      } else {\n        let currTime = waveData[0].waveSurfer.getCurrentTime();\n        let newBuf1 = getAudioSlice(buffer, 0, currTime);\n        let newBuf2 = getAudioSlice(buffer, currTime, buffer.duration);\n        let newBuf = utils.concat(newBuf1, copyBufs[0], newBuf2);\n        let blob = blobber(newBuf);\n        waveData[0].waveSurfer.loadBlob(blob).catch(error => console.log(error));\n        success(\"Region has been pasted.\");\n      }\n    } else {\n      error(\"Nothing to paste.\");\n      return;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"menubackground\",\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {\n      position: \"bottom-right\",\n      autoClose: 2000\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contentStyle\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttonContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"navigationButtonStyle\",\n          onClick: handleBack,\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"simpleButtonStyle\",\n          onClick: reverse,\n          children: \"Reverse Selected Region\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"simpleButtonStyle\",\n          onClick: fadeIn,\n          children: \"Fade In Region\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"simpleButtonStyle\",\n          onClick: fadeOut,\n          children: \"Fade Out Region\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bufferButtonStyle\",\n          onClick: cut,\n          children: \"Cut Region\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bufferButtonStyle\",\n          onClick: copy,\n          children: \"Copy Region\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bufferButtonStyle\",\n          onClick: paste,\n          children: \"Paste Region\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"resetButtonStyle\",\n          onClick: undo,\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"resetButtonStyle\",\n          onClick: reset,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"navigationButtonStyle\",\n          onClick: toggleAdvancedOptions,\n          children: showAdvanced ? 'Hide Advanced' : 'Show Advanced'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 11\n        }, this), showAdvanced && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"advancedOptions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"modalButtonStyle\",\n            onClick: normalize,\n            children: \"Normalize\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"modalButtonStyle\",\n            onClick: invert,\n            children: \"Invert Selected Region\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"modalButtonStyle\",\n            onClick: openGainModal,\n            children: \"Adjust Gain\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 567,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"modalButtonStyle\",\n            onClick: openDelayModal,\n            children: \"Adjust Delay\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"modalButtonStyle\",\n            onClick: openDistortionModal,\n            children: \"Apply Distortion\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"modalButtonStyle\",\n            onClick: openReverbModal,\n            children: \"Apply Reverb\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"modalButtonStyle\",\n            onClick: openEquaModal,\n            children: \"10-Band Equalizer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 13\n        }, this), isGainModalOpen && /*#__PURE__*/_jsxDEV(Modal, {\n          title: \"Gain Percentage\",\n          close: closeGainModal,\n          onApply: adjustGain,\n          children: /*#__PURE__*/_jsxDEV(Slider, {\n            id: \"gains\",\n            min: 0,\n            max: 200,\n            step: 0.01,\n            value: gainValue,\n            onChange: setGainValue,\n            label: `${gainValue}%`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 582,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 13\n        }, this), isDelayModalOpen && /*#__PURE__*/_jsxDEV(Modal, {\n          title: \"Delay Settings\",\n          close: closeDelayModal,\n          onApply: delay,\n          children: [/*#__PURE__*/_jsxDEV(Slider, {\n            id: \"delayT\",\n            min: 0,\n            max: 6,\n            step: 0.01,\n            value: delayTime,\n            onChange: setDelayTime,\n            label: `${delayTime}s`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 601,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Slider, {\n            id: \"feedback\",\n            min: 0,\n            max: 1,\n            step: 0.01,\n            value: feedback,\n            onChange: setFeedback,\n            label: `Feedback: ${feedback}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 602,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Slider, {\n            id: \"wets\",\n            min: 0,\n            max: 1,\n            step: 0.01,\n            value: wetness,\n            onChange: setWetness,\n            label: `Wet: ${wetness}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 603,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Slider, {\n            id: \"dryer\",\n            min: 0,\n            max: 1,\n            step: 0.01,\n            value: dryness,\n            onChange: setDryness,\n            label: `Dry: ${dryness}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 604,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 13\n        }, this), isDistortionModalOpen && /*#__PURE__*/_jsxDEV(Modal, {\n          title: \"Apply Distortion\",\n          close: closeDistortionModal,\n          onApply: distort,\n          children: /*#__PURE__*/_jsxDEV(Slider, {\n            id: \"distortGain\",\n            min: 0,\n            max: 200,\n            step: 0.01,\n            value: gainDistortValue,\n            onChange: setGainDistortValue,\n            label: `${gainDistortValue}%`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 615,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 13\n        }, this), isReverbModalOpen && /*#__PURE__*/_jsxDEV(Modal, {\n          title: \"Reverb Settings\",\n          close: closeReverbModal,\n          onApply: reverb,\n          children: [/*#__PURE__*/_jsxDEV(Slider, {\n            id: \"reverbT\",\n            min: 0,\n            max: 1,\n            step: 0.01,\n            value: reverbTime,\n            onChange: setReverbTime,\n            label: `Time: ${reverbTime}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 634,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Slider, {\n            id: \"decay\",\n            min: 0,\n            max: 1,\n            step: 0.01,\n            value: decay,\n            onChange: setDecay,\n            label: `Decay: ${decay}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 635,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Slider, {\n            id: \"wetR\",\n            min: 0,\n            max: 1,\n            step: 0.01,\n            value: reverbWet,\n            onChange: setReverbWet,\n            label: `Wet: ${reverbWet}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 636,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 13\n        }, this), isEquaModalOpen && /*#__PURE__*/_jsxDEV(Modal, {\n          title: \"10-Band Equalizer\",\n          close: closeEquaModal,\n          onApply: setFilter,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"equalizerSliders\",\n            children: equalizerFrequencies.map((freq, index) => /*#__PURE__*/_jsxDEV(Slider, {\n              id: `filter${index}`,\n              min: -40,\n              max: 40,\n              step: 0.1,\n              value: filterValues[index],\n              onChange: value => updateFilterValue(index, value),\n              label: `${freq} Hz: ${filterValues[index]} dB`,\n              vertical: true\n            }, freq, false, {\n              fileName: _jsxFileName,\n              lineNumber: 649,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 647,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 642,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 536,\n    columnNumber: 5\n  }, this);\n}\n_s(Menu, \"PserJ18w0MdLzsh5j4f0UzPqt1g=\");\n_c = Menu;\n;\nexport default Menu;\nvar _c;\n$RefreshReg$(_c, \"Menu\");","map":{"version":3,"names":["React","useState","toast","ToastContainer","jsxDEV","_jsxDEV","utils","require","blobber","slicer","sliceBuffer","buffers","copyBufs","storeBuffer","buffer","push","getAudioSlice","start","end","error","slicedBuffer","console","Menu","handleBack","waveData","_s","filters","isGainModalOpen","setGainModalOpen","isDelayModalOpen","setDelayModalOpen","isDistortionModalOpen","setDistortionModalOpen","isReverbModalOpen","setReverbModalOpen","isEquaModalOpen","setEquaModalOpen","isEquaInit","setEquaInit","gainValue","setGainValue","delayTime","setDelayTime","feedback","setFeedback","wetness","setWetness","dryness","setDryness","gainDistortValue","setGainDistortValue","reverbTime","setReverbTime","decay","setDecay","reverbWet","setReverbWet","filter0Val","setFilter0","gain","value","filter1Val","setFilter1","filter2Val","setFilter2","filter3Val","setFilter3","filter4Val","setFilter4","filter5Val","setFilter5","filter6Val","setFilter6","filter7Val","setFilter7","filter8Val","setFilter8","filter9Val","setFilter9","showAdvanced","setShowAdvanced","message","success","toggleAdvancedOptions","prev","webAudioPlayer","gainNode","connect","audioContext","destination","setFilter","undo","length","blob","pop","waveSurfer","loadBlob","catch","log","reset","reverse","regions","getRegions","getDecodedData","clone","region","sampleRate","invert","normalize","openGainModal","closeGainModal","adjustGain","Math","floor","ceil","channel","numberOfChannels","channelData","getChannelData","sample","fadeIn","stepInc","currGain","steps","fadeOut","openDistortionModal","closeDistortionModal","distort","wet","dry","drySample","wetSample","atan","openDelayModal","closeDelayModal","delay","feeder","numChannels","delaySamples","delayBuffer","Float32Array","fill","i","delayIndex","delayedSample","channelLeft","channelRight","delayBufferLeft","delayBufferRight","delayedLeft","delayedRight","openReverbModal","closeReverbModal","reverb","bufferSize","samplesLeft","subarray","samplesRight","combDelays","map","t","combGains","allPassDelays","decayFactor","wetLevel","processCombFilters","samples","combBuffers","output","c","combOutputLeft","combOutputRight","processAllPassFilters","allPassBuffers","a","allPassSample","allPassOutputLeft","allPassOutputRight","closeEquaModal","openEquaModal","cut","newBuf1","newBuf2","duration","newBuf","concat","copy","paste","currTime","getCurrentTime","className","children","position","autoClose","fileName","_jsxFileName","lineNumber","columnNumber","onClick","Modal","title","close","onApply","Slider","id","min","max","step","onChange","label","equalizerFrequencies","freq","index","filterValues","updateFilterValue","vertical","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/Mellowdies/mellowdies/src/Landingpage/Menu.js"],"sourcesContent":["import React, {useState}  from 'react';\r\nimport './Menu.css';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nvar utils = require(\"audio-buffer-utils\");\r\nvar blobber = require('audiobuffer-to-blob');\r\nvar slicer = require('audiobuffer-slice');\r\nlet sliceBuffer = null;\r\n\r\nlet buffers = [];\r\nlet copyBufs = [];\r\n\r\nfunction storeBuffer (buffer) {\r\n  buffers.push(buffer);\r\n}\r\n\r\nfunction getAudioSlice(buffer, start, end) {\r\n  slicer(buffer, start * 1000, end * 1000, function(error, slicedBuffer) {\r\n      if (error) {\r\n          console.error(error);\r\n          return;\r\n      } else {\r\n          sliceBuffer = slicedBuffer;\r\n      }\r\n  })\r\n  return sliceBuffer;\r\n}\r\n\r\nfunction Menu({ handleBack, waveData}) {\r\n  const filters = waveData[0].filters;\r\n  const [isGainModalOpen, setGainModalOpen] = useState(false);\r\n  const [isDelayModalOpen, setDelayModalOpen] = useState(false);\r\n  const [isDistortionModalOpen, setDistortionModalOpen] = useState(false);\r\n  const [isReverbModalOpen, setReverbModalOpen] = useState(false);\r\n  const [isEquaModalOpen, setEquaModalOpen] = useState(false);\r\n  const [isEquaInit, setEquaInit] = useState(false);\r\n  const [gainValue, setGainValue] = useState(100);\r\n  const [delayTime, setDelayTime] = useState(0.00);\r\n  const [feedback, setFeedback] = useState(0.00);\r\n  const [wetness, setWetness] = useState(0.00);\r\n  const [dryness, setDryness] = useState(0.00);\r\n  const [gainDistortValue, setGainDistortValue] = useState(100);\r\n  const [reverbTime, setReverbTime] = useState(0.00);\r\n  const [decay, setDecay] = useState(0.00);\r\n  const [reverbWet, setReverbWet] = useState(0.00);\r\n  const [filter0Val, setFilter0] = useState(filters[0].gain.value);\r\n  const [filter1Val, setFilter1] = useState(filters[1].gain.value);\r\n  const [filter2Val, setFilter2] = useState(filters[2].gain.value);\r\n  const [filter3Val, setFilter3] = useState(filters[3].gain.value);\r\n  const [filter4Val, setFilter4] = useState(filters[4].gain.value);\r\n  const [filter5Val, setFilter5] = useState(filters[5].gain.value);\r\n  const [filter6Val, setFilter6] = useState(filters[6].gain.value);\r\n  const [filter7Val, setFilter7] = useState(filters[7].gain.value);\r\n  const [filter8Val, setFilter8] = useState(filters[8].gain.value);\r\n  const [filter9Val, setFilter9] = useState(filters[9].gain.value);\r\n  const [showAdvanced, setShowAdvanced] = useState(false);\r\n\r\n  const error = (message) => toast.error(message);\r\n\r\n  const success = (message) => toast.success(message);\r\n  \r\n  const toggleAdvancedOptions = () => {\r\n    setShowAdvanced((prev) => !prev);\r\n  };\r\n\r\n  if (isEquaInit === false) {\r\n    waveData[0].webAudioPlayer.gainNode.connect(filters[0])\r\n    filters[0].connect(filters[1]);\r\n    filters[1].connect(filters[2]);\r\n    filters[2].connect(filters[3]);\r\n    filters[3].connect(filters[4]);\r\n    filters[4].connect(filters[5]);\r\n    filters[5].connect(filters[6]);\r\n    filters[6].connect(filters[7]);\r\n    filters[7].connect(filters[8]);\r\n    filters[8].connect(filters[9]);\r\n    filters[9].connect(waveData[0].webAudioPlayer.audioContext.destination);\r\n  }\r\n  \r\n  const setFilter = () => {\r\n      filters[0].gain.value = filter0Val;\r\n      filters[1].gain.value = filter1Val;\r\n      filters[2].gain.value = filter2Val;\r\n      filters[3].gain.value = filter3Val;\r\n      filters[4].gain.value = filter4Val;\r\n      filters[5].gain.value = filter5Val;\r\n      filters[6].gain.value = filter6Val;\r\n      filters[7].gain.value = filter7Val;\r\n      filters[8].gain.value = filter8Val;\r\n      filters[9].gain.value = filter9Val;\r\n      success(\"EQ applied to current playback.\");\r\n  }\r\n  \r\n  const undo = () => {\r\n    if (buffers.length > 1) {\r\n      let blob = blobber(buffers.pop());\r\n      waveData[0].waveSurfer.loadBlob(blob).catch(error => console.log(error));\r\n      success(\"Undid last action.\");\r\n    } else {\r\n      error(\"Nothing to undo.\");\r\n      return;\r\n    }\r\n  }\r\n\r\n  const reset = () => {\r\n    if (buffers.length >= 1) {\r\n      waveData[0].waveSurfer.loadBlob(blobber(buffers[0])).catch(error => console.log(error));\r\n      buffers = [];\r\n      success(\"All changes have been reset.\");\r\n    } else {\r\n      error(\"Nothing to reset.\");\r\n      return;\r\n    }\r\n  }\r\n\r\n  const reverse = () => {\r\n    console.log(buffers.length);\r\n    if (waveData[0].regions.getRegions().length != 1) {\r\n      error(\"Please select a region to apply the effect.\");\r\n      return;\r\n    }\r\n\r\n    let buffer = waveData[0].waveSurfer.getDecodedData();\r\n    let clone = utils.clone(buffer);\r\n    storeBuffer(clone);\r\n    let region = (waveData[0].regions.getRegions())[0];\r\n    let sampleRate = buffer.sampleRate;\r\n    if (buffer) {\r\n      utils.reverse(buffer, buffer, region.start * sampleRate, region.end * sampleRate);\r\n      success(\"Reversed region.\");\r\n      let blob = blobber(buffer);\r\n      waveData[0].waveSurfer.loadBlob(blob).catch(error => console.log(error));\r\n    } else {\r\n      error('No audio buffer loaded');\r\n    }\r\n  };\r\n\r\n  const invert = () => {\r\n    if (waveData[0].regions.getRegions().length != 1) {\r\n      error(\"Please select a region to apply the effect.\");\r\n      return;\r\n    }\r\n\r\n    let buffer = waveData[0].waveSurfer.getDecodedData();\r\n    let clone = utils.clone(buffer);\r\n    storeBuffer(clone);\r\n    let region = (waveData[0].regions.getRegions())[0];\r\n    let sampleRate = buffer.sampleRate;\r\n    if (buffer) {\r\n      utils.invert(buffer, buffer, region.start * sampleRate, region.end * sampleRate);\r\n      success(\"Inverted region.\");\r\n      let blob = blobber(buffer);\r\n      waveData[0].waveSurfer.loadBlob(blob).catch(error => console.log(error));\r\n    } else {\r\n      error('No audio buffer loaded');\r\n    }\r\n  };\r\n\r\n  const normalize = () => {\r\n    if (waveData[0].regions.getRegions().length != 1) {\r\n      error(\"Please select a region to apply the effect.\");\r\n      return;\r\n    }\r\n\r\n    let buffer = waveData[0].waveSurfer.getDecodedData();\r\n    let clone = utils.clone(buffer);\r\n    storeBuffer(clone);\r\n    let region = (waveData[0].regions.getRegions())[0];\r\n    let sampleRate = buffer.sampleRate;\r\n    if (buffer) {\r\n      utils.normalize(buffer, buffer, region.start * sampleRate, region.end * sampleRate);\r\n      success(\"Normalized region.\");\r\n      let blob = blobber(buffer);\r\n      waveData[0].waveSurfer.loadBlob(blob).catch(error => console.log(error));\r\n    } else {\r\n      error('No audio buffer loaded');\r\n    }\r\n  };\r\n\r\n  const openGainModal = () => setGainModalOpen(true);\r\n  const closeGainModal = () => setGainModalOpen(false);\r\n\r\n  const adjustGain = () => {\r\n    if (waveData[0].regions.getRegions().length != 1) {\r\n      error(\"Please select a region to apply the effect.\");\r\n      return;\r\n    }\r\n\r\n    let buffer = waveData[0].waveSurfer.getDecodedData();\r\n    let clone = utils.clone(buffer);\r\n    storeBuffer(clone);\r\n    let region = (waveData[0].regions.getRegions())[0];\r\n    let sampleRate = buffer.sampleRate;\r\n    let gain = gainValue / 100;\r\n    let start = Math.floor(region.start * sampleRate);\r\n    let end = Math.ceil(region.end * sampleRate);\r\n\r\n    if (buffer) {\r\n      for (let channel = 0; channel < buffer.numberOfChannels; channel += 1) {\r\n        let channelData = buffer.getChannelData(channel);\r\n    \r\n        for (let sample = start; sample < end; sample += 1) {\r\n            channelData[sample] *= gain;\r\n        }\r\n      }\r\n      success('Adjusted gain on region:', gain);\r\n      let blob = blobber(buffer);\r\n      waveData[0].waveSurfer.loadBlob(blob).catch(error => console.log(error));\r\n    }\r\n  };\r\n\r\n  const fadeIn = () => {\r\n    if (waveData[0].regions.getRegions().length != 1) {\r\n      error(\"Please select a region to apply the effect.\");\r\n      return;\r\n    }\r\n\r\n    let buffer = waveData[0].waveSurfer.getDecodedData();\r\n    let clone = utils.clone(buffer);\r\n    storeBuffer(clone);\r\n    let region = (waveData[0].regions.getRegions())[0];\r\n    let sampleRate = buffer.sampleRate;\r\n    let start = Math.floor(region.start * sampleRate);\r\n    let end = Math.ceil(region.end * sampleRate);\r\n    let stepInc = 1 / (end-start);\r\n    let currGain = 0;\r\n    let steps = 0;\r\n\r\n    if (buffer) {\r\n      for (let channel = 0; channel < buffer.numberOfChannels; channel += 1) {\r\n        let channelData = buffer.getChannelData(channel);\r\n    \r\n        for (let sample = start; sample < end; sample += 1) {\r\n            channelData[sample] *= (currGain + (steps * stepInc));\r\n            steps += 1;\r\n        }\r\n        steps = 0;\r\n      }\r\n      success('Region faded in.');\r\n      let blob = blobber(buffer);\r\n      waveData[0].waveSurfer.loadBlob(blob).catch(error => console.log(error));\r\n    }\r\n  };\r\n\r\n  const fadeOut = () => {\r\n    if (waveData[0].regions.getRegions().length != 1) {\r\n      error(\"Please select a region to apply the effect.\");\r\n      return;\r\n    }\r\n\r\n    let buffer = waveData[0].waveSurfer.getDecodedData();\r\n    let clone = utils.clone(buffer);\r\n    storeBuffer(clone);\r\n    let region = (waveData[0].regions.getRegions())[0];\r\n    let sampleRate = buffer.sampleRate;\r\n    let start = Math.floor(region.start * sampleRate);\r\n    let end = Math.ceil(region.end * sampleRate);\r\n    let stepInc = 1 / (end-start);\r\n    let currGain = 1;\r\n    let steps = 0;\r\n\r\n    if (buffer) {\r\n      for (let channel = 0; channel < buffer.numberOfChannels; channel += 1) {\r\n        let channelData = buffer.getChannelData(channel);\r\n    \r\n        for (let sample = start; sample < end; sample += 1) {\r\n            channelData[sample] *= (currGain - (steps * stepInc));\r\n            steps += 1;\r\n        }\r\n        steps = 0;\r\n      }\r\n      success('Region faded out.');\r\n      let blob = blobber(buffer);\r\n      waveData[0].waveSurfer.loadBlob(blob).catch(error => console.log(error));\r\n    }\r\n  };\r\n\r\n  const openDistortionModal = () => setDistortionModalOpen(true);\r\n  const closeDistortionModal = () => setDistortionModalOpen(false);\r\n\r\n  const distort = () => {\r\n    if (waveData[0].regions.getRegions().length != 1) {\r\n      error(\"Please select a region to apply the effect.\");\r\n      return;\r\n    }\r\n\r\n    let buffer = waveData[0].waveSurfer.getDecodedData();\r\n    if (!buffer) return;\r\n\r\n    let clone = utils.clone(buffer);\r\n    storeBuffer(clone);\r\n\r\n    let region = waveData[0].regions.getRegions()[0];\r\n    let sampleRate = buffer.sampleRate;\r\n\r\n    const gain = gainDistortValue / 100; \r\n    const wet = 0.5;\r\n    const dry = 1 - wet; \r\n\r\n    let start = Math.floor(region.start * sampleRate);\r\n    let end = Math.ceil(region.end * sampleRate);\r\n\r\n    if (buffer) {\r\n        for (let channel = 0; channel < buffer.numberOfChannels; channel += 1) {\r\n            let channelData = buffer.getChannelData(channel);\r\n\r\n            for (let sample = start; sample < end; sample += 1) {\r\n                const drySample = channelData[sample];\r\n                const wetSample = Math.atan(gain * drySample);\r\n                channelData[sample] = (dry * drySample) + (wet * wetSample);\r\n            }\r\n        }\r\n\r\n        success('Applied distortion to region.');\r\n        let blob = blobber(buffer);\r\n        waveData[0].waveSurfer.loadBlob(blob).catch(error => console.log(error));\r\n    }\r\n};\r\n\r\n\r\n  const openDelayModal = () => setDelayModalOpen(true);\r\n  const closeDelayModal = () => setDelayModalOpen(false);\r\n\r\n  const delay = () => {\r\n    if (waveData[0].regions.getRegions().length != 1) {\r\n      error(\"Please select a region to apply the effect.\");\r\n      return;\r\n    }\r\n\r\n    let buffer = waveData[0].waveSurfer.getDecodedData();\r\n    if (!buffer) return;\r\n\r\n    let clone = utils.clone(buffer);\r\n    storeBuffer(clone);\r\n\r\n    let region = waveData[0].regions.getRegions()[0];\r\n    let sampleRate = buffer.sampleRate;\r\n    let start = Math.floor(region.start * sampleRate);\r\n    let end = Math.ceil(region.end * sampleRate);\r\n    let wet = wetness;\r\n    let dry = dryness;\r\n    let feeder = feedback;\r\n\r\n    let numChannels = buffer.numberOfChannels;\r\n    let delaySamples = Math.ceil(sampleRate * delayTime);\r\n\r\n    if (numChannels === 1) {\r\n        let channelData = buffer.getChannelData(0);\r\n        let delayBuffer = new Float32Array(delaySamples).fill(0);\r\n\r\n        for (let i = start; i < end; i++) {\r\n            let delayIndex = (i - start) % delaySamples;\r\n            let delayedSample = delayBuffer[delayIndex];\r\n            channelData[i] = (channelData[i] * dry) + (delayedSample * wet);\r\n            delayBuffer[delayIndex] = (feeder * delayedSample) + channelData[i];\r\n        }\r\n    } else if (numChannels === 2) {\r\n        let channelLeft = buffer.getChannelData(0);\r\n        let channelRight = buffer.getChannelData(1);\r\n        let delayBufferLeft = new Float32Array(delaySamples).fill(0);\r\n        let delayBufferRight = new Float32Array(delaySamples).fill(0);\r\n\r\n        for (let i = start; i < end; i++) {\r\n            let delayIndex = (i - start) % delaySamples;\r\n            let delayedLeft = delayBufferLeft[delayIndex];\r\n            channelLeft[i] = (channelLeft[i] * dry) + (delayedLeft * wet);\r\n            delayBufferLeft[delayIndex] = (feeder * delayedLeft) + channelLeft[i];\r\n            let delayedRight = delayBufferRight[delayIndex];\r\n            channelRight[i] = (channelRight[i] * dry) + (delayedRight * wet);\r\n            delayBufferRight[delayIndex] = (feeder * delayedRight) + channelRight[i];\r\n        }\r\n    }\r\n    success(\"Applied delay to region.\");\r\n    let blob = blobber(buffer);\r\n    waveData[0].waveSurfer.loadBlob(blob).catch(error => console.error(error));\r\n};\r\n\r\n\r\n  const openReverbModal = () => setReverbModalOpen(true);\r\n  const closeReverbModal = () => setReverbModalOpen(false);\r\n\r\n  const reverb = () => {\r\n    if (waveData[0].regions.getRegions().length != 1) {\r\n      error(\"Please select a region to apply the effect.\");\r\n      return;\r\n    }\r\n\r\n    let buffer = waveData[0].waveSurfer.getDecodedData();\r\n    if (!buffer) return;\r\n\r\n    let clone = utils.clone(buffer);\r\n    storeBuffer(clone);\r\n\r\n    let region = waveData[0].regions.getRegions()[0];\r\n    let sampleRate = buffer.sampleRate;\r\n    let start = Math.floor(region.start * sampleRate);\r\n    let end = Math.ceil(region.end * sampleRate);\r\n    let bufferSize = end - start;\r\n\r\n    let channelLeft = buffer.getChannelData(0);\r\n    let channelRight = buffer.getChannelData(1);\r\n    let samplesLeft = new Float32Array(channelLeft.subarray(start, end));\r\n    let samplesRight = new Float32Array(channelRight.subarray(start, end));\r\n\r\n    const combDelays = [0.0297, 0.0371, 0.0411, 0.0437].map(t => Math.floor(t * sampleRate));\r\n    const combGains = [0.773, 0.802, 0.753, 0.733];\r\n    const allPassDelays = [0.005, 0.0017].map(t => Math.floor(t * sampleRate));\r\n    const decayFactor = decay || 0.5;\r\n    const wetLevel = reverbWet || 0.5;\r\n\r\n    const processCombFilters = (samples) => {\r\n        const combBuffers = combDelays.map(delay => new Float32Array(delay).fill(0));\r\n        let output = new Float32Array(samples.length);\r\n\r\n        for (let i = 0; i < samples.length; i++) {\r\n            let wetSample = 0;\r\n            for (let c = 0; c < combBuffers.length; c++) {\r\n                const delay = combBuffers[c];\r\n                const delayIndex = i % delay.length;\r\n                const delayedSample = delay[delayIndex];\r\n                wetSample += delayedSample;\r\n                delay[delayIndex] = samples[i] + delayedSample * combGains[c] * decayFactor;\r\n            }\r\n            output[i] = wetSample;\r\n        }\r\n        return output;\r\n    };\r\n\r\n    let combOutputLeft = processCombFilters(samplesLeft);\r\n    let combOutputRight = processCombFilters(samplesRight);\r\n\r\n    const processAllPassFilters = (samples) => {\r\n        const allPassBuffers = allPassDelays.map(delay => new Float32Array(delay).fill(0));\r\n\r\n        for (let i = 0; i < samples.length; i++) {\r\n            for (let a = 0; a < allPassBuffers.length; a++) {\r\n                const delay = allPassBuffers[a];\r\n                const delayIndex = i % delay.length;\r\n                const delayedSample = delay[delayIndex];\r\n\r\n                const allPassSample = -0.7 * samples[i] + delayedSample + 0.7 * samples[i];\r\n                delay[delayIndex] = samples[i] + delayedSample * 0.7;\r\n                samples[i] = allPassSample;\r\n            }\r\n        }\r\n        return samples;\r\n    };\r\n\r\n    let allPassOutputLeft = processAllPassFilters(combOutputLeft);\r\n    let allPassOutputRight = processAllPassFilters(combOutputRight);\r\n\r\n    for (let i = 0; i < bufferSize; i++) {\r\n        channelLeft[start + i] = ((1 - wetLevel) * samplesLeft[i]) + (wetLevel * allPassOutputLeft[i]);\r\n        channelRight[start + i] = ((1 - wetLevel) * samplesRight[i]) + (wetLevel * allPassOutputRight[i]);\r\n    }\r\n\r\n    success('Applied reverb to region');\r\n    let blob = blobber(buffer);\r\n    waveData[0].waveSurfer.loadBlob(blob).catch(error => console.log(error));\r\n};\r\n\r\n  const closeEquaModal = () => setEquaModalOpen(false);\r\n  const openEquaModal = () => {\r\n    setEquaInit(true);\r\n    setEquaModalOpen(true);\r\n  }\r\n\r\n  const cut = () => {\r\n    if (waveData[0].regions.getRegions().length === 1) {\r\n      let buffer = waveData[0].waveSurfer.getDecodedData();\r\n      let clone = utils.clone(buffer)\r\n      storeBuffer(clone);\r\n      let region = (waveData[0].regions.getRegions())[0];\r\n      let slicedBuffer = getAudioSlice(buffer, region.start, region.end);\r\n      copyBufs[0] = slicedBuffer;\r\n      let newBuf1 = getAudioSlice(buffer, 0, region.start);\r\n      let newBuf2 = getAudioSlice(buffer, region.end, buffer.duration);\r\n      let newBuf = utils.concat(newBuf1, newBuf2);\r\n      let blob = blobber(newBuf);\r\n      waveData[0].waveSurfer.loadBlob(blob).catch(error => console.log(error));\r\n      success(\"Region has been cut.\");\r\n      return;\r\n    } else {\r\n      error(\"Please select a region to cut.\");\r\n      return;\r\n    }\r\n  }\r\n\r\n  const copy = () => {\r\n    if (waveData[0].regions.getRegions().length === 1) {\r\n      let buffer = waveData[0].waveSurfer.getDecodedData();\r\n      let clone = utils.clone(buffer);\r\n      storeBuffer(clone);\r\n      let region = (waveData[0].regions.getRegions())[0];\r\n      let slicedBuffer = getAudioSlice(buffer, region.start, region.end);\r\n      copyBufs[0] = slicedBuffer;\r\n      success(\"Region has been copied.\");\r\n      return;\r\n    } else {\r\n      error(\"Please select a region to copy.\");\r\n      return;\r\n    }\r\n  }\r\n\r\n  const paste = () => {\r\n    if (copyBufs.length >= 1) {\r\n      let buffer = waveData[0].waveSurfer.getDecodedData();\r\n      let clone = utils.clone(buffer);\r\n      storeBuffer(clone);\r\n      if (waveData[0].regions.getRegions().length === 1) {\r\n        let region = (waveData[0].regions.getRegions())[0];\r\n        let newBuf1 = getAudioSlice(buffer, 0, region.start);\r\n        let newBuf2 = getAudioSlice(buffer, region.end, buffer.duration);\r\n        let newBuf = utils.concat(newBuf1, copyBufs[0], newBuf2);\r\n        let blob = blobber(newBuf);\r\n        waveData[0].waveSurfer.loadBlob(blob).catch(error => console.log(error));\r\n        success(\"Region has been pasted.\");\r\n      } else {\r\n        let currTime = waveData[0].waveSurfer.getCurrentTime();\r\n        let newBuf1 = getAudioSlice(buffer, 0, currTime);\r\n        let newBuf2 = getAudioSlice(buffer, currTime, buffer.duration);\r\n        let newBuf = utils.concat(newBuf1, copyBufs[0], newBuf2);\r\n        let blob = blobber(newBuf);\r\n        waveData[0].waveSurfer.loadBlob(blob).catch(error => console.log(error));\r\n        success(\"Region has been pasted.\");\r\n      }\r\n    } else {\r\n      error(\"Nothing to paste.\");\r\n      return;\r\n    }\r\n  }\r\n  \r\n\r\n  return (\r\n    <div className=\"menubackground\">\r\n      {/* Toast Notifications */}\r\n      <ToastContainer position=\"bottom-right\" autoClose={2000} />\r\n\r\n      <div className=\"contentStyle\">\r\n        {/* Main Button Container */}\r\n        <div className=\"buttonContainer\">\r\n          <button className=\"navigationButtonStyle\" onClick={handleBack}>Back</button>\r\n\r\n          {/* Basic Controls */}\r\n          <button className=\"simpleButtonStyle\" onClick={reverse}>Reverse Selected Region</button>\r\n          <button className=\"simpleButtonStyle\" onClick={fadeIn}>Fade In Region</button>\r\n          <button className=\"simpleButtonStyle\" onClick={fadeOut}>Fade Out Region</button>\r\n          <button className=\"bufferButtonStyle\" onClick={cut}>Cut Region</button>\r\n          <button className=\"bufferButtonStyle\" onClick={copy}>Copy Region</button>\r\n          <button className=\"bufferButtonStyle\" onClick={paste}>Paste Region</button>\r\n\r\n          {/* Undo and Reset */}\r\n          <button className=\"resetButtonStyle\" onClick={undo}>Undo</button>\r\n          <button className=\"resetButtonStyle\" onClick={reset}>Reset</button>\r\n\r\n          {/* Advanced Options Toggle */}\r\n          <button className=\"navigationButtonStyle\" onClick={toggleAdvancedOptions}>\r\n            {showAdvanced ? 'Hide Advanced' : 'Show Advanced'}\r\n          </button>\r\n\r\n          {showAdvanced && (\r\n            <div className=\"advancedOptions\">\r\n              {/* Advanced Audio Effects */}\r\n              <button className=\"modalButtonStyle\" onClick={normalize}>Normalize</button>\r\n              <button className=\"modalButtonStyle\" onClick={invert}>Invert Selected Region</button>\r\n              <button className=\"modalButtonStyle\" onClick={openGainModal}>Adjust Gain</button>\r\n              <button className=\"modalButtonStyle\" onClick={openDelayModal}>Adjust Delay</button>\r\n              <button className=\"modalButtonStyle\" onClick={openDistortionModal}>Apply Distortion</button>\r\n              <button className=\"modalButtonStyle\" onClick={openReverbModal}>Apply Reverb</button>\r\n              <button className=\"modalButtonStyle\" onClick={openEquaModal}>10-Band Equalizer</button>\r\n            </div>\r\n          )}\r\n\r\n          {/* Gain Modal */}\r\n          {isGainModalOpen && (\r\n            <Modal\r\n              title=\"Gain Percentage\"\r\n              close={closeGainModal}\r\n              onApply={adjustGain}\r\n            >\r\n              <Slider\r\n                id=\"gains\"\r\n                min={0}\r\n                max={200}\r\n                step={0.01}\r\n                value={gainValue}\r\n                onChange={setGainValue}\r\n                label={`${gainValue}%`}\r\n              />\r\n            </Modal>\r\n          )}\r\n\r\n          {/* Delay Modal */}\r\n          {isDelayModalOpen && (\r\n            <Modal\r\n              title=\"Delay Settings\"\r\n              close={closeDelayModal}\r\n              onApply={delay}\r\n            >\r\n              <Slider id=\"delayT\" min={0} max={6} step={0.01} value={delayTime} onChange={setDelayTime} label={`${delayTime}s`} />\r\n              <Slider id=\"feedback\" min={0} max={1} step={0.01} value={feedback} onChange={setFeedback} label={`Feedback: ${feedback}`} />\r\n              <Slider id=\"wets\" min={0} max={1} step={0.01} value={wetness} onChange={setWetness} label={`Wet: ${wetness}`} />\r\n              <Slider id=\"dryer\" min={0} max={1} step={0.01} value={dryness} onChange={setDryness} label={`Dry: ${dryness}`} />\r\n            </Modal>\r\n          )}\r\n\r\n          {/* Distortion Modal */}\r\n          {isDistortionModalOpen && (\r\n            <Modal\r\n              title=\"Apply Distortion\"\r\n              close={closeDistortionModal}\r\n              onApply={distort}\r\n            >\r\n              <Slider\r\n                id=\"distortGain\"\r\n                min={0}\r\n                max={200}\r\n                step={0.01}\r\n                value={gainDistortValue}\r\n                onChange={setGainDistortValue}\r\n                label={`${gainDistortValue}%`}\r\n              />\r\n            </Modal>\r\n          )}\r\n\r\n          {/* Reverb Modal */}\r\n          {isReverbModalOpen && (\r\n            <Modal\r\n              title=\"Reverb Settings\"\r\n              close={closeReverbModal}\r\n              onApply={reverb}\r\n            >\r\n              <Slider id=\"reverbT\" min={0} max={1} step={0.01} value={reverbTime} onChange={setReverbTime} label={`Time: ${reverbTime}`} />\r\n              <Slider id=\"decay\" min={0} max={1} step={0.01} value={decay} onChange={setDecay} label={`Decay: ${decay}`} />\r\n              <Slider id=\"wetR\" min={0} max={1} step={0.01} value={reverbWet} onChange={setReverbWet} label={`Wet: ${reverbWet}`} />\r\n            </Modal>\r\n          )}\r\n\r\n          {/* Equalizer Modal */}\r\n          {isEquaModalOpen && (\r\n            <Modal\r\n              title=\"10-Band Equalizer\"\r\n              close={closeEquaModal}\r\n              onApply={setFilter}\r\n            >\r\n              <div className=\"equalizerSliders\">\r\n                {equalizerFrequencies.map((freq, index) => (\r\n                  <Slider\r\n                    key={freq}\r\n                    id={`filter${index}`}\r\n                    min={-40}\r\n                    max={40}\r\n                    step={0.1}\r\n                    value={filterValues[index]}\r\n                    onChange={(value) => updateFilterValue(index, value)}\r\n                    label={`${freq} Hz: ${filterValues[index]} dB`}\r\n                    vertical\r\n                  />\r\n                ))}\r\n              </div>\r\n            </Modal>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAQ,OAAO;AACtC,OAAO,YAAY;AACnB,SAASC,KAAK,EAAEC,cAAc,QAAQ,gBAAgB;AACtD,OAAO,uCAAuC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,IAAIC,KAAK,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AACzC,IAAIC,OAAO,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAC5C,IAAIE,MAAM,GAAGF,OAAO,CAAC,mBAAmB,CAAC;AACzC,IAAIG,WAAW,GAAG,IAAI;AAEtB,IAAIC,OAAO,GAAG,EAAE;AAChB,IAAIC,QAAQ,GAAG,EAAE;AAEjB,SAASC,WAAWA,CAAEC,MAAM,EAAE;EAC5BH,OAAO,CAACI,IAAI,CAACD,MAAM,CAAC;AACtB;AAEA,SAASE,aAAaA,CAACF,MAAM,EAAEG,KAAK,EAAEC,GAAG,EAAE;EACzCT,MAAM,CAACK,MAAM,EAAEG,KAAK,GAAG,IAAI,EAAEC,GAAG,GAAG,IAAI,EAAE,UAASC,KAAK,EAAEC,YAAY,EAAE;IACnE,IAAID,KAAK,EAAE;MACPE,OAAO,CAACF,KAAK,CAACA,KAAK,CAAC;MACpB;IACJ,CAAC,MAAM;MACHT,WAAW,GAAGU,YAAY;IAC9B;EACJ,CAAC,CAAC;EACF,OAAOV,WAAW;AACpB;AAEA,SAASY,IAAIA,CAAC;EAAEC,UAAU;EAAEC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EACrC,MAAMC,OAAO,GAAGF,QAAQ,CAAC,CAAC,CAAC,CAACE,OAAO;EACnC,MAAM,CAACC,eAAe,EAAEC,gBAAgB,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAAC4B,gBAAgB,EAAEC,iBAAiB,CAAC,GAAG7B,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAAC8B,qBAAqB,EAAEC,sBAAsB,CAAC,GAAG/B,QAAQ,CAAC,KAAK,CAAC;EACvE,MAAM,CAACgC,iBAAiB,EAAEC,kBAAkB,CAAC,GAAGjC,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACkC,eAAe,EAAEC,gBAAgB,CAAC,GAAGnC,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACoC,UAAU,EAAEC,WAAW,CAAC,GAAGrC,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACsC,SAAS,EAAEC,YAAY,CAAC,GAAGvC,QAAQ,CAAC,GAAG,CAAC;EAC/C,MAAM,CAACwC,SAAS,EAAEC,YAAY,CAAC,GAAGzC,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAAC0C,QAAQ,EAAEC,WAAW,CAAC,GAAG3C,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAAC4C,OAAO,EAAEC,UAAU,CAAC,GAAG7C,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAAC8C,OAAO,EAAEC,UAAU,CAAC,GAAG/C,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACgD,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGjD,QAAQ,CAAC,GAAG,CAAC;EAC7D,MAAM,CAACkD,UAAU,EAAEC,aAAa,CAAC,GAAGnD,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACoD,KAAK,EAAEC,QAAQ,CAAC,GAAGrD,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACsD,SAAS,EAAEC,YAAY,CAAC,GAAGvD,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACwD,UAAU,EAAEC,UAAU,CAAC,GAAGzD,QAAQ,CAACyB,OAAO,CAAC,CAAC,CAAC,CAACiC,IAAI,CAACC,KAAK,CAAC;EAChE,MAAM,CAACC,UAAU,EAAEC,UAAU,CAAC,GAAG7D,QAAQ,CAACyB,OAAO,CAAC,CAAC,CAAC,CAACiC,IAAI,CAACC,KAAK,CAAC;EAChE,MAAM,CAACG,UAAU,EAAEC,UAAU,CAAC,GAAG/D,QAAQ,CAACyB,OAAO,CAAC,CAAC,CAAC,CAACiC,IAAI,CAACC,KAAK,CAAC;EAChE,MAAM,CAACK,UAAU,EAAEC,UAAU,CAAC,GAAGjE,QAAQ,CAACyB,OAAO,CAAC,CAAC,CAAC,CAACiC,IAAI,CAACC,KAAK,CAAC;EAChE,MAAM,CAACO,UAAU,EAAEC,UAAU,CAAC,GAAGnE,QAAQ,CAACyB,OAAO,CAAC,CAAC,CAAC,CAACiC,IAAI,CAACC,KAAK,CAAC;EAChE,MAAM,CAACS,UAAU,EAAEC,UAAU,CAAC,GAAGrE,QAAQ,CAACyB,OAAO,CAAC,CAAC,CAAC,CAACiC,IAAI,CAACC,KAAK,CAAC;EAChE,MAAM,CAACW,UAAU,EAAEC,UAAU,CAAC,GAAGvE,QAAQ,CAACyB,OAAO,CAAC,CAAC,CAAC,CAACiC,IAAI,CAACC,KAAK,CAAC;EAChE,MAAM,CAACa,UAAU,EAAEC,UAAU,CAAC,GAAGzE,QAAQ,CAACyB,OAAO,CAAC,CAAC,CAAC,CAACiC,IAAI,CAACC,KAAK,CAAC;EAChE,MAAM,CAACe,UAAU,EAAEC,UAAU,CAAC,GAAG3E,QAAQ,CAACyB,OAAO,CAAC,CAAC,CAAC,CAACiC,IAAI,CAACC,KAAK,CAAC;EAChE,MAAM,CAACiB,UAAU,EAAEC,UAAU,CAAC,GAAG7E,QAAQ,CAACyB,OAAO,CAAC,CAAC,CAAC,CAACiC,IAAI,CAACC,KAAK,CAAC;EAChE,MAAM,CAACmB,YAAY,EAAEC,eAAe,CAAC,GAAG/E,QAAQ,CAAC,KAAK,CAAC;EAEvD,MAAMkB,KAAK,GAAI8D,OAAO,IAAK/E,KAAK,CAACiB,KAAK,CAAC8D,OAAO,CAAC;EAE/C,MAAMC,OAAO,GAAID,OAAO,IAAK/E,KAAK,CAACgF,OAAO,CAACD,OAAO,CAAC;EAEnD,MAAME,qBAAqB,GAAGA,CAAA,KAAM;IAClCH,eAAe,CAAEI,IAAI,IAAK,CAACA,IAAI,CAAC;EAClC,CAAC;EAED,IAAI/C,UAAU,KAAK,KAAK,EAAE;IACxBb,QAAQ,CAAC,CAAC,CAAC,CAAC6D,cAAc,CAACC,QAAQ,CAACC,OAAO,CAAC7D,OAAO,CAAC,CAAC,CAAC,CAAC;IACvDA,OAAO,CAAC,CAAC,CAAC,CAAC6D,OAAO,CAAC7D,OAAO,CAAC,CAAC,CAAC,CAAC;IAC9BA,OAAO,CAAC,CAAC,CAAC,CAAC6D,OAAO,CAAC7D,OAAO,CAAC,CAAC,CAAC,CAAC;IAC9BA,OAAO,CAAC,CAAC,CAAC,CAAC6D,OAAO,CAAC7D,OAAO,CAAC,CAAC,CAAC,CAAC;IAC9BA,OAAO,CAAC,CAAC,CAAC,CAAC6D,OAAO,CAAC7D,OAAO,CAAC,CAAC,CAAC,CAAC;IAC9BA,OAAO,CAAC,CAAC,CAAC,CAAC6D,OAAO,CAAC7D,OAAO,CAAC,CAAC,CAAC,CAAC;IAC9BA,OAAO,CAAC,CAAC,CAAC,CAAC6D,OAAO,CAAC7D,OAAO,CAAC,CAAC,CAAC,CAAC;IAC9BA,OAAO,CAAC,CAAC,CAAC,CAAC6D,OAAO,CAAC7D,OAAO,CAAC,CAAC,CAAC,CAAC;IAC9BA,OAAO,CAAC,CAAC,CAAC,CAAC6D,OAAO,CAAC7D,OAAO,CAAC,CAAC,CAAC,CAAC;IAC9BA,OAAO,CAAC,CAAC,CAAC,CAAC6D,OAAO,CAAC7D,OAAO,CAAC,CAAC,CAAC,CAAC;IAC9BA,OAAO,CAAC,CAAC,CAAC,CAAC6D,OAAO,CAAC/D,QAAQ,CAAC,CAAC,CAAC,CAAC6D,cAAc,CAACG,YAAY,CAACC,WAAW,CAAC;EACzE;EAEA,MAAMC,SAAS,GAAGA,CAAA,KAAM;IACpBhE,OAAO,CAAC,CAAC,CAAC,CAACiC,IAAI,CAACC,KAAK,GAAGH,UAAU;IAClC/B,OAAO,CAAC,CAAC,CAAC,CAACiC,IAAI,CAACC,KAAK,GAAGC,UAAU;IAClCnC,OAAO,CAAC,CAAC,CAAC,CAACiC,IAAI,CAACC,KAAK,GAAGG,UAAU;IAClCrC,OAAO,CAAC,CAAC,CAAC,CAACiC,IAAI,CAACC,KAAK,GAAGK,UAAU;IAClCvC,OAAO,CAAC,CAAC,CAAC,CAACiC,IAAI,CAACC,KAAK,GAAGO,UAAU;IAClCzC,OAAO,CAAC,CAAC,CAAC,CAACiC,IAAI,CAACC,KAAK,GAAGS,UAAU;IAClC3C,OAAO,CAAC,CAAC,CAAC,CAACiC,IAAI,CAACC,KAAK,GAAGW,UAAU;IAClC7C,OAAO,CAAC,CAAC,CAAC,CAACiC,IAAI,CAACC,KAAK,GAAGa,UAAU;IAClC/C,OAAO,CAAC,CAAC,CAAC,CAACiC,IAAI,CAACC,KAAK,GAAGe,UAAU;IAClCjD,OAAO,CAAC,CAAC,CAAC,CAACiC,IAAI,CAACC,KAAK,GAAGiB,UAAU;IAClCK,OAAO,CAAC,iCAAiC,CAAC;EAC9C,CAAC;EAED,MAAMS,IAAI,GAAGA,CAAA,KAAM;IACjB,IAAIhF,OAAO,CAACiF,MAAM,GAAG,CAAC,EAAE;MACtB,IAAIC,IAAI,GAAGrF,OAAO,CAACG,OAAO,CAACmF,GAAG,CAAC,CAAC,CAAC;MACjCtE,QAAQ,CAAC,CAAC,CAAC,CAACuE,UAAU,CAACC,QAAQ,CAACH,IAAI,CAAC,CAACI,KAAK,CAAC9E,KAAK,IAAIE,OAAO,CAAC6E,GAAG,CAAC/E,KAAK,CAAC,CAAC;MACxE+D,OAAO,CAAC,oBAAoB,CAAC;IAC/B,CAAC,MAAM;MACL/D,KAAK,CAAC,kBAAkB,CAAC;MACzB;IACF;EACF,CAAC;EAED,MAAMgF,KAAK,GAAGA,CAAA,KAAM;IAClB,IAAIxF,OAAO,CAACiF,MAAM,IAAI,CAAC,EAAE;MACvBpE,QAAQ,CAAC,CAAC,CAAC,CAACuE,UAAU,CAACC,QAAQ,CAACxF,OAAO,CAACG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAACsF,KAAK,CAAC9E,KAAK,IAAIE,OAAO,CAAC6E,GAAG,CAAC/E,KAAK,CAAC,CAAC;MACvFR,OAAO,GAAG,EAAE;MACZuE,OAAO,CAAC,8BAA8B,CAAC;IACzC,CAAC,MAAM;MACL/D,KAAK,CAAC,mBAAmB,CAAC;MAC1B;IACF;EACF,CAAC;EAED,MAAMiF,OAAO,GAAGA,CAAA,KAAM;IACpB/E,OAAO,CAAC6E,GAAG,CAACvF,OAAO,CAACiF,MAAM,CAAC;IAC3B,IAAIpE,QAAQ,CAAC,CAAC,CAAC,CAAC6E,OAAO,CAACC,UAAU,CAAC,CAAC,CAACV,MAAM,IAAI,CAAC,EAAE;MAChDzE,KAAK,CAAC,6CAA6C,CAAC;MACpD;IACF;IAEA,IAAIL,MAAM,GAAGU,QAAQ,CAAC,CAAC,CAAC,CAACuE,UAAU,CAACQ,cAAc,CAAC,CAAC;IACpD,IAAIC,KAAK,GAAGlG,KAAK,CAACkG,KAAK,CAAC1F,MAAM,CAAC;IAC/BD,WAAW,CAAC2F,KAAK,CAAC;IAClB,IAAIC,MAAM,GAAIjF,QAAQ,CAAC,CAAC,CAAC,CAAC6E,OAAO,CAACC,UAAU,CAAC,CAAC,CAAE,CAAC,CAAC;IAClD,IAAII,UAAU,GAAG5F,MAAM,CAAC4F,UAAU;IAClC,IAAI5F,MAAM,EAAE;MACVR,KAAK,CAAC8F,OAAO,CAACtF,MAAM,EAAEA,MAAM,EAAE2F,MAAM,CAACxF,KAAK,GAAGyF,UAAU,EAAED,MAAM,CAACvF,GAAG,GAAGwF,UAAU,CAAC;MACjFxB,OAAO,CAAC,kBAAkB,CAAC;MAC3B,IAAIW,IAAI,GAAGrF,OAAO,CAACM,MAAM,CAAC;MAC1BU,QAAQ,CAAC,CAAC,CAAC,CAACuE,UAAU,CAACC,QAAQ,CAACH,IAAI,CAAC,CAACI,KAAK,CAAC9E,KAAK,IAAIE,OAAO,CAAC6E,GAAG,CAAC/E,KAAK,CAAC,CAAC;IAC1E,CAAC,MAAM;MACLA,KAAK,CAAC,wBAAwB,CAAC;IACjC;EACF,CAAC;EAED,MAAMwF,MAAM,GAAGA,CAAA,KAAM;IACnB,IAAInF,QAAQ,CAAC,CAAC,CAAC,CAAC6E,OAAO,CAACC,UAAU,CAAC,CAAC,CAACV,MAAM,IAAI,CAAC,EAAE;MAChDzE,KAAK,CAAC,6CAA6C,CAAC;MACpD;IACF;IAEA,IAAIL,MAAM,GAAGU,QAAQ,CAAC,CAAC,CAAC,CAACuE,UAAU,CAACQ,cAAc,CAAC,CAAC;IACpD,IAAIC,KAAK,GAAGlG,KAAK,CAACkG,KAAK,CAAC1F,MAAM,CAAC;IAC/BD,WAAW,CAAC2F,KAAK,CAAC;IAClB,IAAIC,MAAM,GAAIjF,QAAQ,CAAC,CAAC,CAAC,CAAC6E,OAAO,CAACC,UAAU,CAAC,CAAC,CAAE,CAAC,CAAC;IAClD,IAAII,UAAU,GAAG5F,MAAM,CAAC4F,UAAU;IAClC,IAAI5F,MAAM,EAAE;MACVR,KAAK,CAACqG,MAAM,CAAC7F,MAAM,EAAEA,MAAM,EAAE2F,MAAM,CAACxF,KAAK,GAAGyF,UAAU,EAAED,MAAM,CAACvF,GAAG,GAAGwF,UAAU,CAAC;MAChFxB,OAAO,CAAC,kBAAkB,CAAC;MAC3B,IAAIW,IAAI,GAAGrF,OAAO,CAACM,MAAM,CAAC;MAC1BU,QAAQ,CAAC,CAAC,CAAC,CAACuE,UAAU,CAACC,QAAQ,CAACH,IAAI,CAAC,CAACI,KAAK,CAAC9E,KAAK,IAAIE,OAAO,CAAC6E,GAAG,CAAC/E,KAAK,CAAC,CAAC;IAC1E,CAAC,MAAM;MACLA,KAAK,CAAC,wBAAwB,CAAC;IACjC;EACF,CAAC;EAED,MAAMyF,SAAS,GAAGA,CAAA,KAAM;IACtB,IAAIpF,QAAQ,CAAC,CAAC,CAAC,CAAC6E,OAAO,CAACC,UAAU,CAAC,CAAC,CAACV,MAAM,IAAI,CAAC,EAAE;MAChDzE,KAAK,CAAC,6CAA6C,CAAC;MACpD;IACF;IAEA,IAAIL,MAAM,GAAGU,QAAQ,CAAC,CAAC,CAAC,CAACuE,UAAU,CAACQ,cAAc,CAAC,CAAC;IACpD,IAAIC,KAAK,GAAGlG,KAAK,CAACkG,KAAK,CAAC1F,MAAM,CAAC;IAC/BD,WAAW,CAAC2F,KAAK,CAAC;IAClB,IAAIC,MAAM,GAAIjF,QAAQ,CAAC,CAAC,CAAC,CAAC6E,OAAO,CAACC,UAAU,CAAC,CAAC,CAAE,CAAC,CAAC;IAClD,IAAII,UAAU,GAAG5F,MAAM,CAAC4F,UAAU;IAClC,IAAI5F,MAAM,EAAE;MACVR,KAAK,CAACsG,SAAS,CAAC9F,MAAM,EAAEA,MAAM,EAAE2F,MAAM,CAACxF,KAAK,GAAGyF,UAAU,EAAED,MAAM,CAACvF,GAAG,GAAGwF,UAAU,CAAC;MACnFxB,OAAO,CAAC,oBAAoB,CAAC;MAC7B,IAAIW,IAAI,GAAGrF,OAAO,CAACM,MAAM,CAAC;MAC1BU,QAAQ,CAAC,CAAC,CAAC,CAACuE,UAAU,CAACC,QAAQ,CAACH,IAAI,CAAC,CAACI,KAAK,CAAC9E,KAAK,IAAIE,OAAO,CAAC6E,GAAG,CAAC/E,KAAK,CAAC,CAAC;IAC1E,CAAC,MAAM;MACLA,KAAK,CAAC,wBAAwB,CAAC;IACjC;EACF,CAAC;EAED,MAAM0F,aAAa,GAAGA,CAAA,KAAMjF,gBAAgB,CAAC,IAAI,CAAC;EAClD,MAAMkF,cAAc,GAAGA,CAAA,KAAMlF,gBAAgB,CAAC,KAAK,CAAC;EAEpD,MAAMmF,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIvF,QAAQ,CAAC,CAAC,CAAC,CAAC6E,OAAO,CAACC,UAAU,CAAC,CAAC,CAACV,MAAM,IAAI,CAAC,EAAE;MAChDzE,KAAK,CAAC,6CAA6C,CAAC;MACpD;IACF;IAEA,IAAIL,MAAM,GAAGU,QAAQ,CAAC,CAAC,CAAC,CAACuE,UAAU,CAACQ,cAAc,CAAC,CAAC;IACpD,IAAIC,KAAK,GAAGlG,KAAK,CAACkG,KAAK,CAAC1F,MAAM,CAAC;IAC/BD,WAAW,CAAC2F,KAAK,CAAC;IAClB,IAAIC,MAAM,GAAIjF,QAAQ,CAAC,CAAC,CAAC,CAAC6E,OAAO,CAACC,UAAU,CAAC,CAAC,CAAE,CAAC,CAAC;IAClD,IAAII,UAAU,GAAG5F,MAAM,CAAC4F,UAAU;IAClC,IAAI/C,IAAI,GAAGpB,SAAS,GAAG,GAAG;IAC1B,IAAItB,KAAK,GAAG+F,IAAI,CAACC,KAAK,CAACR,MAAM,CAACxF,KAAK,GAAGyF,UAAU,CAAC;IACjD,IAAIxF,GAAG,GAAG8F,IAAI,CAACE,IAAI,CAACT,MAAM,CAACvF,GAAG,GAAGwF,UAAU,CAAC;IAE5C,IAAI5F,MAAM,EAAE;MACV,KAAK,IAAIqG,OAAO,GAAG,CAAC,EAAEA,OAAO,GAAGrG,MAAM,CAACsG,gBAAgB,EAAED,OAAO,IAAI,CAAC,EAAE;QACrE,IAAIE,WAAW,GAAGvG,MAAM,CAACwG,cAAc,CAACH,OAAO,CAAC;QAEhD,KAAK,IAAII,MAAM,GAAGtG,KAAK,EAAEsG,MAAM,GAAGrG,GAAG,EAAEqG,MAAM,IAAI,CAAC,EAAE;UAChDF,WAAW,CAACE,MAAM,CAAC,IAAI5D,IAAI;QAC/B;MACF;MACAuB,OAAO,CAAC,0BAA0B,EAAEvB,IAAI,CAAC;MACzC,IAAIkC,IAAI,GAAGrF,OAAO,CAACM,MAAM,CAAC;MAC1BU,QAAQ,CAAC,CAAC,CAAC,CAACuE,UAAU,CAACC,QAAQ,CAACH,IAAI,CAAC,CAACI,KAAK,CAAC9E,KAAK,IAAIE,OAAO,CAAC6E,GAAG,CAAC/E,KAAK,CAAC,CAAC;IAC1E;EACF,CAAC;EAED,MAAMqG,MAAM,GAAGA,CAAA,KAAM;IACnB,IAAIhG,QAAQ,CAAC,CAAC,CAAC,CAAC6E,OAAO,CAACC,UAAU,CAAC,CAAC,CAACV,MAAM,IAAI,CAAC,EAAE;MAChDzE,KAAK,CAAC,6CAA6C,CAAC;MACpD;IACF;IAEA,IAAIL,MAAM,GAAGU,QAAQ,CAAC,CAAC,CAAC,CAACuE,UAAU,CAACQ,cAAc,CAAC,CAAC;IACpD,IAAIC,KAAK,GAAGlG,KAAK,CAACkG,KAAK,CAAC1F,MAAM,CAAC;IAC/BD,WAAW,CAAC2F,KAAK,CAAC;IAClB,IAAIC,MAAM,GAAIjF,QAAQ,CAAC,CAAC,CAAC,CAAC6E,OAAO,CAACC,UAAU,CAAC,CAAC,CAAE,CAAC,CAAC;IAClD,IAAII,UAAU,GAAG5F,MAAM,CAAC4F,UAAU;IAClC,IAAIzF,KAAK,GAAG+F,IAAI,CAACC,KAAK,CAACR,MAAM,CAACxF,KAAK,GAAGyF,UAAU,CAAC;IACjD,IAAIxF,GAAG,GAAG8F,IAAI,CAACE,IAAI,CAACT,MAAM,CAACvF,GAAG,GAAGwF,UAAU,CAAC;IAC5C,IAAIe,OAAO,GAAG,CAAC,IAAIvG,GAAG,GAACD,KAAK,CAAC;IAC7B,IAAIyG,QAAQ,GAAG,CAAC;IAChB,IAAIC,KAAK,GAAG,CAAC;IAEb,IAAI7G,MAAM,EAAE;MACV,KAAK,IAAIqG,OAAO,GAAG,CAAC,EAAEA,OAAO,GAAGrG,MAAM,CAACsG,gBAAgB,EAAED,OAAO,IAAI,CAAC,EAAE;QACrE,IAAIE,WAAW,GAAGvG,MAAM,CAACwG,cAAc,CAACH,OAAO,CAAC;QAEhD,KAAK,IAAII,MAAM,GAAGtG,KAAK,EAAEsG,MAAM,GAAGrG,GAAG,EAAEqG,MAAM,IAAI,CAAC,EAAE;UAChDF,WAAW,CAACE,MAAM,CAAC,IAAKG,QAAQ,GAAIC,KAAK,GAAGF,OAAS;UACrDE,KAAK,IAAI,CAAC;QACd;QACAA,KAAK,GAAG,CAAC;MACX;MACAzC,OAAO,CAAC,kBAAkB,CAAC;MAC3B,IAAIW,IAAI,GAAGrF,OAAO,CAACM,MAAM,CAAC;MAC1BU,QAAQ,CAAC,CAAC,CAAC,CAACuE,UAAU,CAACC,QAAQ,CAACH,IAAI,CAAC,CAACI,KAAK,CAAC9E,KAAK,IAAIE,OAAO,CAAC6E,GAAG,CAAC/E,KAAK,CAAC,CAAC;IAC1E;EACF,CAAC;EAED,MAAMyG,OAAO,GAAGA,CAAA,KAAM;IACpB,IAAIpG,QAAQ,CAAC,CAAC,CAAC,CAAC6E,OAAO,CAACC,UAAU,CAAC,CAAC,CAACV,MAAM,IAAI,CAAC,EAAE;MAChDzE,KAAK,CAAC,6CAA6C,CAAC;MACpD;IACF;IAEA,IAAIL,MAAM,GAAGU,QAAQ,CAAC,CAAC,CAAC,CAACuE,UAAU,CAACQ,cAAc,CAAC,CAAC;IACpD,IAAIC,KAAK,GAAGlG,KAAK,CAACkG,KAAK,CAAC1F,MAAM,CAAC;IAC/BD,WAAW,CAAC2F,KAAK,CAAC;IAClB,IAAIC,MAAM,GAAIjF,QAAQ,CAAC,CAAC,CAAC,CAAC6E,OAAO,CAACC,UAAU,CAAC,CAAC,CAAE,CAAC,CAAC;IAClD,IAAII,UAAU,GAAG5F,MAAM,CAAC4F,UAAU;IAClC,IAAIzF,KAAK,GAAG+F,IAAI,CAACC,KAAK,CAACR,MAAM,CAACxF,KAAK,GAAGyF,UAAU,CAAC;IACjD,IAAIxF,GAAG,GAAG8F,IAAI,CAACE,IAAI,CAACT,MAAM,CAACvF,GAAG,GAAGwF,UAAU,CAAC;IAC5C,IAAIe,OAAO,GAAG,CAAC,IAAIvG,GAAG,GAACD,KAAK,CAAC;IAC7B,IAAIyG,QAAQ,GAAG,CAAC;IAChB,IAAIC,KAAK,GAAG,CAAC;IAEb,IAAI7G,MAAM,EAAE;MACV,KAAK,IAAIqG,OAAO,GAAG,CAAC,EAAEA,OAAO,GAAGrG,MAAM,CAACsG,gBAAgB,EAAED,OAAO,IAAI,CAAC,EAAE;QACrE,IAAIE,WAAW,GAAGvG,MAAM,CAACwG,cAAc,CAACH,OAAO,CAAC;QAEhD,KAAK,IAAII,MAAM,GAAGtG,KAAK,EAAEsG,MAAM,GAAGrG,GAAG,EAAEqG,MAAM,IAAI,CAAC,EAAE;UAChDF,WAAW,CAACE,MAAM,CAAC,IAAKG,QAAQ,GAAIC,KAAK,GAAGF,OAAS;UACrDE,KAAK,IAAI,CAAC;QACd;QACAA,KAAK,GAAG,CAAC;MACX;MACAzC,OAAO,CAAC,mBAAmB,CAAC;MAC5B,IAAIW,IAAI,GAAGrF,OAAO,CAACM,MAAM,CAAC;MAC1BU,QAAQ,CAAC,CAAC,CAAC,CAACuE,UAAU,CAACC,QAAQ,CAACH,IAAI,CAAC,CAACI,KAAK,CAAC9E,KAAK,IAAIE,OAAO,CAAC6E,GAAG,CAAC/E,KAAK,CAAC,CAAC;IAC1E;EACF,CAAC;EAED,MAAM0G,mBAAmB,GAAGA,CAAA,KAAM7F,sBAAsB,CAAC,IAAI,CAAC;EAC9D,MAAM8F,oBAAoB,GAAGA,CAAA,KAAM9F,sBAAsB,CAAC,KAAK,CAAC;EAEhE,MAAM+F,OAAO,GAAGA,CAAA,KAAM;IACpB,IAAIvG,QAAQ,CAAC,CAAC,CAAC,CAAC6E,OAAO,CAACC,UAAU,CAAC,CAAC,CAACV,MAAM,IAAI,CAAC,EAAE;MAChDzE,KAAK,CAAC,6CAA6C,CAAC;MACpD;IACF;IAEA,IAAIL,MAAM,GAAGU,QAAQ,CAAC,CAAC,CAAC,CAACuE,UAAU,CAACQ,cAAc,CAAC,CAAC;IACpD,IAAI,CAACzF,MAAM,EAAE;IAEb,IAAI0F,KAAK,GAAGlG,KAAK,CAACkG,KAAK,CAAC1F,MAAM,CAAC;IAC/BD,WAAW,CAAC2F,KAAK,CAAC;IAElB,IAAIC,MAAM,GAAGjF,QAAQ,CAAC,CAAC,CAAC,CAAC6E,OAAO,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;IAChD,IAAII,UAAU,GAAG5F,MAAM,CAAC4F,UAAU;IAElC,MAAM/C,IAAI,GAAGV,gBAAgB,GAAG,GAAG;IACnC,MAAM+E,GAAG,GAAG,GAAG;IACf,MAAMC,GAAG,GAAG,CAAC,GAAGD,GAAG;IAEnB,IAAI/G,KAAK,GAAG+F,IAAI,CAACC,KAAK,CAACR,MAAM,CAACxF,KAAK,GAAGyF,UAAU,CAAC;IACjD,IAAIxF,GAAG,GAAG8F,IAAI,CAACE,IAAI,CAACT,MAAM,CAACvF,GAAG,GAAGwF,UAAU,CAAC;IAE5C,IAAI5F,MAAM,EAAE;MACR,KAAK,IAAIqG,OAAO,GAAG,CAAC,EAAEA,OAAO,GAAGrG,MAAM,CAACsG,gBAAgB,EAAED,OAAO,IAAI,CAAC,EAAE;QACnE,IAAIE,WAAW,GAAGvG,MAAM,CAACwG,cAAc,CAACH,OAAO,CAAC;QAEhD,KAAK,IAAII,MAAM,GAAGtG,KAAK,EAAEsG,MAAM,GAAGrG,GAAG,EAAEqG,MAAM,IAAI,CAAC,EAAE;UAChD,MAAMW,SAAS,GAAGb,WAAW,CAACE,MAAM,CAAC;UACrC,MAAMY,SAAS,GAAGnB,IAAI,CAACoB,IAAI,CAACzE,IAAI,GAAGuE,SAAS,CAAC;UAC7Cb,WAAW,CAACE,MAAM,CAAC,GAAIU,GAAG,GAAGC,SAAS,GAAKF,GAAG,GAAGG,SAAU;QAC/D;MACJ;MAEAjD,OAAO,CAAC,+BAA+B,CAAC;MACxC,IAAIW,IAAI,GAAGrF,OAAO,CAACM,MAAM,CAAC;MAC1BU,QAAQ,CAAC,CAAC,CAAC,CAACuE,UAAU,CAACC,QAAQ,CAACH,IAAI,CAAC,CAACI,KAAK,CAAC9E,KAAK,IAAIE,OAAO,CAAC6E,GAAG,CAAC/E,KAAK,CAAC,CAAC;IAC5E;EACJ,CAAC;EAGC,MAAMkH,cAAc,GAAGA,CAAA,KAAMvG,iBAAiB,CAAC,IAAI,CAAC;EACpD,MAAMwG,eAAe,GAAGA,CAAA,KAAMxG,iBAAiB,CAAC,KAAK,CAAC;EAEtD,MAAMyG,KAAK,GAAGA,CAAA,KAAM;IAClB,IAAI/G,QAAQ,CAAC,CAAC,CAAC,CAAC6E,OAAO,CAACC,UAAU,CAAC,CAAC,CAACV,MAAM,IAAI,CAAC,EAAE;MAChDzE,KAAK,CAAC,6CAA6C,CAAC;MACpD;IACF;IAEA,IAAIL,MAAM,GAAGU,QAAQ,CAAC,CAAC,CAAC,CAACuE,UAAU,CAACQ,cAAc,CAAC,CAAC;IACpD,IAAI,CAACzF,MAAM,EAAE;IAEb,IAAI0F,KAAK,GAAGlG,KAAK,CAACkG,KAAK,CAAC1F,MAAM,CAAC;IAC/BD,WAAW,CAAC2F,KAAK,CAAC;IAElB,IAAIC,MAAM,GAAGjF,QAAQ,CAAC,CAAC,CAAC,CAAC6E,OAAO,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;IAChD,IAAII,UAAU,GAAG5F,MAAM,CAAC4F,UAAU;IAClC,IAAIzF,KAAK,GAAG+F,IAAI,CAACC,KAAK,CAACR,MAAM,CAACxF,KAAK,GAAGyF,UAAU,CAAC;IACjD,IAAIxF,GAAG,GAAG8F,IAAI,CAACE,IAAI,CAACT,MAAM,CAACvF,GAAG,GAAGwF,UAAU,CAAC;IAC5C,IAAIsB,GAAG,GAAGnF,OAAO;IACjB,IAAIoF,GAAG,GAAGlF,OAAO;IACjB,IAAIyF,MAAM,GAAG7F,QAAQ;IAErB,IAAI8F,WAAW,GAAG3H,MAAM,CAACsG,gBAAgB;IACzC,IAAIsB,YAAY,GAAG1B,IAAI,CAACE,IAAI,CAACR,UAAU,GAAGjE,SAAS,CAAC;IAEpD,IAAIgG,WAAW,KAAK,CAAC,EAAE;MACnB,IAAIpB,WAAW,GAAGvG,MAAM,CAACwG,cAAc,CAAC,CAAC,CAAC;MAC1C,IAAIqB,WAAW,GAAG,IAAIC,YAAY,CAACF,YAAY,CAAC,CAACG,IAAI,CAAC,CAAC,CAAC;MAExD,KAAK,IAAIC,CAAC,GAAG7H,KAAK,EAAE6H,CAAC,GAAG5H,GAAG,EAAE4H,CAAC,EAAE,EAAE;QAC9B,IAAIC,UAAU,GAAG,CAACD,CAAC,GAAG7H,KAAK,IAAIyH,YAAY;QAC3C,IAAIM,aAAa,GAAGL,WAAW,CAACI,UAAU,CAAC;QAC3C1B,WAAW,CAACyB,CAAC,CAAC,GAAIzB,WAAW,CAACyB,CAAC,CAAC,GAAGb,GAAG,GAAKe,aAAa,GAAGhB,GAAI;QAC/DW,WAAW,CAACI,UAAU,CAAC,GAAIP,MAAM,GAAGQ,aAAa,GAAI3B,WAAW,CAACyB,CAAC,CAAC;MACvE;IACJ,CAAC,MAAM,IAAIL,WAAW,KAAK,CAAC,EAAE;MAC1B,IAAIQ,WAAW,GAAGnI,MAAM,CAACwG,cAAc,CAAC,CAAC,CAAC;MAC1C,IAAI4B,YAAY,GAAGpI,MAAM,CAACwG,cAAc,CAAC,CAAC,CAAC;MAC3C,IAAI6B,eAAe,GAAG,IAAIP,YAAY,CAACF,YAAY,CAAC,CAACG,IAAI,CAAC,CAAC,CAAC;MAC5D,IAAIO,gBAAgB,GAAG,IAAIR,YAAY,CAACF,YAAY,CAAC,CAACG,IAAI,CAAC,CAAC,CAAC;MAE7D,KAAK,IAAIC,CAAC,GAAG7H,KAAK,EAAE6H,CAAC,GAAG5H,GAAG,EAAE4H,CAAC,EAAE,EAAE;QAC9B,IAAIC,UAAU,GAAG,CAACD,CAAC,GAAG7H,KAAK,IAAIyH,YAAY;QAC3C,IAAIW,WAAW,GAAGF,eAAe,CAACJ,UAAU,CAAC;QAC7CE,WAAW,CAACH,CAAC,CAAC,GAAIG,WAAW,CAACH,CAAC,CAAC,GAAGb,GAAG,GAAKoB,WAAW,GAAGrB,GAAI;QAC7DmB,eAAe,CAACJ,UAAU,CAAC,GAAIP,MAAM,GAAGa,WAAW,GAAIJ,WAAW,CAACH,CAAC,CAAC;QACrE,IAAIQ,YAAY,GAAGF,gBAAgB,CAACL,UAAU,CAAC;QAC/CG,YAAY,CAACJ,CAAC,CAAC,GAAII,YAAY,CAACJ,CAAC,CAAC,GAAGb,GAAG,GAAKqB,YAAY,GAAGtB,GAAI;QAChEoB,gBAAgB,CAACL,UAAU,CAAC,GAAIP,MAAM,GAAGc,YAAY,GAAIJ,YAAY,CAACJ,CAAC,CAAC;MAC5E;IACJ;IACA5D,OAAO,CAAC,0BAA0B,CAAC;IACnC,IAAIW,IAAI,GAAGrF,OAAO,CAACM,MAAM,CAAC;IAC1BU,QAAQ,CAAC,CAAC,CAAC,CAACuE,UAAU,CAACC,QAAQ,CAACH,IAAI,CAAC,CAACI,KAAK,CAAC9E,KAAK,IAAIE,OAAO,CAACF,KAAK,CAACA,KAAK,CAAC,CAAC;EAC9E,CAAC;EAGC,MAAMoI,eAAe,GAAGA,CAAA,KAAMrH,kBAAkB,CAAC,IAAI,CAAC;EACtD,MAAMsH,gBAAgB,GAAGA,CAAA,KAAMtH,kBAAkB,CAAC,KAAK,CAAC;EAExD,MAAMuH,MAAM,GAAGA,CAAA,KAAM;IACnB,IAAIjI,QAAQ,CAAC,CAAC,CAAC,CAAC6E,OAAO,CAACC,UAAU,CAAC,CAAC,CAACV,MAAM,IAAI,CAAC,EAAE;MAChDzE,KAAK,CAAC,6CAA6C,CAAC;MACpD;IACF;IAEA,IAAIL,MAAM,GAAGU,QAAQ,CAAC,CAAC,CAAC,CAACuE,UAAU,CAACQ,cAAc,CAAC,CAAC;IACpD,IAAI,CAACzF,MAAM,EAAE;IAEb,IAAI0F,KAAK,GAAGlG,KAAK,CAACkG,KAAK,CAAC1F,MAAM,CAAC;IAC/BD,WAAW,CAAC2F,KAAK,CAAC;IAElB,IAAIC,MAAM,GAAGjF,QAAQ,CAAC,CAAC,CAAC,CAAC6E,OAAO,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;IAChD,IAAII,UAAU,GAAG5F,MAAM,CAAC4F,UAAU;IAClC,IAAIzF,KAAK,GAAG+F,IAAI,CAACC,KAAK,CAACR,MAAM,CAACxF,KAAK,GAAGyF,UAAU,CAAC;IACjD,IAAIxF,GAAG,GAAG8F,IAAI,CAACE,IAAI,CAACT,MAAM,CAACvF,GAAG,GAAGwF,UAAU,CAAC;IAC5C,IAAIgD,UAAU,GAAGxI,GAAG,GAAGD,KAAK;IAE5B,IAAIgI,WAAW,GAAGnI,MAAM,CAACwG,cAAc,CAAC,CAAC,CAAC;IAC1C,IAAI4B,YAAY,GAAGpI,MAAM,CAACwG,cAAc,CAAC,CAAC,CAAC;IAC3C,IAAIqC,WAAW,GAAG,IAAIf,YAAY,CAACK,WAAW,CAACW,QAAQ,CAAC3I,KAAK,EAAEC,GAAG,CAAC,CAAC;IACpE,IAAI2I,YAAY,GAAG,IAAIjB,YAAY,CAACM,YAAY,CAACU,QAAQ,CAAC3I,KAAK,EAAEC,GAAG,CAAC,CAAC;IAEtE,MAAM4I,UAAU,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIhD,IAAI,CAACC,KAAK,CAAC+C,CAAC,GAAGtD,UAAU,CAAC,CAAC;IACxF,MAAMuD,SAAS,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;IAC9C,MAAMC,aAAa,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAACH,GAAG,CAACC,CAAC,IAAIhD,IAAI,CAACC,KAAK,CAAC+C,CAAC,GAAGtD,UAAU,CAAC,CAAC;IAC1E,MAAMyD,WAAW,GAAG9G,KAAK,IAAI,GAAG;IAChC,MAAM+G,QAAQ,GAAG7G,SAAS,IAAI,GAAG;IAEjC,MAAM8G,kBAAkB,GAAIC,OAAO,IAAK;MACpC,MAAMC,WAAW,GAAGT,UAAU,CAACC,GAAG,CAACxB,KAAK,IAAI,IAAIK,YAAY,CAACL,KAAK,CAAC,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC;MAC5E,IAAI2B,MAAM,GAAG,IAAI5B,YAAY,CAAC0B,OAAO,CAAC1E,MAAM,CAAC;MAE7C,KAAK,IAAIkD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwB,OAAO,CAAC1E,MAAM,EAAEkD,CAAC,EAAE,EAAE;QACrC,IAAIX,SAAS,GAAG,CAAC;QACjB,KAAK,IAAIsC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,WAAW,CAAC3E,MAAM,EAAE6E,CAAC,EAAE,EAAE;UACzC,MAAMlC,KAAK,GAAGgC,WAAW,CAACE,CAAC,CAAC;UAC5B,MAAM1B,UAAU,GAAGD,CAAC,GAAGP,KAAK,CAAC3C,MAAM;UACnC,MAAMoD,aAAa,GAAGT,KAAK,CAACQ,UAAU,CAAC;UACvCZ,SAAS,IAAIa,aAAa;UAC1BT,KAAK,CAACQ,UAAU,CAAC,GAAGuB,OAAO,CAACxB,CAAC,CAAC,GAAGE,aAAa,GAAGiB,SAAS,CAACQ,CAAC,CAAC,GAAGN,WAAW;QAC/E;QACAK,MAAM,CAAC1B,CAAC,CAAC,GAAGX,SAAS;MACzB;MACA,OAAOqC,MAAM;IACjB,CAAC;IAED,IAAIE,cAAc,GAAGL,kBAAkB,CAACV,WAAW,CAAC;IACpD,IAAIgB,eAAe,GAAGN,kBAAkB,CAACR,YAAY,CAAC;IAEtD,MAAMe,qBAAqB,GAAIN,OAAO,IAAK;MACvC,MAAMO,cAAc,GAAGX,aAAa,CAACH,GAAG,CAACxB,KAAK,IAAI,IAAIK,YAAY,CAACL,KAAK,CAAC,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC;MAElF,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwB,OAAO,CAAC1E,MAAM,EAAEkD,CAAC,EAAE,EAAE;QACrC,KAAK,IAAIgC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,cAAc,CAACjF,MAAM,EAAEkF,CAAC,EAAE,EAAE;UAC5C,MAAMvC,KAAK,GAAGsC,cAAc,CAACC,CAAC,CAAC;UAC/B,MAAM/B,UAAU,GAAGD,CAAC,GAAGP,KAAK,CAAC3C,MAAM;UACnC,MAAMoD,aAAa,GAAGT,KAAK,CAACQ,UAAU,CAAC;UAEvC,MAAMgC,aAAa,GAAG,CAAC,GAAG,GAAGT,OAAO,CAACxB,CAAC,CAAC,GAAGE,aAAa,GAAG,GAAG,GAAGsB,OAAO,CAACxB,CAAC,CAAC;UAC1EP,KAAK,CAACQ,UAAU,CAAC,GAAGuB,OAAO,CAACxB,CAAC,CAAC,GAAGE,aAAa,GAAG,GAAG;UACpDsB,OAAO,CAACxB,CAAC,CAAC,GAAGiC,aAAa;QAC9B;MACJ;MACA,OAAOT,OAAO;IAClB,CAAC;IAED,IAAIU,iBAAiB,GAAGJ,qBAAqB,CAACF,cAAc,CAAC;IAC7D,IAAIO,kBAAkB,GAAGL,qBAAqB,CAACD,eAAe,CAAC;IAE/D,KAAK,IAAI7B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGY,UAAU,EAAEZ,CAAC,EAAE,EAAE;MACjCG,WAAW,CAAChI,KAAK,GAAG6H,CAAC,CAAC,GAAI,CAAC,CAAC,GAAGsB,QAAQ,IAAIT,WAAW,CAACb,CAAC,CAAC,GAAKsB,QAAQ,GAAGY,iBAAiB,CAAClC,CAAC,CAAE;MAC9FI,YAAY,CAACjI,KAAK,GAAG6H,CAAC,CAAC,GAAI,CAAC,CAAC,GAAGsB,QAAQ,IAAIP,YAAY,CAACf,CAAC,CAAC,GAAKsB,QAAQ,GAAGa,kBAAkB,CAACnC,CAAC,CAAE;IACrG;IAEA5D,OAAO,CAAC,0BAA0B,CAAC;IACnC,IAAIW,IAAI,GAAGrF,OAAO,CAACM,MAAM,CAAC;IAC1BU,QAAQ,CAAC,CAAC,CAAC,CAACuE,UAAU,CAACC,QAAQ,CAACH,IAAI,CAAC,CAACI,KAAK,CAAC9E,KAAK,IAAIE,OAAO,CAAC6E,GAAG,CAAC/E,KAAK,CAAC,CAAC;EAC5E,CAAC;EAEC,MAAM+J,cAAc,GAAGA,CAAA,KAAM9I,gBAAgB,CAAC,KAAK,CAAC;EACpD,MAAM+I,aAAa,GAAGA,CAAA,KAAM;IAC1B7I,WAAW,CAAC,IAAI,CAAC;IACjBF,gBAAgB,CAAC,IAAI,CAAC;EACxB,CAAC;EAED,MAAMgJ,GAAG,GAAGA,CAAA,KAAM;IAChB,IAAI5J,QAAQ,CAAC,CAAC,CAAC,CAAC6E,OAAO,CAACC,UAAU,CAAC,CAAC,CAACV,MAAM,KAAK,CAAC,EAAE;MACjD,IAAI9E,MAAM,GAAGU,QAAQ,CAAC,CAAC,CAAC,CAACuE,UAAU,CAACQ,cAAc,CAAC,CAAC;MACpD,IAAIC,KAAK,GAAGlG,KAAK,CAACkG,KAAK,CAAC1F,MAAM,CAAC;MAC/BD,WAAW,CAAC2F,KAAK,CAAC;MAClB,IAAIC,MAAM,GAAIjF,QAAQ,CAAC,CAAC,CAAC,CAAC6E,OAAO,CAACC,UAAU,CAAC,CAAC,CAAE,CAAC,CAAC;MAClD,IAAIlF,YAAY,GAAGJ,aAAa,CAACF,MAAM,EAAE2F,MAAM,CAACxF,KAAK,EAAEwF,MAAM,CAACvF,GAAG,CAAC;MAClEN,QAAQ,CAAC,CAAC,CAAC,GAAGQ,YAAY;MAC1B,IAAIiK,OAAO,GAAGrK,aAAa,CAACF,MAAM,EAAE,CAAC,EAAE2F,MAAM,CAACxF,KAAK,CAAC;MACpD,IAAIqK,OAAO,GAAGtK,aAAa,CAACF,MAAM,EAAE2F,MAAM,CAACvF,GAAG,EAAEJ,MAAM,CAACyK,QAAQ,CAAC;MAChE,IAAIC,MAAM,GAAGlL,KAAK,CAACmL,MAAM,CAACJ,OAAO,EAAEC,OAAO,CAAC;MAC3C,IAAIzF,IAAI,GAAGrF,OAAO,CAACgL,MAAM,CAAC;MAC1BhK,QAAQ,CAAC,CAAC,CAAC,CAACuE,UAAU,CAACC,QAAQ,CAACH,IAAI,CAAC,CAACI,KAAK,CAAC9E,KAAK,IAAIE,OAAO,CAAC6E,GAAG,CAAC/E,KAAK,CAAC,CAAC;MACxE+D,OAAO,CAAC,sBAAsB,CAAC;MAC/B;IACF,CAAC,MAAM;MACL/D,KAAK,CAAC,gCAAgC,CAAC;MACvC;IACF;EACF,CAAC;EAED,MAAMuK,IAAI,GAAGA,CAAA,KAAM;IACjB,IAAIlK,QAAQ,CAAC,CAAC,CAAC,CAAC6E,OAAO,CAACC,UAAU,CAAC,CAAC,CAACV,MAAM,KAAK,CAAC,EAAE;MACjD,IAAI9E,MAAM,GAAGU,QAAQ,CAAC,CAAC,CAAC,CAACuE,UAAU,CAACQ,cAAc,CAAC,CAAC;MACpD,IAAIC,KAAK,GAAGlG,KAAK,CAACkG,KAAK,CAAC1F,MAAM,CAAC;MAC/BD,WAAW,CAAC2F,KAAK,CAAC;MAClB,IAAIC,MAAM,GAAIjF,QAAQ,CAAC,CAAC,CAAC,CAAC6E,OAAO,CAACC,UAAU,CAAC,CAAC,CAAE,CAAC,CAAC;MAClD,IAAIlF,YAAY,GAAGJ,aAAa,CAACF,MAAM,EAAE2F,MAAM,CAACxF,KAAK,EAAEwF,MAAM,CAACvF,GAAG,CAAC;MAClEN,QAAQ,CAAC,CAAC,CAAC,GAAGQ,YAAY;MAC1B8D,OAAO,CAAC,yBAAyB,CAAC;MAClC;IACF,CAAC,MAAM;MACL/D,KAAK,CAAC,iCAAiC,CAAC;MACxC;IACF;EACF,CAAC;EAED,MAAMwK,KAAK,GAAGA,CAAA,KAAM;IAClB,IAAI/K,QAAQ,CAACgF,MAAM,IAAI,CAAC,EAAE;MACxB,IAAI9E,MAAM,GAAGU,QAAQ,CAAC,CAAC,CAAC,CAACuE,UAAU,CAACQ,cAAc,CAAC,CAAC;MACpD,IAAIC,KAAK,GAAGlG,KAAK,CAACkG,KAAK,CAAC1F,MAAM,CAAC;MAC/BD,WAAW,CAAC2F,KAAK,CAAC;MAClB,IAAIhF,QAAQ,CAAC,CAAC,CAAC,CAAC6E,OAAO,CAACC,UAAU,CAAC,CAAC,CAACV,MAAM,KAAK,CAAC,EAAE;QACjD,IAAIa,MAAM,GAAIjF,QAAQ,CAAC,CAAC,CAAC,CAAC6E,OAAO,CAACC,UAAU,CAAC,CAAC,CAAE,CAAC,CAAC;QAClD,IAAI+E,OAAO,GAAGrK,aAAa,CAACF,MAAM,EAAE,CAAC,EAAE2F,MAAM,CAACxF,KAAK,CAAC;QACpD,IAAIqK,OAAO,GAAGtK,aAAa,CAACF,MAAM,EAAE2F,MAAM,CAACvF,GAAG,EAAEJ,MAAM,CAACyK,QAAQ,CAAC;QAChE,IAAIC,MAAM,GAAGlL,KAAK,CAACmL,MAAM,CAACJ,OAAO,EAAEzK,QAAQ,CAAC,CAAC,CAAC,EAAE0K,OAAO,CAAC;QACxD,IAAIzF,IAAI,GAAGrF,OAAO,CAACgL,MAAM,CAAC;QAC1BhK,QAAQ,CAAC,CAAC,CAAC,CAACuE,UAAU,CAACC,QAAQ,CAACH,IAAI,CAAC,CAACI,KAAK,CAAC9E,KAAK,IAAIE,OAAO,CAAC6E,GAAG,CAAC/E,KAAK,CAAC,CAAC;QACxE+D,OAAO,CAAC,yBAAyB,CAAC;MACpC,CAAC,MAAM;QACL,IAAI0G,QAAQ,GAAGpK,QAAQ,CAAC,CAAC,CAAC,CAACuE,UAAU,CAAC8F,cAAc,CAAC,CAAC;QACtD,IAAIR,OAAO,GAAGrK,aAAa,CAACF,MAAM,EAAE,CAAC,EAAE8K,QAAQ,CAAC;QAChD,IAAIN,OAAO,GAAGtK,aAAa,CAACF,MAAM,EAAE8K,QAAQ,EAAE9K,MAAM,CAACyK,QAAQ,CAAC;QAC9D,IAAIC,MAAM,GAAGlL,KAAK,CAACmL,MAAM,CAACJ,OAAO,EAAEzK,QAAQ,CAAC,CAAC,CAAC,EAAE0K,OAAO,CAAC;QACxD,IAAIzF,IAAI,GAAGrF,OAAO,CAACgL,MAAM,CAAC;QAC1BhK,QAAQ,CAAC,CAAC,CAAC,CAACuE,UAAU,CAACC,QAAQ,CAACH,IAAI,CAAC,CAACI,KAAK,CAAC9E,KAAK,IAAIE,OAAO,CAAC6E,GAAG,CAAC/E,KAAK,CAAC,CAAC;QACxE+D,OAAO,CAAC,yBAAyB,CAAC;MACpC;IACF,CAAC,MAAM;MACL/D,KAAK,CAAC,mBAAmB,CAAC;MAC1B;IACF;EACF,CAAC;EAGD,oBACEd,OAAA;IAAKyL,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAE7B1L,OAAA,CAACF,cAAc;MAAC6L,QAAQ,EAAC,cAAc;MAACC,SAAS,EAAE;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAE3DhM,OAAA;MAAKyL,SAAS,EAAC,cAAc;MAAAC,QAAA,eAE3B1L,OAAA;QAAKyL,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC9B1L,OAAA;UAAQyL,SAAS,EAAC,uBAAuB;UAACQ,OAAO,EAAE/K,UAAW;UAAAwK,QAAA,EAAC;QAAI;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAG5EhM,OAAA;UAAQyL,SAAS,EAAC,mBAAmB;UAACQ,OAAO,EAAElG,OAAQ;UAAA2F,QAAA,EAAC;QAAuB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACxFhM,OAAA;UAAQyL,SAAS,EAAC,mBAAmB;UAACQ,OAAO,EAAE9E,MAAO;UAAAuE,QAAA,EAAC;QAAc;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC9EhM,OAAA;UAAQyL,SAAS,EAAC,mBAAmB;UAACQ,OAAO,EAAE1E,OAAQ;UAAAmE,QAAA,EAAC;QAAe;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAChFhM,OAAA;UAAQyL,SAAS,EAAC,mBAAmB;UAACQ,OAAO,EAAElB,GAAI;UAAAW,QAAA,EAAC;QAAU;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACvEhM,OAAA;UAAQyL,SAAS,EAAC,mBAAmB;UAACQ,OAAO,EAAEZ,IAAK;UAAAK,QAAA,EAAC;QAAW;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACzEhM,OAAA;UAAQyL,SAAS,EAAC,mBAAmB;UAACQ,OAAO,EAAEX,KAAM;UAAAI,QAAA,EAAC;QAAY;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAG3EhM,OAAA;UAAQyL,SAAS,EAAC,kBAAkB;UAACQ,OAAO,EAAE3G,IAAK;UAAAoG,QAAA,EAAC;QAAI;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACjEhM,OAAA;UAAQyL,SAAS,EAAC,kBAAkB;UAACQ,OAAO,EAAEnG,KAAM;UAAA4F,QAAA,EAAC;QAAK;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAGnEhM,OAAA;UAAQyL,SAAS,EAAC,uBAAuB;UAACQ,OAAO,EAAEnH,qBAAsB;UAAA4G,QAAA,EACtEhH,YAAY,GAAG,eAAe,GAAG;QAAe;UAAAmH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3C,CAAC,EAERtH,YAAY,iBACX1E,OAAA;UAAKyL,SAAS,EAAC,iBAAiB;UAAAC,QAAA,gBAE9B1L,OAAA;YAAQyL,SAAS,EAAC,kBAAkB;YAACQ,OAAO,EAAE1F,SAAU;YAAAmF,QAAA,EAAC;UAAS;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC3EhM,OAAA;YAAQyL,SAAS,EAAC,kBAAkB;YAACQ,OAAO,EAAE3F,MAAO;YAAAoF,QAAA,EAAC;UAAsB;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACrFhM,OAAA;YAAQyL,SAAS,EAAC,kBAAkB;YAACQ,OAAO,EAAEzF,aAAc;YAAAkF,QAAA,EAAC;UAAW;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACjFhM,OAAA;YAAQyL,SAAS,EAAC,kBAAkB;YAACQ,OAAO,EAAEjE,cAAe;YAAA0D,QAAA,EAAC;UAAY;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACnFhM,OAAA;YAAQyL,SAAS,EAAC,kBAAkB;YAACQ,OAAO,EAAEzE,mBAAoB;YAAAkE,QAAA,EAAC;UAAgB;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC5FhM,OAAA;YAAQyL,SAAS,EAAC,kBAAkB;YAACQ,OAAO,EAAE/C,eAAgB;YAAAwC,QAAA,EAAC;UAAY;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACpFhM,OAAA;YAAQyL,SAAS,EAAC,kBAAkB;YAACQ,OAAO,EAAEnB,aAAc;YAAAY,QAAA,EAAC;UAAiB;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpF,CACN,EAGA1K,eAAe,iBACdtB,OAAA,CAACkM,KAAK;UACJC,KAAK,EAAC,iBAAiB;UACvBC,KAAK,EAAE3F,cAAe;UACtB4F,OAAO,EAAE3F,UAAW;UAAAgF,QAAA,eAEpB1L,OAAA,CAACsM,MAAM;YACLC,EAAE,EAAC,OAAO;YACVC,GAAG,EAAE,CAAE;YACPC,GAAG,EAAE,GAAI;YACTC,IAAI,EAAE,IAAK;YACXnJ,KAAK,EAAErB,SAAU;YACjByK,QAAQ,EAAExK,YAAa;YACvByK,KAAK,EAAE,GAAG1K,SAAS;UAAI;YAAA2J,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxB;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG,CACR,EAGAxK,gBAAgB,iBACfxB,OAAA,CAACkM,KAAK;UACJC,KAAK,EAAC,gBAAgB;UACtBC,KAAK,EAAEnE,eAAgB;UACvBoE,OAAO,EAAEnE,KAAM;UAAAwD,QAAA,gBAEf1L,OAAA,CAACsM,MAAM;YAACC,EAAE,EAAC,QAAQ;YAACC,GAAG,EAAE,CAAE;YAACC,GAAG,EAAE,CAAE;YAACC,IAAI,EAAE,IAAK;YAACnJ,KAAK,EAAEnB,SAAU;YAACuK,QAAQ,EAAEtK,YAAa;YAACuK,KAAK,EAAE,GAAGxK,SAAS;UAAI;YAAAyJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACpHhM,OAAA,CAACsM,MAAM;YAACC,EAAE,EAAC,UAAU;YAACC,GAAG,EAAE,CAAE;YAACC,GAAG,EAAE,CAAE;YAACC,IAAI,EAAE,IAAK;YAACnJ,KAAK,EAAEjB,QAAS;YAACqK,QAAQ,EAAEpK,WAAY;YAACqK,KAAK,EAAE,aAAatK,QAAQ;UAAG;YAAAuJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAC5HhM,OAAA,CAACsM,MAAM;YAACC,EAAE,EAAC,MAAM;YAACC,GAAG,EAAE,CAAE;YAACC,GAAG,EAAE,CAAE;YAACC,IAAI,EAAE,IAAK;YAACnJ,KAAK,EAAEf,OAAQ;YAACmK,QAAQ,EAAElK,UAAW;YAACmK,KAAK,EAAE,QAAQpK,OAAO;UAAG;YAAAqJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAChHhM,OAAA,CAACsM,MAAM;YAACC,EAAE,EAAC,OAAO;YAACC,GAAG,EAAE,CAAE;YAACC,GAAG,EAAE,CAAE;YAACC,IAAI,EAAE,IAAK;YAACnJ,KAAK,EAAEb,OAAQ;YAACiK,QAAQ,EAAEhK,UAAW;YAACiK,KAAK,EAAE,QAAQlK,OAAO;UAAG;YAAAmJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5G,CACR,EAGAtK,qBAAqB,iBACpB1B,OAAA,CAACkM,KAAK;UACJC,KAAK,EAAC,kBAAkB;UACxBC,KAAK,EAAE3E,oBAAqB;UAC5B4E,OAAO,EAAE3E,OAAQ;UAAAgE,QAAA,eAEjB1L,OAAA,CAACsM,MAAM;YACLC,EAAE,EAAC,aAAa;YAChBC,GAAG,EAAE,CAAE;YACPC,GAAG,EAAE,GAAI;YACTC,IAAI,EAAE,IAAK;YACXnJ,KAAK,EAAEX,gBAAiB;YACxB+J,QAAQ,EAAE9J,mBAAoB;YAC9B+J,KAAK,EAAE,GAAGhK,gBAAgB;UAAI;YAAAiJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/B;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG,CACR,EAGApK,iBAAiB,iBAChB5B,OAAA,CAACkM,KAAK;UACJC,KAAK,EAAC,iBAAiB;UACvBC,KAAK,EAAEjD,gBAAiB;UACxBkD,OAAO,EAAEjD,MAAO;UAAAsC,QAAA,gBAEhB1L,OAAA,CAACsM,MAAM;YAACC,EAAE,EAAC,SAAS;YAACC,GAAG,EAAE,CAAE;YAACC,GAAG,EAAE,CAAE;YAACC,IAAI,EAAE,IAAK;YAACnJ,KAAK,EAAET,UAAW;YAAC6J,QAAQ,EAAE5J,aAAc;YAAC6J,KAAK,EAAE,SAAS9J,UAAU;UAAG;YAAA+I,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAC7HhM,OAAA,CAACsM,MAAM;YAACC,EAAE,EAAC,OAAO;YAACC,GAAG,EAAE,CAAE;YAACC,GAAG,EAAE,CAAE;YAACC,IAAI,EAAE,IAAK;YAACnJ,KAAK,EAAEP,KAAM;YAAC2J,QAAQ,EAAE1J,QAAS;YAAC2J,KAAK,EAAE,UAAU5J,KAAK;UAAG;YAAA6I,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAC7GhM,OAAA,CAACsM,MAAM;YAACC,EAAE,EAAC,MAAM;YAACC,GAAG,EAAE,CAAE;YAACC,GAAG,EAAE,CAAE;YAACC,IAAI,EAAE,IAAK;YAACnJ,KAAK,EAAEL,SAAU;YAACyJ,QAAQ,EAAExJ,YAAa;YAACyJ,KAAK,EAAE,QAAQ1J,SAAS;UAAG;YAAA2I,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjH,CACR,EAGAlK,eAAe,iBACd9B,OAAA,CAACkM,KAAK;UACJC,KAAK,EAAC,mBAAmB;UACzBC,KAAK,EAAEvB,cAAe;UACtBwB,OAAO,EAAEhH,SAAU;UAAAqG,QAAA,eAEnB1L,OAAA;YAAKyL,SAAS,EAAC,kBAAkB;YAAAC,QAAA,EAC9BmB,oBAAoB,CAACnD,GAAG,CAAC,CAACoD,IAAI,EAAEC,KAAK,kBACpC/M,OAAA,CAACsM,MAAM;cAELC,EAAE,EAAE,SAASQ,KAAK,EAAG;cACrBP,GAAG,EAAE,CAAC,EAAG;cACTC,GAAG,EAAE,EAAG;cACRC,IAAI,EAAE,GAAI;cACVnJ,KAAK,EAAEyJ,YAAY,CAACD,KAAK,CAAE;cAC3BJ,QAAQ,EAAGpJ,KAAK,IAAK0J,iBAAiB,CAACF,KAAK,EAAExJ,KAAK,CAAE;cACrDqJ,KAAK,EAAE,GAAGE,IAAI,QAAQE,YAAY,CAACD,KAAK,CAAC,KAAM;cAC/CG,QAAQ;YAAA,GARHJ,IAAI;cAAAjB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OASV,CACF;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CACR;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC5K,EAAA,CA9nBQH,IAAI;AAAAkM,EAAA,GAAJlM,IAAI;AA8nBZ;AAED,eAAeA,IAAI;AAAC,IAAAkM,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}