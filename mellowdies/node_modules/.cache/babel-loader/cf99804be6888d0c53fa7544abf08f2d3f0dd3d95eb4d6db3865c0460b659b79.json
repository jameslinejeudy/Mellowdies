{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\james\\\\Downloads\\\\Mellowdies\\\\mellowdies\\\\src\\\\Landingpage\\\\PlayButton.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport fastforward from '../images/icons/fast-forward.png';\nimport pause from '../images/icons/pause.png';\nimport play from '../images/icons/play.png';\nimport rewindstart from '../images/icons/startofmusic.png';\nimport backwards from '../images/icons/backwards.png';\nimport endofmusic from '../images/icons/endofmusic.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  container: {\n    height: '20%',\n    width: '75%',\n    display: 'flex',\n    flexDirection: 'row',\n    position: 'fixed',\n    right: '0px',\n    bottom: '0px',\n    alignItems: 'center',\n    boxShadow: '0px 0px 15px 5px rgba(255, 255, 255, 0.6)',\n    backgroundColor: 'rgba(255, 255, 255, 0.15)',\n    justifyContent: 'center'\n  },\n  button: {\n    background: 'none',\n    border: 'none',\n    padding: '10px',\n    cursor: 'pointer'\n  },\n  icon: {\n    width: '30px',\n    height: '30px'\n  }\n};\nfunction PlayButton({\n  wavesurferRefs,\n  isReady\n}) {\n  _s();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const applyToAllTracks = callback => {\n    wavesurferRefs.current.forEach(waveSurfer => callback(waveSurfer));\n  };\n  const togglePlayPause = () => {\n    applyToAllTracks(waveSurfer => waveSurfer.playPause());\n    setIsPlaying(prev => !prev);\n  };\n  const seekToPosition = position => {\n    applyToAllTracks(waveSurfer => waveSurfer.seekTo(position));\n  };\n  const skipTime = seconds => {\n    applyToAllTracks(waveSurfer => {\n      const currentTime = waveSurfer.getCurrentTime();\n      const duration = waveSurfer.getDuration();\n      const targetTime = Math.min(Math.max(currentTime + seconds, 0), duration);\n      waveSurfer.seekTo(targetTime / duration);\n    });\n  };\n  const buttonConfig = [{\n    action: () => seekToPosition(0),\n    icon: rewindstart,\n    alt: 'Rewind to Start'\n  }, {\n    action: () => skipTime(-5),\n    icon: backwards,\n    alt: 'Skip Backward 5 Seconds'\n  }, {\n    action: togglePlayPause,\n    icon: isPlaying ? pause : play,\n    alt: 'Play/Pause'\n  }, {\n    action: () => skipTime(5),\n    icon: fastforward,\n    alt: 'Skip Forward 5 Seconds'\n  }, {\n    action: () => seekToPosition(1),\n    icon: endofmusic,\n    alt: 'Fast Forward to End'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: buttonConfig.map(({\n      action,\n      icon,\n      alt\n    }, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: action,\n      style: styles.button,\n      disabled: !isReady,\n      \"aria-label\": alt,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: icon,\n        alt: alt,\n        style: styles.icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n_s(PlayButton, \"dxr5RgzQJlMZkbQdHY9iHZ+FF0w=\");\n_c = PlayButton;\nexport default PlayButton;\nvar _c;\n$RefreshReg$(_c, \"PlayButton\");","map":{"version":3,"names":["React","useState","fastforward","pause","play","rewindstart","backwards","endofmusic","jsxDEV","_jsxDEV","styles","container","height","width","display","flexDirection","position","right","bottom","alignItems","boxShadow","backgroundColor","justifyContent","button","background","border","padding","cursor","icon","PlayButton","wavesurferRefs","isReady","_s","isPlaying","setIsPlaying","applyToAllTracks","callback","current","forEach","waveSurfer","togglePlayPause","playPause","prev","seekToPosition","seekTo","skipTime","seconds","currentTime","getCurrentTime","duration","getDuration","targetTime","Math","min","max","buttonConfig","action","alt","style","children","map","index","onClick","disabled","src","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/james/Downloads/Mellowdies/mellowdies/src/Landingpage/PlayButton.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport fastforward from '../images/icons/fast-forward.png';  \r\nimport pause from '../images/icons/pause.png';  \r\nimport play from '../images/icons/play.png';  \r\nimport rewindstart from '../images/icons/startofmusic.png';  \r\nimport backwards from '../images/icons/backwards.png';  \r\nimport endofmusic from '../images/icons/endofmusic.png';  \r\n\r\nconst styles = {\r\n    container: {\r\n        height: '20%',\r\n        width: '75%',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        position: 'fixed',\r\n        right: '0px',\r\n        bottom: '0px',\r\n        alignItems: 'center',\r\n        boxShadow: '0px 0px 15px 5px rgba(255, 255, 255, 0.6)',\r\n        backgroundColor: 'rgba(255, 255, 255, 0.15)',\r\n        justifyContent: 'center',\r\n    },\r\n    button: {\r\n        background: 'none',\r\n        border: 'none',\r\n        padding: '10px',\r\n        cursor: 'pointer',\r\n    },\r\n    icon: {\r\n        width: '30px',\r\n        height: '30px',\r\n    },\r\n};\r\n\r\nfunction PlayButton({ wavesurferRefs, isReady }) {\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n    const applyToAllTracks = (callback) => {\r\n        wavesurferRefs.current.forEach((waveSurfer) => callback(waveSurfer));\r\n    };\r\n\r\n    const togglePlayPause = () => {\r\n        applyToAllTracks((waveSurfer) => waveSurfer.playPause());\r\n        setIsPlaying((prev) => !prev);\r\n    };\r\n\r\n    const seekToPosition = (position) => {\r\n        applyToAllTracks((waveSurfer) => waveSurfer.seekTo(position));\r\n    };\r\n\r\n    const skipTime = (seconds) => {\r\n        applyToAllTracks((waveSurfer) => {\r\n            const currentTime = waveSurfer.getCurrentTime();\r\n            const duration = waveSurfer.getDuration();\r\n            const targetTime = Math.min(Math.max(currentTime + seconds, 0), duration);\r\n            waveSurfer.seekTo(targetTime / duration);\r\n        });\r\n    };\r\n\r\n    const buttonConfig = [\r\n        { action: () => seekToPosition(0), icon: rewindstart, alt: 'Rewind to Start' },\r\n        { action: () => skipTime(-5), icon: backwards, alt: 'Skip Backward 5 Seconds' },\r\n        { action: togglePlayPause, icon: isPlaying ? pause : play, alt: 'Play/Pause' },\r\n        { action: () => skipTime(5), icon: fastforward, alt: 'Skip Forward 5 Seconds' },\r\n        { action: () => seekToPosition(1), icon: endofmusic, alt: 'Fast Forward to End' },\r\n    ];\r\n\r\n    return (\r\n        <div style={styles.container}>\r\n            {buttonConfig.map(({ action, icon, alt }, index) => (\r\n                <button\r\n                    key={index}\r\n                    onClick={action}\r\n                    style={styles.button}\r\n                    disabled={!isReady}\r\n                    aria-label={alt}\r\n                >\r\n                    <img src={icon} alt={alt} style={styles.icon} />\r\n                </button>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayButton;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}