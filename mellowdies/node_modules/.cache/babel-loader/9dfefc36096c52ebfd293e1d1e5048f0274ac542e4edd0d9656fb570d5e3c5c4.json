{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sergey Melyukov @smelukov\n*/\n\n\"use strict\";\n\nconst {\n  ReplaceSource\n} = require(\"webpack-sources\");\nconst Generator = require(\"../Generator\");\nconst InitFragment = require(\"../InitFragment\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").CssGeneratorExportsConvention} CssGeneratorExportsConvention */\n/** @typedef {import(\"../../declarations/WebpackOptions\").CssGeneratorLocalIdentName} CssGeneratorLocalIdentName */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../DependencyTemplate\").CssDependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../DependencyTemplate\").CssExportsData} CssExportsData */\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"../Generator\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n/** @typedef {import(\"../util/Hash\")} Hash */\n\nconst TYPES = new Set([\"css\"]);\nclass CssGenerator extends Generator {\n  /**\n   * @param {CssGeneratorExportsConvention | undefined} convention the convention of the exports name\n   * @param {CssGeneratorLocalIdentName | undefined} localIdentName css export local ident name\n   * @param {boolean} esModule whether to use ES modules syntax\n   */\n  constructor(convention, localIdentName, esModule) {\n    super();\n    /** @type {CssGeneratorExportsConvention | undefined} */\n    this.convention = convention;\n    /** @type {CssGeneratorLocalIdentName | undefined} */\n    this.localIdentName = localIdentName;\n    /** @type {boolean} */\n    this.esModule = esModule;\n  }\n\n  /**\n   * @param {NormalModule} module module for which the code should be generated\n   * @param {GenerateContext} generateContext context for generate\n   * @returns {Source} generated code\n   */\n  generate(module, generateContext) {\n    const originalSource = /** @type {Source} */module.originalSource();\n    const source = new ReplaceSource(originalSource);\n    /** @type {InitFragment[]} */\n    const initFragments = [];\n    /** @type {CssExportsData} */\n    const cssExportsData = {\n      esModule: this.esModule,\n      exports: new Map()\n    };\n    generateContext.runtimeRequirements.add(RuntimeGlobals.hasCssModules);\n    let chunkInitFragments;\n    /** @type {DependencyTemplateContext} */\n    const templateContext = {\n      runtimeTemplate: generateContext.runtimeTemplate,\n      dependencyTemplates: generateContext.dependencyTemplates,\n      moduleGraph: generateContext.moduleGraph,\n      chunkGraph: generateContext.chunkGraph,\n      module,\n      runtime: generateContext.runtime,\n      runtimeRequirements: generateContext.runtimeRequirements,\n      concatenationScope: generateContext.concatenationScope,\n      codeGenerationResults: generateContext.codeGenerationResults,\n      initFragments,\n      cssExportsData,\n      get chunkInitFragments() {\n        if (!chunkInitFragments) {\n          const data = generateContext.getData();\n          chunkInitFragments = data.get(\"chunkInitFragments\");\n          if (!chunkInitFragments) {\n            chunkInitFragments = [];\n            data.set(\"chunkInitFragments\", chunkInitFragments);\n          }\n        }\n        return chunkInitFragments;\n      }\n    };\n\n    /**\n     * @param {Dependency} dependency dependency\n     */\n    const handleDependency = dependency => {\n      const constructor = /** @type {new (...args: any[]) => Dependency} */\n      dependency.constructor;\n      const template = generateContext.dependencyTemplates.get(constructor);\n      if (!template) {\n        throw new Error(`No template for dependency: ${dependency.constructor.name}`);\n      }\n      template.apply(dependency, source, templateContext);\n    };\n    for (const dependency of module.dependencies) {\n      handleDependency(dependency);\n    }\n    if (module.presentationalDependencies !== undefined) {\n      for (const dependency of module.presentationalDependencies) {\n        handleDependency(dependency);\n      }\n    }\n    const data = generateContext.getData();\n    data.set(\"css-exports\", cssExportsData);\n    return InitFragment.addToSource(source, initFragments, generateContext);\n  }\n\n  /**\n   * @param {NormalModule} module fresh module\n   * @returns {Set<string>} available types (do not mutate)\n   */\n  getTypes(module) {\n    return TYPES;\n  }\n\n  /**\n   * @param {NormalModule} module the module\n   * @param {string=} type source type\n   * @returns {number} estimate size of the module\n   */\n  getSize(module, type) {\n    const originalSource = module.originalSource();\n    if (!originalSource) {\n      return 0;\n    }\n    return originalSource.size();\n  }\n\n  /**\n   * @param {Hash} hash hash that will be modified\n   * @param {UpdateHashContext} updateHashContext context for updating hash\n   */\n  updateHash(hash, {\n    module\n  }) {\n    hash.update(this.esModule.toString());\n  }\n}\nmodule.exports = CssGenerator;","map":{"version":3,"names":["ReplaceSource","require","Generator","InitFragment","RuntimeGlobals","TYPES","Set","CssGenerator","constructor","convention","localIdentName","esModule","generate","module","generateContext","originalSource","source","initFragments","cssExportsData","exports","Map","runtimeRequirements","add","hasCssModules","chunkInitFragments","templateContext","runtimeTemplate","dependencyTemplates","moduleGraph","chunkGraph","runtime","concatenationScope","codeGenerationResults","data","getData","get","set","handleDependency","dependency","template","Error","name","apply","dependencies","presentationalDependencies","undefined","addToSource","getTypes","getSize","type","size","updateHash","hash","update","toString"],"sources":["C:/Users/james/Downloads/Mellowdies/mellowdies/node_modules/webpack/lib/css/CssGenerator.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sergey Melyukov @smelukov\n*/\n\n\"use strict\";\n\nconst { ReplaceSource } = require(\"webpack-sources\");\nconst Generator = require(\"../Generator\");\nconst InitFragment = require(\"../InitFragment\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").CssGeneratorExportsConvention} CssGeneratorExportsConvention */\n/** @typedef {import(\"../../declarations/WebpackOptions\").CssGeneratorLocalIdentName} CssGeneratorLocalIdentName */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../DependencyTemplate\").CssDependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../DependencyTemplate\").CssExportsData} CssExportsData */\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"../Generator\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n/** @typedef {import(\"../util/Hash\")} Hash */\n\nconst TYPES = new Set([\"css\"]);\n\nclass CssGenerator extends Generator {\n\t/**\n\t * @param {CssGeneratorExportsConvention | undefined} convention the convention of the exports name\n\t * @param {CssGeneratorLocalIdentName | undefined} localIdentName css export local ident name\n\t * @param {boolean} esModule whether to use ES modules syntax\n\t */\n\tconstructor(convention, localIdentName, esModule) {\n\t\tsuper();\n\t\t/** @type {CssGeneratorExportsConvention | undefined} */\n\t\tthis.convention = convention;\n\t\t/** @type {CssGeneratorLocalIdentName | undefined} */\n\t\tthis.localIdentName = localIdentName;\n\t\t/** @type {boolean} */\n\t\tthis.esModule = esModule;\n\t}\n\n\t/**\n\t * @param {NormalModule} module module for which the code should be generated\n\t * @param {GenerateContext} generateContext context for generate\n\t * @returns {Source} generated code\n\t */\n\tgenerate(module, generateContext) {\n\t\tconst originalSource = /** @type {Source} */ (module.originalSource());\n\t\tconst source = new ReplaceSource(originalSource);\n\t\t/** @type {InitFragment[]} */\n\t\tconst initFragments = [];\n\t\t/** @type {CssExportsData} */\n\t\tconst cssExportsData = {\n\t\t\tesModule: this.esModule,\n\t\t\texports: new Map()\n\t\t};\n\n\t\tgenerateContext.runtimeRequirements.add(RuntimeGlobals.hasCssModules);\n\n\t\tlet chunkInitFragments;\n\t\t/** @type {DependencyTemplateContext} */\n\t\tconst templateContext = {\n\t\t\truntimeTemplate: generateContext.runtimeTemplate,\n\t\t\tdependencyTemplates: generateContext.dependencyTemplates,\n\t\t\tmoduleGraph: generateContext.moduleGraph,\n\t\t\tchunkGraph: generateContext.chunkGraph,\n\t\t\tmodule,\n\t\t\truntime: generateContext.runtime,\n\t\t\truntimeRequirements: generateContext.runtimeRequirements,\n\t\t\tconcatenationScope: generateContext.concatenationScope,\n\t\t\tcodeGenerationResults: generateContext.codeGenerationResults,\n\t\t\tinitFragments,\n\t\t\tcssExportsData,\n\t\t\tget chunkInitFragments() {\n\t\t\t\tif (!chunkInitFragments) {\n\t\t\t\t\tconst data = generateContext.getData();\n\t\t\t\t\tchunkInitFragments = data.get(\"chunkInitFragments\");\n\t\t\t\t\tif (!chunkInitFragments) {\n\t\t\t\t\t\tchunkInitFragments = [];\n\t\t\t\t\t\tdata.set(\"chunkInitFragments\", chunkInitFragments);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn chunkInitFragments;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * @param {Dependency} dependency dependency\n\t\t */\n\t\tconst handleDependency = dependency => {\n\t\t\tconst constructor = /** @type {new (...args: any[]) => Dependency} */ (\n\t\t\t\tdependency.constructor\n\t\t\t);\n\t\t\tconst template = generateContext.dependencyTemplates.get(constructor);\n\t\t\tif (!template) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`No template for dependency: ${dependency.constructor.name}`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\ttemplate.apply(dependency, source, templateContext);\n\t\t};\n\t\tfor (const dependency of module.dependencies) {\n\t\t\thandleDependency(dependency);\n\t\t}\n\t\tif (module.presentationalDependencies !== undefined) {\n\t\t\tfor (const dependency of module.presentationalDependencies) {\n\t\t\t\thandleDependency(dependency);\n\t\t\t}\n\t\t}\n\n\t\tconst data = generateContext.getData();\n\t\tdata.set(\"css-exports\", cssExportsData);\n\n\t\treturn InitFragment.addToSource(source, initFragments, generateContext);\n\t}\n\n\t/**\n\t * @param {NormalModule} module fresh module\n\t * @returns {Set<string>} available types (do not mutate)\n\t */\n\tgetTypes(module) {\n\t\treturn TYPES;\n\t}\n\n\t/**\n\t * @param {NormalModule} module the module\n\t * @param {string=} type source type\n\t * @returns {number} estimate size of the module\n\t */\n\tgetSize(module, type) {\n\t\tconst originalSource = module.originalSource();\n\n\t\tif (!originalSource) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn originalSource.size();\n\t}\n\n\t/**\n\t * @param {Hash} hash hash that will be modified\n\t * @param {UpdateHashContext} updateHashContext context for updating hash\n\t */\n\tupdateHash(hash, { module }) {\n\t\thash.update(this.esModule.toString());\n\t}\n}\n\nmodule.exports = CssGenerator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}