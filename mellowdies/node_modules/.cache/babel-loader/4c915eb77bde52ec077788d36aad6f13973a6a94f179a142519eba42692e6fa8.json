{"ast":null,"code":"function audioBufferToBlob(audioBuffer, type) {\n  const numberOfChannels = audioBuffer.numberOfChannels;\n  const sampleRate = audioBuffer.sampleRate;\n  const length = audioBuffer.length;\n  const interleaved = new Float32Array(length * numberOfChannels);\n  for (let channel = 0; channel < numberOfChannels; channel++) {\n    const channelData = audioBuffer.getChannelData(channel);\n    for (let i = 0; i < length; i++) {\n      interleaved[i * numberOfChannels + channel] = channelData[i];\n    }\n  }\n  const dataView = encodeWAV(interleaved, numberOfChannels, sampleRate);\n  const blob = new Blob([dataView], {\n    type: type\n  });\n  return blob;\n}\nfunction encodeWAV(samples, channels, sampleRate) {\n  const buffer = new ArrayBuffer(44 + samples.length * 2);\n  const view = new DataView(buffer);\n  writeString(view, 0, 'RIFF');\n  view.setUint32(4, 36 + samples.length * 2, true);\n  writeString(view, 8, 'WAVE');\n  writeString(view, 12, 'fmt ');\n  view.setUint32(16, 16, true);\n  view.setUint16(20, 1, true);\n  view.setUint16(22, channels, true);\n  view.setUint32(24, sampleRate, true);\n  view.setUint32(28, sampleRate * channels * 2, true);\n  view.setUint16(32, channels * 2, true);\n  view.setUint16(34, 16, true);\n  writeString(view, 36, 'data');\n  view.setUint32(40, samples.length * 2, true);\n  floatTo16BitPCM(view, 44, samples);\n  return view;\n}\nfunction floatTo16BitPCM(output, offset, input) {\n  for (let i = 0; i < input.length; i++, offset += 2) {\n    const s = Math.max(-1, Math.min(1, input[i]));\n    output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n  }\n}\nfunction writeString(view, offset, string) {\n  for (let i = 0; i < string.length; i++) {\n    view.setUint8(offset + i, string.charCodeAt(i));\n  }\n}\nmodule.exports = audioBufferToBlob;","map":{"version":3,"names":["audioBufferToBlob","audioBuffer","type","numberOfChannels","sampleRate","length","interleaved","Float32Array","channel","channelData","getChannelData","i","dataView","encodeWAV","blob","Blob","samples","channels","buffer","ArrayBuffer","view","DataView","writeString","setUint32","setUint16","floatTo16BitPCM","output","offset","input","s","Math","max","min","setInt16","string","setUint8","charCodeAt","module","exports"],"sources":["C:/Users/elect/Documents/CIS/4914/Mellowdies/mellowdies/node_modules/audiobuffer-to-blob/index.js"],"sourcesContent":["function audioBufferToBlob(audioBuffer, type) {\n  const numberOfChannels = audioBuffer.numberOfChannels;\n  const sampleRate = audioBuffer.sampleRate;\n  const length = audioBuffer.length;\n  const interleaved = new Float32Array(length * numberOfChannels);\n  for (let channel = 0; channel < numberOfChannels; channel++) {\n    const channelData = audioBuffer.getChannelData(channel);\n    for (let i = 0; i < length; i++) {\n      interleaved[i * numberOfChannels + channel] = channelData[i];\n    }\n  }\n  const dataView = encodeWAV(interleaved, numberOfChannels, sampleRate);\n  const blob = new Blob([dataView], { type: type });\n  return blob;\n}\n\nfunction encodeWAV(samples, channels, sampleRate) {\n  const buffer = new ArrayBuffer(44 + samples.length * 2);\n  const view = new DataView(buffer);\n  writeString(view, 0, 'RIFF');\n  view.setUint32(4, 36 + samples.length * 2, true);\n  writeString(view, 8, 'WAVE');\n  writeString(view, 12, 'fmt ');\n  view.setUint32(16, 16, true);\n  view.setUint16(20, 1, true);\n  view.setUint16(22, channels, true);\n  view.setUint32(24, sampleRate, true);\n  view.setUint32(28, sampleRate * channels * 2, true);\n  view.setUint16(32, channels * 2, true);\n  view.setUint16(34, 16, true);\n  writeString(view, 36, 'data');\n  view.setUint32(40, samples.length * 2, true);\n  floatTo16BitPCM(view, 44, samples);\n  return view;\n}\n\nfunction floatTo16BitPCM(output, offset, input) {\n  for (let i = 0; i < input.length; i++, offset += 2) {\n    const s = Math.max(-1, Math.min(1, input[i]));\n    output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n  }\n}\n\nfunction writeString(view, offset, string) {\n  for (let i = 0; i < string.length; i++) {\n    view.setUint8(offset + i, string.charCodeAt(i));\n  }\n}\n\nmodule.exports = audioBufferToBlob;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}