{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst SortableSet = require(\"./SortableSet\");\n\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Entrypoint\").EntryOptions} EntryOptions */\n\n/** @typedef {string | SortableSet<string> | undefined} RuntimeSpec */\n/** @typedef {RuntimeSpec | boolean} RuntimeCondition */\n\n/**\n * @param {Compilation} compilation the compilation\n * @param {string} name name of the entry\n * @param {EntryOptions=} options optionally already received entry options\n * @returns {RuntimeSpec} runtime\n */\nmodule.exports.getEntryRuntime = (compilation, name, options) => {\n  let dependOn;\n  let runtime;\n  if (options) {\n    ({\n      dependOn,\n      runtime\n    } = options);\n  } else {\n    const entry = compilation.entries.get(name);\n    if (!entry) return name;\n    ({\n      dependOn,\n      runtime\n    } = entry.options);\n  }\n  if (dependOn) {\n    /** @type {RuntimeSpec} */\n    let result;\n    const queue = new Set(dependOn);\n    for (const name of queue) {\n      const dep = compilation.entries.get(name);\n      if (!dep) continue;\n      const {\n        dependOn,\n        runtime\n      } = dep.options;\n      if (dependOn) {\n        for (const name of dependOn) {\n          queue.add(name);\n        }\n      } else {\n        result = mergeRuntimeOwned(result, runtime || name);\n      }\n    }\n    return result || name;\n  }\n  return runtime || name;\n};\n\n/**\n * @param {RuntimeSpec} runtime runtime\n * @param {function(string | undefined): void} fn functor\n * @param {boolean} deterministicOrder enforce a deterministic order\n * @returns {void}\n */\nconst forEachRuntime = (runtime, fn, deterministicOrder = false) => {\n  if (runtime === undefined) {\n    fn(undefined);\n  } else if (typeof runtime === \"string\") {\n    fn(runtime);\n  } else {\n    if (deterministicOrder) runtime.sort();\n    for (const r of runtime) {\n      fn(r);\n    }\n  }\n};\nmodule.exports.forEachRuntime = forEachRuntime;\n\n/**\n * @template T\n * @param {SortableSet<T>} set set\n * @returns {string} runtime key\n */\nconst getRuntimesKey = set => {\n  set.sort();\n  return Array.from(set).join(\"\\n\");\n};\n\n/**\n * @param {RuntimeSpec} runtime runtime(s)\n * @returns {string} key of runtimes\n */\nconst getRuntimeKey = runtime => {\n  if (runtime === undefined) return \"*\";\n  if (typeof runtime === \"string\") return runtime;\n  return runtime.getFromUnorderedCache(getRuntimesKey);\n};\nmodule.exports.getRuntimeKey = getRuntimeKey;\n\n/**\n * @param {string} key key of runtimes\n * @returns {RuntimeSpec} runtime(s)\n */\nconst keyToRuntime = key => {\n  if (key === \"*\") return;\n  const items = key.split(\"\\n\");\n  if (items.length === 1) return items[0];\n  return new SortableSet(items);\n};\nmodule.exports.keyToRuntime = keyToRuntime;\n\n/**\n * @template T\n * @param {SortableSet<T>} set set\n * @returns {string} runtime string\n */\nconst getRuntimesString = set => {\n  set.sort();\n  return Array.from(set).join(\"+\");\n};\n\n/**\n * @param {RuntimeSpec} runtime runtime(s)\n * @returns {string} readable version\n */\nconst runtimeToString = runtime => {\n  if (runtime === undefined) return \"*\";\n  if (typeof runtime === \"string\") return runtime;\n  return runtime.getFromUnorderedCache(getRuntimesString);\n};\nmodule.exports.runtimeToString = runtimeToString;\n\n/**\n * @param {RuntimeCondition} runtimeCondition runtime condition\n * @returns {string} readable version\n */\nmodule.exports.runtimeConditionToString = runtimeCondition => {\n  if (runtimeCondition === true) return \"true\";\n  if (runtimeCondition === false) return \"false\";\n  return runtimeToString(runtimeCondition);\n};\n\n/**\n * @param {RuntimeSpec} a first\n * @param {RuntimeSpec} b second\n * @returns {boolean} true, when they are equal\n */\nconst runtimeEqual = (a, b) => {\n  if (a === b) {\n    return true;\n  } else if (a === undefined || b === undefined || typeof a === \"string\" || typeof b === \"string\") {\n    return false;\n  } else if (a.size !== b.size) {\n    return false;\n  }\n  a.sort();\n  b.sort();\n  const aIt = a[Symbol.iterator]();\n  const bIt = b[Symbol.iterator]();\n  for (;;) {\n    const aV = aIt.next();\n    if (aV.done) return true;\n    const bV = bIt.next();\n    if (aV.value !== bV.value) return false;\n  }\n};\nmodule.exports.runtimeEqual = runtimeEqual;\n\n/**\n * @param {RuntimeSpec} a first\n * @param {RuntimeSpec} b second\n * @returns {-1|0|1} compare\n */\nmodule.exports.compareRuntime = (a, b) => {\n  if (a === b) {\n    return 0;\n  } else if (a === undefined) {\n    return -1;\n  } else if (b === undefined) {\n    return 1;\n  }\n  const aKey = getRuntimeKey(a);\n  const bKey = getRuntimeKey(b);\n  if (aKey < bKey) return -1;\n  if (aKey > bKey) return 1;\n  return 0;\n};\n\n/**\n * @param {RuntimeSpec} a first\n * @param {RuntimeSpec} b second\n * @returns {RuntimeSpec} merged\n */\nconst mergeRuntime = (a, b) => {\n  if (a === undefined) {\n    return b;\n  } else if (b === undefined) {\n    return a;\n  } else if (a === b) {\n    return a;\n  } else if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      const set = new SortableSet();\n      set.add(a);\n      set.add(b);\n      return set;\n    } else if (b.has(a)) {\n      return b;\n    }\n    const set = new SortableSet(b);\n    set.add(a);\n    return set;\n  }\n  if (typeof b === \"string\") {\n    if (a.has(b)) return a;\n    const set = new SortableSet(a);\n    set.add(b);\n    return set;\n  }\n  const set = new SortableSet(a);\n  for (const item of b) set.add(item);\n  if (set.size === a.size) return a;\n  return set;\n};\nmodule.exports.mergeRuntime = mergeRuntime;\n\n/**\n * @param {RuntimeCondition} a first\n * @param {RuntimeCondition} b second\n * @param {RuntimeSpec} runtime full runtime\n * @returns {RuntimeCondition} result\n */\nmodule.exports.mergeRuntimeCondition = (a, b, runtime) => {\n  if (a === false) return b;\n  if (b === false) return a;\n  if (a === true || b === true) return true;\n  const merged = mergeRuntime(a, b);\n  if (merged === undefined) return;\n  if (typeof merged === \"string\") {\n    if (typeof runtime === \"string\" && merged === runtime) return true;\n    return merged;\n  }\n  if (typeof runtime === \"string\" || runtime === undefined) return merged;\n  if (merged.size === runtime.size) return true;\n  return merged;\n};\n\n/**\n * @param {RuntimeSpec | true} a first\n * @param {RuntimeSpec | true} b second\n * @param {RuntimeSpec} runtime full runtime\n * @returns {RuntimeSpec | true} result\n */\nmodule.exports.mergeRuntimeConditionNonFalse = (a, b, runtime) => {\n  if (a === true || b === true) return true;\n  const merged = mergeRuntime(a, b);\n  if (merged === undefined) return;\n  if (typeof merged === \"string\") {\n    if (typeof runtime === \"string\" && merged === runtime) return true;\n    return merged;\n  }\n  if (typeof runtime === \"string\" || runtime === undefined) return merged;\n  if (merged.size === runtime.size) return true;\n  return merged;\n};\n\n/**\n * @param {RuntimeSpec} a first (may be modified)\n * @param {RuntimeSpec} b second\n * @returns {RuntimeSpec} merged\n */\nconst mergeRuntimeOwned = (a, b) => {\n  if (b === undefined) {\n    return a;\n  } else if (a === b) {\n    return a;\n  } else if (a === undefined) {\n    if (typeof b === \"string\") {\n      return b;\n    }\n    return new SortableSet(b);\n  } else if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      const set = new SortableSet();\n      set.add(a);\n      set.add(b);\n      return set;\n    }\n    const set = new SortableSet(b);\n    set.add(a);\n    return set;\n  }\n  if (typeof b === \"string\") {\n    a.add(b);\n    return a;\n  }\n  for (const item of b) a.add(item);\n  return a;\n};\nmodule.exports.mergeRuntimeOwned = mergeRuntimeOwned;\n\n/**\n * @param {RuntimeSpec} a first\n * @param {RuntimeSpec} b second\n * @returns {RuntimeSpec} merged\n */\nmodule.exports.intersectRuntime = (a, b) => {\n  if (a === undefined) {\n    return b;\n  } else if (b === undefined) {\n    return a;\n  } else if (a === b) {\n    return a;\n  } else if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      return;\n    } else if (b.has(a)) {\n      return a;\n    }\n    return;\n  }\n  if (typeof b === \"string\") {\n    if (a.has(b)) return b;\n    return;\n  }\n  const set = new SortableSet();\n  for (const item of b) {\n    if (a.has(item)) set.add(item);\n  }\n  if (set.size === 0) return;\n  if (set.size === 1) {\n    const [item] = set;\n    return item;\n  }\n  return set;\n};\n\n/**\n * @param {RuntimeSpec} a first\n * @param {RuntimeSpec} b second\n * @returns {RuntimeSpec} result\n */\nconst subtractRuntime = (a, b) => {\n  if (a === undefined) {\n    return;\n  } else if (b === undefined) {\n    return a;\n  } else if (a === b) {\n    return;\n  } else if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      return a;\n    } else if (b.has(a)) {\n      return;\n    }\n    return a;\n  }\n  if (typeof b === \"string\") {\n    if (!a.has(b)) return a;\n    if (a.size === 2) {\n      for (const item of a) {\n        if (item !== b) return item;\n      }\n    }\n    const set = new SortableSet(a);\n    set.delete(b);\n    return set;\n  }\n  const set = new SortableSet();\n  for (const item of a) {\n    if (!b.has(item)) set.add(item);\n  }\n  if (set.size === 0) return;\n  if (set.size === 1) {\n    const [item] = set;\n    return item;\n  }\n  return set;\n};\nmodule.exports.subtractRuntime = subtractRuntime;\n\n/**\n * @param {RuntimeCondition} a first\n * @param {RuntimeCondition} b second\n * @param {RuntimeSpec} runtime runtime\n * @returns {RuntimeCondition} result\n */\nmodule.exports.subtractRuntimeCondition = (a, b, runtime) => {\n  if (b === true) return false;\n  if (b === false) return a;\n  if (a === false) return false;\n  const result = subtractRuntime(a === true ? runtime : a, b);\n  return result === undefined ? false : result;\n};\n\n/**\n * @param {RuntimeSpec} runtime runtime\n * @param {function(RuntimeSpec=): boolean} filter filter function\n * @returns {boolean | RuntimeSpec} true/false if filter is constant for all runtimes, otherwise runtimes that are active\n */\nmodule.exports.filterRuntime = (runtime, filter) => {\n  if (runtime === undefined) return filter();\n  if (typeof runtime === \"string\") return filter(runtime);\n  let some = false;\n  let every = true;\n  let result;\n  for (const r of runtime) {\n    const v = filter(r);\n    if (v) {\n      some = true;\n      result = mergeRuntimeOwned(result, r);\n    } else {\n      every = false;\n    }\n  }\n  if (!some) return false;\n  if (every) return true;\n  return result;\n};\n\n/**\n * @template T\n * @typedef {Map<string, T>} RuntimeSpecMapInnerMap\n */\n\n/**\n * @template T\n */\nclass RuntimeSpecMap {\n  /**\n   * @param {RuntimeSpecMap<T>=} clone copy form this\n   */\n  constructor(clone) {\n    this._mode = clone ? clone._mode : 0; // 0 = empty, 1 = single entry, 2 = map\n    /** @type {RuntimeSpec} */\n    this._singleRuntime = clone ? clone._singleRuntime : undefined;\n    /** @type {T | undefined} */\n    this._singleValue = clone ? clone._singleValue : undefined;\n    /** @type {RuntimeSpecMapInnerMap<T> | undefined} */\n    this._map = clone && clone._map ? new Map(clone._map) : undefined;\n  }\n\n  /**\n   * @param {RuntimeSpec} runtime the runtimes\n   * @returns {T | undefined} value\n   */\n  get(runtime) {\n    switch (this._mode) {\n      case 0:\n        return;\n      case 1:\n        return runtimeEqual(this._singleRuntime, runtime) ? this._singleValue : undefined;\n      default:\n        return /** @type {RuntimeSpecMapInnerMap<T>} */this._map.get(getRuntimeKey(runtime));\n    }\n  }\n\n  /**\n   * @param {RuntimeSpec} runtime the runtimes\n   * @returns {boolean} true, when the runtime is stored\n   */\n  has(runtime) {\n    switch (this._mode) {\n      case 0:\n        return false;\n      case 1:\n        return runtimeEqual(this._singleRuntime, runtime);\n      default:\n        return /** @type {RuntimeSpecMapInnerMap<T>} */this._map.has(getRuntimeKey(runtime));\n    }\n  }\n\n  /**\n   * @param {RuntimeSpec} runtime the runtimes\n   * @param {T} value the value\n   */\n  set(runtime, value) {\n    switch (this._mode) {\n      case 0:\n        this._mode = 1;\n        this._singleRuntime = runtime;\n        this._singleValue = value;\n        break;\n      case 1:\n        if (runtimeEqual(this._singleRuntime, runtime)) {\n          this._singleValue = value;\n          break;\n        }\n        this._mode = 2;\n        this._map = new Map();\n        this._map.set(getRuntimeKey(this._singleRuntime), /** @type {T} */this._singleValue);\n        this._singleRuntime = undefined;\n        this._singleValue = undefined;\n      /* falls through */\n      default:\n        /** @type {RuntimeSpecMapInnerMap<T>} */\n        this._map.set(getRuntimeKey(runtime), value);\n    }\n  }\n\n  /**\n   * @param {RuntimeSpec} runtime the runtimes\n   * @param {() => TODO} computer function to compute the value\n   * @returns {TODO} true, when the runtime was deleted\n   */\n  provide(runtime, computer) {\n    switch (this._mode) {\n      case 0:\n        this._mode = 1;\n        this._singleRuntime = runtime;\n        return this._singleValue = computer();\n      case 1:\n        {\n          if (runtimeEqual(this._singleRuntime, runtime)) {\n            return /** @type {T} */this._singleValue;\n          }\n          this._mode = 2;\n          this._map = new Map();\n          this._map.set(getRuntimeKey(this._singleRuntime), /** @type {T} */this._singleValue);\n          this._singleRuntime = undefined;\n          this._singleValue = undefined;\n          const newValue = computer();\n          this._map.set(getRuntimeKey(runtime), newValue);\n          return newValue;\n        }\n      default:\n        {\n          const key = getRuntimeKey(runtime);\n          const value = /** @type {Map<string, T>} */this._map.get(key);\n          if (value !== undefined) return value;\n          const newValue = computer();\n          /** @type {Map<string, T>} */\n          this._map.set(key, newValue);\n          return newValue;\n        }\n    }\n  }\n\n  /**\n   * @param {RuntimeSpec} runtime the runtimes\n   */\n  delete(runtime) {\n    switch (this._mode) {\n      case 0:\n        return;\n      case 1:\n        if (runtimeEqual(this._singleRuntime, runtime)) {\n          this._mode = 0;\n          this._singleRuntime = undefined;\n          this._singleValue = undefined;\n        }\n        return;\n      default:\n        /** @type {RuntimeSpecMapInnerMap<T>} */\n        this._map.delete(getRuntimeKey(runtime));\n    }\n  }\n\n  /**\n   * @param {RuntimeSpec} runtime the runtimes\n   * @param {function(T | undefined): T} fn function to update the value\n   */\n  update(runtime, fn) {\n    switch (this._mode) {\n      case 0:\n        throw new Error(\"runtime passed to update must exist\");\n      case 1:\n        {\n          if (runtimeEqual(this._singleRuntime, runtime)) {\n            this._singleValue = fn(this._singleValue);\n            break;\n          }\n          const newValue = fn(undefined);\n          if (newValue !== undefined) {\n            this._mode = 2;\n            this._map = new Map();\n            this._map.set(getRuntimeKey(this._singleRuntime), /** @type {T} */this._singleValue);\n            this._singleRuntime = undefined;\n            this._singleValue = undefined;\n            this._map.set(getRuntimeKey(runtime), newValue);\n          }\n          break;\n        }\n      default:\n        {\n          const key = getRuntimeKey(runtime);\n          const oldValue = /** @type {Map<string, T>} */this._map.get(key);\n          const newValue = fn(oldValue);\n          if (newValue !== oldValue) /** @type {RuntimeSpecMapInnerMap<T>} */\n            this._map.set(key, newValue);\n        }\n    }\n  }\n  keys() {\n    switch (this._mode) {\n      case 0:\n        return [];\n      case 1:\n        return [this._singleRuntime];\n      default:\n        return Array.from(/** @type {RuntimeSpecMapInnerMap<T>} */\n        this._map.keys(), keyToRuntime);\n    }\n  }\n  values() {\n    switch (this._mode) {\n      case 0:\n        return [][Symbol.iterator]();\n      case 1:\n        return [(/** @type {T} */this._singleValue)][Symbol.iterator]();\n      default:\n        return /** @type {Map<string, T>} */this._map.values();\n    }\n  }\n  get size() {\n    if (/** @type {number} */this._mode <= 1) return this._mode;\n    return /** @type {Map<string, T>} */this._map.size;\n  }\n}\nmodule.exports.RuntimeSpecMap = RuntimeSpecMap;\nclass RuntimeSpecSet {\n  /**\n   * @param {Iterable<RuntimeSpec>=} iterable iterable\n   */\n  constructor(iterable) {\n    /** @type {Map<string, RuntimeSpec>} */\n    this._map = new Map();\n    if (iterable) {\n      for (const item of iterable) {\n        this.add(item);\n      }\n    }\n  }\n\n  /**\n   * @param {RuntimeSpec} runtime runtime\n   */\n  add(runtime) {\n    this._map.set(getRuntimeKey(runtime), runtime);\n  }\n\n  /**\n   * @param {RuntimeSpec} runtime runtime\n   * @returns {boolean} true, when the runtime exists\n   */\n  has(runtime) {\n    return this._map.has(getRuntimeKey(runtime));\n  }\n  [Symbol.iterator]() {\n    return this._map.values();\n  }\n  get size() {\n    return this._map.size;\n  }\n}\nmodule.exports.RuntimeSpecSet = RuntimeSpecSet;","map":{"version":3,"names":["SortableSet","require","module","exports","getEntryRuntime","compilation","name","options","dependOn","runtime","entry","entries","get","result","queue","Set","dep","add","mergeRuntimeOwned","forEachRuntime","fn","deterministicOrder","undefined","sort","r","getRuntimesKey","set","Array","from","join","getRuntimeKey","getFromUnorderedCache","keyToRuntime","key","items","split","length","getRuntimesString","runtimeToString","runtimeConditionToString","runtimeCondition","runtimeEqual","a","b","size","aIt","Symbol","iterator","bIt","aV","next","done","bV","value","compareRuntime","aKey","bKey","mergeRuntime","has","item","mergeRuntimeCondition","merged","mergeRuntimeConditionNonFalse","intersectRuntime","subtractRuntime","delete","subtractRuntimeCondition","filterRuntime","filter","some","every","v","RuntimeSpecMap","constructor","clone","_mode","_singleRuntime","_singleValue","_map","Map","provide","computer","newValue","update","Error","oldValue","keys","values","RuntimeSpecSet","iterable"],"sources":["C:/Users/james/Downloads/Mellowdies/mellowdies/node_modules/webpack/lib/util/runtime.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst SortableSet = require(\"./SortableSet\");\n\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Entrypoint\").EntryOptions} EntryOptions */\n\n/** @typedef {string | SortableSet<string> | undefined} RuntimeSpec */\n/** @typedef {RuntimeSpec | boolean} RuntimeCondition */\n\n/**\n * @param {Compilation} compilation the compilation\n * @param {string} name name of the entry\n * @param {EntryOptions=} options optionally already received entry options\n * @returns {RuntimeSpec} runtime\n */\nmodule.exports.getEntryRuntime = (compilation, name, options) => {\n\tlet dependOn;\n\tlet runtime;\n\tif (options) {\n\t\t({ dependOn, runtime } = options);\n\t} else {\n\t\tconst entry = compilation.entries.get(name);\n\t\tif (!entry) return name;\n\t\t({ dependOn, runtime } = entry.options);\n\t}\n\tif (dependOn) {\n\t\t/** @type {RuntimeSpec} */\n\t\tlet result;\n\t\tconst queue = new Set(dependOn);\n\t\tfor (const name of queue) {\n\t\t\tconst dep = compilation.entries.get(name);\n\t\t\tif (!dep) continue;\n\t\t\tconst { dependOn, runtime } = dep.options;\n\t\t\tif (dependOn) {\n\t\t\t\tfor (const name of dependOn) {\n\t\t\t\t\tqueue.add(name);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresult = mergeRuntimeOwned(result, runtime || name);\n\t\t\t}\n\t\t}\n\t\treturn result || name;\n\t}\n\treturn runtime || name;\n};\n\n/**\n * @param {RuntimeSpec} runtime runtime\n * @param {function(string | undefined): void} fn functor\n * @param {boolean} deterministicOrder enforce a deterministic order\n * @returns {void}\n */\nconst forEachRuntime = (runtime, fn, deterministicOrder = false) => {\n\tif (runtime === undefined) {\n\t\tfn(undefined);\n\t} else if (typeof runtime === \"string\") {\n\t\tfn(runtime);\n\t} else {\n\t\tif (deterministicOrder) runtime.sort();\n\t\tfor (const r of runtime) {\n\t\t\tfn(r);\n\t\t}\n\t}\n};\nmodule.exports.forEachRuntime = forEachRuntime;\n\n/**\n * @template T\n * @param {SortableSet<T>} set set\n * @returns {string} runtime key\n */\nconst getRuntimesKey = set => {\n\tset.sort();\n\treturn Array.from(set).join(\"\\n\");\n};\n\n/**\n * @param {RuntimeSpec} runtime runtime(s)\n * @returns {string} key of runtimes\n */\nconst getRuntimeKey = runtime => {\n\tif (runtime === undefined) return \"*\";\n\tif (typeof runtime === \"string\") return runtime;\n\treturn runtime.getFromUnorderedCache(getRuntimesKey);\n};\nmodule.exports.getRuntimeKey = getRuntimeKey;\n\n/**\n * @param {string} key key of runtimes\n * @returns {RuntimeSpec} runtime(s)\n */\nconst keyToRuntime = key => {\n\tif (key === \"*\") return;\n\tconst items = key.split(\"\\n\");\n\tif (items.length === 1) return items[0];\n\treturn new SortableSet(items);\n};\nmodule.exports.keyToRuntime = keyToRuntime;\n\n/**\n * @template T\n * @param {SortableSet<T>} set set\n * @returns {string} runtime string\n */\nconst getRuntimesString = set => {\n\tset.sort();\n\treturn Array.from(set).join(\"+\");\n};\n\n/**\n * @param {RuntimeSpec} runtime runtime(s)\n * @returns {string} readable version\n */\nconst runtimeToString = runtime => {\n\tif (runtime === undefined) return \"*\";\n\tif (typeof runtime === \"string\") return runtime;\n\treturn runtime.getFromUnorderedCache(getRuntimesString);\n};\nmodule.exports.runtimeToString = runtimeToString;\n\n/**\n * @param {RuntimeCondition} runtimeCondition runtime condition\n * @returns {string} readable version\n */\nmodule.exports.runtimeConditionToString = runtimeCondition => {\n\tif (runtimeCondition === true) return \"true\";\n\tif (runtimeCondition === false) return \"false\";\n\treturn runtimeToString(runtimeCondition);\n};\n\n/**\n * @param {RuntimeSpec} a first\n * @param {RuntimeSpec} b second\n * @returns {boolean} true, when they are equal\n */\nconst runtimeEqual = (a, b) => {\n\tif (a === b) {\n\t\treturn true;\n\t} else if (\n\t\ta === undefined ||\n\t\tb === undefined ||\n\t\ttypeof a === \"string\" ||\n\t\ttypeof b === \"string\"\n\t) {\n\t\treturn false;\n\t} else if (a.size !== b.size) {\n\t\treturn false;\n\t}\n\ta.sort();\n\tb.sort();\n\tconst aIt = a[Symbol.iterator]();\n\tconst bIt = b[Symbol.iterator]();\n\tfor (;;) {\n\t\tconst aV = aIt.next();\n\t\tif (aV.done) return true;\n\t\tconst bV = bIt.next();\n\t\tif (aV.value !== bV.value) return false;\n\t}\n};\nmodule.exports.runtimeEqual = runtimeEqual;\n\n/**\n * @param {RuntimeSpec} a first\n * @param {RuntimeSpec} b second\n * @returns {-1|0|1} compare\n */\nmodule.exports.compareRuntime = (a, b) => {\n\tif (a === b) {\n\t\treturn 0;\n\t} else if (a === undefined) {\n\t\treturn -1;\n\t} else if (b === undefined) {\n\t\treturn 1;\n\t}\n\tconst aKey = getRuntimeKey(a);\n\tconst bKey = getRuntimeKey(b);\n\tif (aKey < bKey) return -1;\n\tif (aKey > bKey) return 1;\n\treturn 0;\n};\n\n/**\n * @param {RuntimeSpec} a first\n * @param {RuntimeSpec} b second\n * @returns {RuntimeSpec} merged\n */\nconst mergeRuntime = (a, b) => {\n\tif (a === undefined) {\n\t\treturn b;\n\t} else if (b === undefined) {\n\t\treturn a;\n\t} else if (a === b) {\n\t\treturn a;\n\t} else if (typeof a === \"string\") {\n\t\tif (typeof b === \"string\") {\n\t\t\tconst set = new SortableSet();\n\t\t\tset.add(a);\n\t\t\tset.add(b);\n\t\t\treturn set;\n\t\t} else if (b.has(a)) {\n\t\t\treturn b;\n\t\t}\n\t\tconst set = new SortableSet(b);\n\t\tset.add(a);\n\t\treturn set;\n\t}\n\tif (typeof b === \"string\") {\n\t\tif (a.has(b)) return a;\n\t\tconst set = new SortableSet(a);\n\t\tset.add(b);\n\t\treturn set;\n\t}\n\tconst set = new SortableSet(a);\n\tfor (const item of b) set.add(item);\n\tif (set.size === a.size) return a;\n\treturn set;\n};\nmodule.exports.mergeRuntime = mergeRuntime;\n\n/**\n * @param {RuntimeCondition} a first\n * @param {RuntimeCondition} b second\n * @param {RuntimeSpec} runtime full runtime\n * @returns {RuntimeCondition} result\n */\nmodule.exports.mergeRuntimeCondition = (a, b, runtime) => {\n\tif (a === false) return b;\n\tif (b === false) return a;\n\tif (a === true || b === true) return true;\n\tconst merged = mergeRuntime(a, b);\n\tif (merged === undefined) return;\n\tif (typeof merged === \"string\") {\n\t\tif (typeof runtime === \"string\" && merged === runtime) return true;\n\t\treturn merged;\n\t}\n\tif (typeof runtime === \"string\" || runtime === undefined) return merged;\n\tif (merged.size === runtime.size) return true;\n\treturn merged;\n};\n\n/**\n * @param {RuntimeSpec | true} a first\n * @param {RuntimeSpec | true} b second\n * @param {RuntimeSpec} runtime full runtime\n * @returns {RuntimeSpec | true} result\n */\nmodule.exports.mergeRuntimeConditionNonFalse = (a, b, runtime) => {\n\tif (a === true || b === true) return true;\n\tconst merged = mergeRuntime(a, b);\n\tif (merged === undefined) return;\n\tif (typeof merged === \"string\") {\n\t\tif (typeof runtime === \"string\" && merged === runtime) return true;\n\t\treturn merged;\n\t}\n\tif (typeof runtime === \"string\" || runtime === undefined) return merged;\n\tif (merged.size === runtime.size) return true;\n\treturn merged;\n};\n\n/**\n * @param {RuntimeSpec} a first (may be modified)\n * @param {RuntimeSpec} b second\n * @returns {RuntimeSpec} merged\n */\nconst mergeRuntimeOwned = (a, b) => {\n\tif (b === undefined) {\n\t\treturn a;\n\t} else if (a === b) {\n\t\treturn a;\n\t} else if (a === undefined) {\n\t\tif (typeof b === \"string\") {\n\t\t\treturn b;\n\t\t}\n\t\treturn new SortableSet(b);\n\t} else if (typeof a === \"string\") {\n\t\tif (typeof b === \"string\") {\n\t\t\tconst set = new SortableSet();\n\t\t\tset.add(a);\n\t\t\tset.add(b);\n\t\t\treturn set;\n\t\t}\n\t\tconst set = new SortableSet(b);\n\t\tset.add(a);\n\t\treturn set;\n\t}\n\tif (typeof b === \"string\") {\n\t\ta.add(b);\n\t\treturn a;\n\t}\n\tfor (const item of b) a.add(item);\n\treturn a;\n};\nmodule.exports.mergeRuntimeOwned = mergeRuntimeOwned;\n\n/**\n * @param {RuntimeSpec} a first\n * @param {RuntimeSpec} b second\n * @returns {RuntimeSpec} merged\n */\nmodule.exports.intersectRuntime = (a, b) => {\n\tif (a === undefined) {\n\t\treturn b;\n\t} else if (b === undefined) {\n\t\treturn a;\n\t} else if (a === b) {\n\t\treturn a;\n\t} else if (typeof a === \"string\") {\n\t\tif (typeof b === \"string\") {\n\t\t\treturn;\n\t\t} else if (b.has(a)) {\n\t\t\treturn a;\n\t\t}\n\t\treturn;\n\t}\n\tif (typeof b === \"string\") {\n\t\tif (a.has(b)) return b;\n\t\treturn;\n\t}\n\tconst set = new SortableSet();\n\tfor (const item of b) {\n\t\tif (a.has(item)) set.add(item);\n\t}\n\tif (set.size === 0) return;\n\tif (set.size === 1) {\n\t\tconst [item] = set;\n\t\treturn item;\n\t}\n\treturn set;\n};\n\n/**\n * @param {RuntimeSpec} a first\n * @param {RuntimeSpec} b second\n * @returns {RuntimeSpec} result\n */\nconst subtractRuntime = (a, b) => {\n\tif (a === undefined) {\n\t\treturn;\n\t} else if (b === undefined) {\n\t\treturn a;\n\t} else if (a === b) {\n\t\treturn;\n\t} else if (typeof a === \"string\") {\n\t\tif (typeof b === \"string\") {\n\t\t\treturn a;\n\t\t} else if (b.has(a)) {\n\t\t\treturn;\n\t\t}\n\t\treturn a;\n\t}\n\tif (typeof b === \"string\") {\n\t\tif (!a.has(b)) return a;\n\t\tif (a.size === 2) {\n\t\t\tfor (const item of a) {\n\t\t\t\tif (item !== b) return item;\n\t\t\t}\n\t\t}\n\t\tconst set = new SortableSet(a);\n\t\tset.delete(b);\n\t\treturn set;\n\t}\n\tconst set = new SortableSet();\n\tfor (const item of a) {\n\t\tif (!b.has(item)) set.add(item);\n\t}\n\tif (set.size === 0) return;\n\tif (set.size === 1) {\n\t\tconst [item] = set;\n\t\treturn item;\n\t}\n\treturn set;\n};\nmodule.exports.subtractRuntime = subtractRuntime;\n\n/**\n * @param {RuntimeCondition} a first\n * @param {RuntimeCondition} b second\n * @param {RuntimeSpec} runtime runtime\n * @returns {RuntimeCondition} result\n */\nmodule.exports.subtractRuntimeCondition = (a, b, runtime) => {\n\tif (b === true) return false;\n\tif (b === false) return a;\n\tif (a === false) return false;\n\tconst result = subtractRuntime(a === true ? runtime : a, b);\n\treturn result === undefined ? false : result;\n};\n\n/**\n * @param {RuntimeSpec} runtime runtime\n * @param {function(RuntimeSpec=): boolean} filter filter function\n * @returns {boolean | RuntimeSpec} true/false if filter is constant for all runtimes, otherwise runtimes that are active\n */\nmodule.exports.filterRuntime = (runtime, filter) => {\n\tif (runtime === undefined) return filter();\n\tif (typeof runtime === \"string\") return filter(runtime);\n\tlet some = false;\n\tlet every = true;\n\tlet result;\n\tfor (const r of runtime) {\n\t\tconst v = filter(r);\n\t\tif (v) {\n\t\t\tsome = true;\n\t\t\tresult = mergeRuntimeOwned(result, r);\n\t\t} else {\n\t\t\tevery = false;\n\t\t}\n\t}\n\tif (!some) return false;\n\tif (every) return true;\n\treturn result;\n};\n\n/**\n * @template T\n * @typedef {Map<string, T>} RuntimeSpecMapInnerMap\n */\n\n/**\n * @template T\n */\nclass RuntimeSpecMap {\n\t/**\n\t * @param {RuntimeSpecMap<T>=} clone copy form this\n\t */\n\tconstructor(clone) {\n\t\tthis._mode = clone ? clone._mode : 0; // 0 = empty, 1 = single entry, 2 = map\n\t\t/** @type {RuntimeSpec} */\n\t\tthis._singleRuntime = clone ? clone._singleRuntime : undefined;\n\t\t/** @type {T | undefined} */\n\t\tthis._singleValue = clone ? clone._singleValue : undefined;\n\t\t/** @type {RuntimeSpecMapInnerMap<T> | undefined} */\n\t\tthis._map = clone && clone._map ? new Map(clone._map) : undefined;\n\t}\n\n\t/**\n\t * @param {RuntimeSpec} runtime the runtimes\n\t * @returns {T | undefined} value\n\t */\n\tget(runtime) {\n\t\tswitch (this._mode) {\n\t\t\tcase 0:\n\t\t\t\treturn;\n\t\t\tcase 1:\n\t\t\t\treturn runtimeEqual(this._singleRuntime, runtime)\n\t\t\t\t\t? this._singleValue\n\t\t\t\t\t: undefined;\n\t\t\tdefault:\n\t\t\t\treturn /** @type {RuntimeSpecMapInnerMap<T>} */ (this._map).get(\n\t\t\t\t\tgetRuntimeKey(runtime)\n\t\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @param {RuntimeSpec} runtime the runtimes\n\t * @returns {boolean} true, when the runtime is stored\n\t */\n\thas(runtime) {\n\t\tswitch (this._mode) {\n\t\t\tcase 0:\n\t\t\t\treturn false;\n\t\t\tcase 1:\n\t\t\t\treturn runtimeEqual(this._singleRuntime, runtime);\n\t\t\tdefault:\n\t\t\t\treturn /** @type {RuntimeSpecMapInnerMap<T>} */ (this._map).has(\n\t\t\t\t\tgetRuntimeKey(runtime)\n\t\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @param {RuntimeSpec} runtime the runtimes\n\t * @param {T} value the value\n\t */\n\tset(runtime, value) {\n\t\tswitch (this._mode) {\n\t\t\tcase 0:\n\t\t\t\tthis._mode = 1;\n\t\t\t\tthis._singleRuntime = runtime;\n\t\t\t\tthis._singleValue = value;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tif (runtimeEqual(this._singleRuntime, runtime)) {\n\t\t\t\t\tthis._singleValue = value;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis._mode = 2;\n\t\t\t\tthis._map = new Map();\n\t\t\t\tthis._map.set(\n\t\t\t\t\tgetRuntimeKey(this._singleRuntime),\n\t\t\t\t\t/** @type {T} */ (this._singleValue)\n\t\t\t\t);\n\t\t\t\tthis._singleRuntime = undefined;\n\t\t\t\tthis._singleValue = undefined;\n\t\t\t/* falls through */\n\t\t\tdefault:\n\t\t\t\t/** @type {RuntimeSpecMapInnerMap<T>} */\n\t\t\t\t(this._map).set(getRuntimeKey(runtime), value);\n\t\t}\n\t}\n\n\t/**\n\t * @param {RuntimeSpec} runtime the runtimes\n\t * @param {() => TODO} computer function to compute the value\n\t * @returns {TODO} true, when the runtime was deleted\n\t */\n\tprovide(runtime, computer) {\n\t\tswitch (this._mode) {\n\t\t\tcase 0:\n\t\t\t\tthis._mode = 1;\n\t\t\t\tthis._singleRuntime = runtime;\n\t\t\t\treturn (this._singleValue = computer());\n\t\t\tcase 1: {\n\t\t\t\tif (runtimeEqual(this._singleRuntime, runtime)) {\n\t\t\t\t\treturn /** @type {T} */ (this._singleValue);\n\t\t\t\t}\n\t\t\t\tthis._mode = 2;\n\t\t\t\tthis._map = new Map();\n\t\t\t\tthis._map.set(\n\t\t\t\t\tgetRuntimeKey(this._singleRuntime),\n\t\t\t\t\t/** @type {T} */ (this._singleValue)\n\t\t\t\t);\n\t\t\t\tthis._singleRuntime = undefined;\n\t\t\t\tthis._singleValue = undefined;\n\t\t\t\tconst newValue = computer();\n\t\t\t\tthis._map.set(getRuntimeKey(runtime), newValue);\n\t\t\t\treturn newValue;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tconst key = getRuntimeKey(runtime);\n\t\t\t\tconst value = /** @type {Map<string, T>} */ (this._map).get(key);\n\t\t\t\tif (value !== undefined) return value;\n\t\t\t\tconst newValue = computer();\n\t\t\t\t/** @type {Map<string, T>} */\n\t\t\t\t(this._map).set(key, newValue);\n\t\t\t\treturn newValue;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {RuntimeSpec} runtime the runtimes\n\t */\n\tdelete(runtime) {\n\t\tswitch (this._mode) {\n\t\t\tcase 0:\n\t\t\t\treturn;\n\t\t\tcase 1:\n\t\t\t\tif (runtimeEqual(this._singleRuntime, runtime)) {\n\t\t\t\t\tthis._mode = 0;\n\t\t\t\t\tthis._singleRuntime = undefined;\n\t\t\t\t\tthis._singleValue = undefined;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tdefault:\n\t\t\t\t/** @type {RuntimeSpecMapInnerMap<T>} */\n\t\t\t\t(this._map).delete(getRuntimeKey(runtime));\n\t\t}\n\t}\n\n\t/**\n\t * @param {RuntimeSpec} runtime the runtimes\n\t * @param {function(T | undefined): T} fn function to update the value\n\t */\n\tupdate(runtime, fn) {\n\t\tswitch (this._mode) {\n\t\t\tcase 0:\n\t\t\t\tthrow new Error(\"runtime passed to update must exist\");\n\t\t\tcase 1: {\n\t\t\t\tif (runtimeEqual(this._singleRuntime, runtime)) {\n\t\t\t\t\tthis._singleValue = fn(this._singleValue);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tconst newValue = fn(undefined);\n\t\t\t\tif (newValue !== undefined) {\n\t\t\t\t\tthis._mode = 2;\n\t\t\t\t\tthis._map = new Map();\n\t\t\t\t\tthis._map.set(\n\t\t\t\t\t\tgetRuntimeKey(this._singleRuntime),\n\t\t\t\t\t\t/** @type {T} */ (this._singleValue)\n\t\t\t\t\t);\n\t\t\t\t\tthis._singleRuntime = undefined;\n\t\t\t\t\tthis._singleValue = undefined;\n\t\t\t\t\tthis._map.set(getRuntimeKey(runtime), newValue);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tconst key = getRuntimeKey(runtime);\n\t\t\t\tconst oldValue = /** @type {Map<string, T>} */ (this._map).get(key);\n\t\t\t\tconst newValue = fn(oldValue);\n\t\t\t\tif (newValue !== oldValue)\n\t\t\t\t\t/** @type {RuntimeSpecMapInnerMap<T>} */\n\t\t\t\t\t(this._map).set(key, newValue);\n\t\t\t}\n\t\t}\n\t}\n\n\tkeys() {\n\t\tswitch (this._mode) {\n\t\t\tcase 0:\n\t\t\t\treturn [];\n\t\t\tcase 1:\n\t\t\t\treturn [this._singleRuntime];\n\t\t\tdefault:\n\t\t\t\treturn Array.from(\n\t\t\t\t\t/** @type {RuntimeSpecMapInnerMap<T>} */\n\t\t\t\t\t(this._map).keys(),\n\t\t\t\t\tkeyToRuntime\n\t\t\t\t);\n\t\t}\n\t}\n\n\tvalues() {\n\t\tswitch (this._mode) {\n\t\t\tcase 0:\n\t\t\t\treturn [][Symbol.iterator]();\n\t\t\tcase 1:\n\t\t\t\treturn [/** @type {T} */ (this._singleValue)][Symbol.iterator]();\n\t\t\tdefault:\n\t\t\t\treturn /** @type {Map<string, T>} */ (this._map).values();\n\t\t}\n\t}\n\n\tget size() {\n\t\tif (/** @type {number} */ (this._mode) <= 1) return this._mode;\n\t\treturn /** @type {Map<string, T>} */ (this._map).size;\n\t}\n}\n\nmodule.exports.RuntimeSpecMap = RuntimeSpecMap;\n\nclass RuntimeSpecSet {\n\t/**\n\t * @param {Iterable<RuntimeSpec>=} iterable iterable\n\t */\n\tconstructor(iterable) {\n\t\t/** @type {Map<string, RuntimeSpec>} */\n\t\tthis._map = new Map();\n\t\tif (iterable) {\n\t\t\tfor (const item of iterable) {\n\t\t\t\tthis.add(item);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {RuntimeSpec} runtime runtime\n\t */\n\tadd(runtime) {\n\t\tthis._map.set(getRuntimeKey(runtime), runtime);\n\t}\n\n\t/**\n\t * @param {RuntimeSpec} runtime runtime\n\t * @returns {boolean} true, when the runtime exists\n\t */\n\thas(runtime) {\n\t\treturn this._map.has(getRuntimeKey(runtime));\n\t}\n\n\t[Symbol.iterator]() {\n\t\treturn this._map.values();\n\t}\n\n\tget size() {\n\t\treturn this._map.size;\n\t}\n}\n\nmodule.exports.RuntimeSpecSet = RuntimeSpecSet;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}