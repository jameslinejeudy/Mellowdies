{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\james\\\\Downloads\\\\Mellowdies\\\\mellowdies\\\\src\\\\Exportpage\\\\Exportpage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport WaveSurfer from 'wavesurfer.js';\nimport PlayButton from './PlayButton.js'; // Import the PlayButton component\nimport './Exportpage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Exportpage() {\n  _s();\n  const location = useLocation();\n  const [mergedAudio, setMergedAudio] = useState(null);\n  const [isReady, setIsReady] = useState(false);\n  const [speed, setSpeed] = useState(1); // Default speed\n  const waveformRef = useRef(null);\n  const wavesurfer = useRef(null);\n  const wavesurferRefs = useRef([]); // Reference array to pass to PlayButton\n\n  // Initialize WaveSurfer when the audio is ready\n  useEffect(() => {\n    if (mergedAudio && waveformRef.current) {\n      wavesurfer.current = WaveSurfer.create({\n        container: waveformRef.current,\n        waveColor: '#000',\n        progressColor: '#000',\n        height: 100,\n        barWidth: 2,\n        barGap: 1,\n        cursorColor: 'transparent',\n        responsive: true,\n        normalize: true\n      });\n      wavesurfer.current.on('ready', () => {\n        setIsReady(true);\n        wavesurferRefs.current.push(wavesurfer.current); // Push the instance to the reference array\n      });\n      wavesurfer.current.load(mergedAudio); // Load the merged audio\n    }\n  }, [mergedAudio]);\n\n  // Ensure mergedAudio is set when location.state changes\n  useEffect(() => {\n    if (location.state && location.state.mergedAudio) {\n      setMergedAudio(location.state.mergedAudio);\n    }\n  }, [location.state]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pagebackground\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"circle-shape\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"waveform\",\n      ref: waveformRef,\n      className: \"waveform\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PlayButton, {\n      wavesurferRefs: wavesurferRefs,\n      setSpeed: setSpeed,\n      isReady: isReady,\n      speed: speed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n_s(Exportpage, \"Xyygbsz4+xR79Fr6AY5Xa0KxfhQ=\", false, function () {\n  return [useLocation];\n});\n_c = Exportpage;\nexport default Exportpage;\nvar _c;\n$RefreshReg$(_c, \"Exportpage\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useLocation","WaveSurfer","PlayButton","jsxDEV","_jsxDEV","Exportpage","_s","location","mergedAudio","setMergedAudio","isReady","setIsReady","speed","setSpeed","waveformRef","wavesurfer","wavesurferRefs","current","create","container","waveColor","progressColor","height","barWidth","barGap","cursorColor","responsive","normalize","on","push","load","state","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","ref","_c","$RefreshReg$"],"sources":["C:/Users/james/Downloads/Mellowdies/mellowdies/src/Exportpage/Exportpage.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport WaveSurfer from 'wavesurfer.js';\r\nimport PlayButton from './PlayButton.js'; // Import the PlayButton component\r\nimport './Exportpage.css';\r\n\r\nfunction Exportpage() {\r\n    const location = useLocation();\r\n    const [mergedAudio, setMergedAudio] = useState(null);\r\n    const [isReady, setIsReady] = useState(false);\r\n    const [speed, setSpeed] = useState(1); // Default speed\r\n    const waveformRef = useRef(null);\r\n    const wavesurfer = useRef(null);\r\n    const wavesurferRefs = useRef([]); // Reference array to pass to PlayButton\r\n\r\n    // Initialize WaveSurfer when the audio is ready\r\n    useEffect(() => {\r\n        if (mergedAudio && waveformRef.current) {\r\n            wavesurfer.current = WaveSurfer.create({\r\n                container: waveformRef.current,\r\n                waveColor: '#000',\r\n                progressColor: '#000',\r\n                height: 100,\r\n                barWidth: 2,\r\n                barGap: 1,\r\n                cursorColor: 'transparent',\r\n                responsive: true,\r\n                normalize: true,\r\n            });\r\n\r\n            wavesurfer.current.on('ready', () => {\r\n                setIsReady(true);\r\n                wavesurferRefs.current.push(wavesurfer.current); // Push the instance to the reference array\r\n            });\r\n\r\n            wavesurfer.current.load(mergedAudio); // Load the merged audio\r\n        }\r\n    }, [mergedAudio]);\r\n\r\n    // Ensure mergedAudio is set when location.state changes\r\n    useEffect(() => {\r\n        if (location.state && location.state.mergedAudio) {\r\n            setMergedAudio(location.state.mergedAudio);\r\n        }\r\n    }, [location.state]);\r\n\r\n    return (\r\n        <div className=\"pagebackground\">\r\n            {/* Circle-shaped image */}\r\n            <div className=\"circle-shape\"></div>\r\n\r\n            {/* Waveform container */}\r\n            <div id=\"waveform\" ref={waveformRef} className=\"waveform\"></div>\r\n\r\n            {/* Audio controls using PlayButton */}\r\n            <PlayButton\r\n                wavesurferRefs={wavesurferRefs}\r\n                setSpeed={setSpeed}\r\n                isReady={isReady}\r\n                speed={speed}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Exportpage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}