{"ast":null,"code":"/**\r\n * @module  string-to-arraybuffer\r\n */\n\n'use strict';\n\nvar atob = require('atob-lite');\nvar isBase64 = require('is-base64');\nmodule.exports = function stringToArrayBuffer(arg) {\n  if (typeof arg !== 'string') throw Error('Argument should be a string');\n\n  //valid data uri\n  if (/^data\\:/i.test(arg)) return decode(arg);\n\n  //base64\n  if (isBase64(arg)) arg = atob(arg);\n  return str2ab(arg);\n};\nfunction str2ab(str) {\n  var array = new Uint8Array(str.length);\n  for (var i = 0; i < str.length; i++) {\n    array[i] = str.charCodeAt(i);\n  }\n  return array.buffer;\n}\nfunction decode(uri) {\n  // strip newlines\n  uri = uri.replace(/\\r?\\n/g, '');\n\n  // split the URI up into the \"metadata\" and the \"data\" portions\n  var firstComma = uri.indexOf(',');\n  if (-1 === firstComma || firstComma <= 4) throw new TypeError('malformed data-URI');\n\n  // remove the \"data:\" scheme and parse the metadata\n  var meta = uri.substring(5, firstComma).split(';');\n  var base64 = false;\n  var charset = 'US-ASCII';\n  for (var i = 0; i < meta.length; i++) {\n    if ('base64' == meta[i]) {\n      base64 = true;\n    } else if (0 == meta[i].indexOf('charset=')) {\n      charset = meta[i].substring(8);\n    }\n  }\n\n  // get the encoded data portion and decode URI-encoded chars\n  var data = unescape(uri.substring(firstComma + 1));\n  if (base64) data = atob(data);\n  var abuf = str2ab(data);\n  abuf.type = meta[0] || 'text/plain';\n  abuf.charset = charset;\n  return abuf;\n}","map":{"version":3,"names":["atob","require","isBase64","module","exports","stringToArrayBuffer","arg","Error","test","decode","str2ab","str","array","Uint8Array","length","i","charCodeAt","buffer","uri","replace","firstComma","indexOf","TypeError","meta","substring","split","base64","charset","data","unescape","abuf","type"],"sources":["C:/Users/kevin/Desktop/School/Senior Project/Github Branch/Mellowdies/mellowdies/node_modules/string-to-arraybuffer/index.js"],"sourcesContent":["/**\r\n * @module  string-to-arraybuffer\r\n */\r\n\r\n'use strict'\r\n\r\nvar atob = require('atob-lite')\r\nvar isBase64 = require('is-base64')\r\n\r\nmodule.exports = function stringToArrayBuffer (arg) {\r\n\tif (typeof arg !== 'string') throw Error('Argument should be a string')\r\n\r\n\t//valid data uri\r\n\tif (/^data\\:/i.test(arg)) return decode(arg)\r\n\r\n\t//base64\r\n\tif (isBase64(arg)) arg = atob(arg)\r\n\r\n\treturn str2ab(arg)\r\n}\r\n\r\nfunction str2ab (str) {\r\n\tvar array = new Uint8Array(str.length);\r\n\tfor(var i = 0; i < str.length; i++) {\r\n\t\tarray[i] = str.charCodeAt(i);\r\n\t}\r\n\treturn array.buffer\r\n}\r\n\r\nfunction decode(uri) {\r\n\t// strip newlines\r\n\turi = uri.replace(/\\r?\\n/g, '');\r\n\r\n\t// split the URI up into the \"metadata\" and the \"data\" portions\r\n\tvar firstComma = uri.indexOf(',');\r\n\tif (-1 === firstComma || firstComma <= 4) throw new TypeError('malformed data-URI');\r\n\r\n\t// remove the \"data:\" scheme and parse the metadata\r\n\tvar meta = uri.substring(5, firstComma).split(';');\r\n\r\n\tvar base64 = false;\r\n\tvar charset = 'US-ASCII';\r\n\tfor (var i = 0; i < meta.length; i++) {\r\n\t\tif ('base64' == meta[i]) {\r\n\t\t\tbase64 = true;\r\n\t\t} else if (0 == meta[i].indexOf('charset=')) {\r\n\t\t\tcharset = meta[i].substring(8);\r\n\t\t}\r\n\t}\r\n\r\n\t// get the encoded data portion and decode URI-encoded chars\r\n\tvar data = unescape(uri.substring(firstComma + 1));\r\n\r\n\tif (base64) data = atob(data)\r\n\r\n\tvar abuf = str2ab(data)\r\n\r\n\tabuf.type = meta[0] || 'text/plain'\r\n\tabuf.charset = charset\r\n\r\n\treturn abuf\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,IAAI,GAAGC,OAAO,CAAC,WAAW,CAAC;AAC/B,IAAIC,QAAQ,GAAGD,OAAO,CAAC,WAAW,CAAC;AAEnCE,MAAM,CAACC,OAAO,GAAG,SAASC,mBAAmBA,CAAEC,GAAG,EAAE;EACnD,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE,MAAMC,KAAK,CAAC,6BAA6B,CAAC;;EAEvE;EACA,IAAI,UAAU,CAACC,IAAI,CAACF,GAAG,CAAC,EAAE,OAAOG,MAAM,CAACH,GAAG,CAAC;;EAE5C;EACA,IAAIJ,QAAQ,CAACI,GAAG,CAAC,EAAEA,GAAG,GAAGN,IAAI,CAACM,GAAG,CAAC;EAElC,OAAOI,MAAM,CAACJ,GAAG,CAAC;AACnB,CAAC;AAED,SAASI,MAAMA,CAAEC,GAAG,EAAE;EACrB,IAAIC,KAAK,GAAG,IAAIC,UAAU,CAACF,GAAG,CAACG,MAAM,CAAC;EACtC,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,GAAG,CAACG,MAAM,EAAEC,CAAC,EAAE,EAAE;IACnCH,KAAK,CAACG,CAAC,CAAC,GAAGJ,GAAG,CAACK,UAAU,CAACD,CAAC,CAAC;EAC7B;EACA,OAAOH,KAAK,CAACK,MAAM;AACpB;AAEA,SAASR,MAAMA,CAACS,GAAG,EAAE;EACpB;EACAA,GAAG,GAAGA,GAAG,CAACC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;;EAE/B;EACA,IAAIC,UAAU,GAAGF,GAAG,CAACG,OAAO,CAAC,GAAG,CAAC;EACjC,IAAI,CAAC,CAAC,KAAKD,UAAU,IAAIA,UAAU,IAAI,CAAC,EAAE,MAAM,IAAIE,SAAS,CAAC,oBAAoB,CAAC;;EAEnF;EACA,IAAIC,IAAI,GAAGL,GAAG,CAACM,SAAS,CAAC,CAAC,EAAEJ,UAAU,CAAC,CAACK,KAAK,CAAC,GAAG,CAAC;EAElD,IAAIC,MAAM,GAAG,KAAK;EAClB,IAAIC,OAAO,GAAG,UAAU;EACxB,KAAK,IAAIZ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGQ,IAAI,CAACT,MAAM,EAAEC,CAAC,EAAE,EAAE;IACrC,IAAI,QAAQ,IAAIQ,IAAI,CAACR,CAAC,CAAC,EAAE;MACxBW,MAAM,GAAG,IAAI;IACd,CAAC,MAAM,IAAI,CAAC,IAAIH,IAAI,CAACR,CAAC,CAAC,CAACM,OAAO,CAAC,UAAU,CAAC,EAAE;MAC5CM,OAAO,GAAGJ,IAAI,CAACR,CAAC,CAAC,CAACS,SAAS,CAAC,CAAC,CAAC;IAC/B;EACD;;EAEA;EACA,IAAII,IAAI,GAAGC,QAAQ,CAACX,GAAG,CAACM,SAAS,CAACJ,UAAU,GAAG,CAAC,CAAC,CAAC;EAElD,IAAIM,MAAM,EAAEE,IAAI,GAAG5B,IAAI,CAAC4B,IAAI,CAAC;EAE7B,IAAIE,IAAI,GAAGpB,MAAM,CAACkB,IAAI,CAAC;EAEvBE,IAAI,CAACC,IAAI,GAAGR,IAAI,CAAC,CAAC,CAAC,IAAI,YAAY;EACnCO,IAAI,CAACH,OAAO,GAAGA,OAAO;EAEtB,OAAOG,IAAI;AACZ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}