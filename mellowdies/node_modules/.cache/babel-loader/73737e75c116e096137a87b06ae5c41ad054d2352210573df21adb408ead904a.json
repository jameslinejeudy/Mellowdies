{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\james\\\\Downloads\\\\Mellowdies\\\\mellowdies\\\\src\\\\Landingpage\\\\Landingpage.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate at the top\nimport WaveSurfer from 'wavesurfer.js';\nimport RegionsPlugin from \"wavesurfer.js/dist/plugins/regions.js\";\nimport TimelinePlugin from 'wavesurfer.js/dist/plugins/timeline'; // Import the timeline plugin\nimport { useLocation } from 'react-router-dom';\nimport Sidebar from './Sidebar.js';\nimport './Landingpage.css';\nimport PlayButton from './PlayButton.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst waveSurferData = [];\nconst regions = RegionsPlugin.create();\nfunction Landingpage() {\n  _s();\n  const navigate = useNavigate(); // Define navigate using the useNavigate hook\n  const wavesurferRefs = useRef([]);\n  const containerRefs = useRef([]);\n  const musicbackgroundRef = useRef(null); // Ref for the music background container\n  const location = useLocation();\n  const {\n    audioFiles\n  } = location.state || {\n    audioFiles: []\n  };\n  const [isReady, setIsReady] = useState(false);\n  const [speed, setSpeed] = useState(1);\n  let longestDuration = 0; // Variable to track the longest track duration\n\n  const initializeWaveSurfer = () => {\n    wavesurferRefs.current = [];\n    if (audioFiles && audioFiles.length > 0) {\n      audioFiles.forEach((file, index) => {\n        const container = containerRefs.current[index];\n        if (!container) {\n          console.error(`Container for index ${index} not found`);\n          return;\n        }\n        const waveSurfer = WaveSurfer.create({\n          container: container,\n          // Safely use the container\n          waveColor: 'blue',\n          progressColor: '#00FFFF',\n          height: 75,\n          autoCenter: true,\n          interact: true,\n          backend: 'MediaElement',\n          cursorWidth: 2,\n          cursorColor: '#FF0000',\n          backgroundColor: 'rgba(255, 255, 255, 0)',\n          url: file.url,\n          minPxPerSec: 100,\n          // Adjust this for width control\n          plugins: [regions]\n        });\n        waveSurfer.on('ready', () => {\n          setIsReady(true);\n          const buffer = waveSurfer.getDecodedData();\n          console.log('buffer length : ', buffer.length);\n          console.log('buffer duration : ', buffer.duration);\n          console.log('buffer sampleRate : ', buffer.sampleRate);\n          console.log('buffer numberOfChannels : ', buffer.numberOfChannels);\n          const duration = waveSurfer.getDuration();\n          if (duration > longestDuration) {\n            longestDuration = duration; // Track the longest duration\n          }\n\n          // Add the timeline plugin only for the first track\n          if (index === 0) {\n            const timeline = TimelinePlugin.create({\n              insertPosition: 'beforebegin',\n              primaryColor: '#000',\n              secondaryColor: '#c0c0c0',\n              primaryFontColor: '#000',\n              secondaryFontColor: '#000',\n              secondaryLabelOpacity: 0.9,\n              timeInterval: 0.2,\n              primaryLabelInterval: 5,\n              secondaryLabelInterval: 1\n            });\n            waveSurfer.registerPlugin(timeline);\n          }\n        });\n        regions.on('region-created', region => {\n          regions.getRegions().forEach(r => {\n            if (r.id !== region.id) {\n              r.remove();\n            }\n          });\n        });\n        regions.on('region-clicked', (region, e) => {\n          e.stopPropagation();\n          region.remove();\n        });\n        regions.enableDragSelection({\n          color: 'rgba(245, 137, 5, 0.4)'\n        });\n        wavesurferRefs.current[index] = waveSurfer;\n        waveSurferData.push({\n          waveSurfer,\n          regions\n        });\n      });\n    }\n  };\n  const scheduleWaveSurferInitialization = () => {\n    setTimeout(() => initializeWaveSurfer(), 100); // Small delay\n  };\n  if (audioFiles && audioFiles.length > 0 && wavesurferRefs.current.length === 0) {\n    scheduleWaveSurferInitialization();\n  }\n  const mergeAudioFiles = async () => {\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    const buffers = await Promise.all(audioFiles.map(async file => {\n      const response = await fetch(file.url);\n      const arrayBuffer = await response.arrayBuffer();\n      return await audioContext.decodeAudioData(arrayBuffer);\n    }));\n\n    // Create an output buffer of the necessary length\n    const outputLength = buffers.reduce((sum, buffer) => sum + buffer.length, 0);\n    const outputBuffer = audioContext.createBuffer(buffers[0].numberOfChannels, outputLength, audioContext.sampleRate);\n\n    // Merge buffers into one output buffer\n    let offset = 0;\n    buffers.forEach(buffer => {\n      for (let channel = 0; channel < buffer.numberOfChannels; channel++) {\n        outputBuffer.getChannelData(channel).set(buffer.getChannelData(channel), offset);\n      }\n      offset += buffer.length;\n    });\n\n    // Convert buffer to audio blob\n    const mergedBlob = await bufferToWaveBlob(outputBuffer, audioContext.sampleRate);\n\n    // Pass mergedBlob to export page via navigation state\n    navigate('/Exportpage', {\n      state: {\n        mergedAudio: URL.createObjectURL(mergedBlob)\n      }\n    });\n  };\n  const bufferToWaveBlob = (buffer, sampleRate) => {\n    return new Promise(resolve => {\n      const worker = new Worker(URL.createObjectURL(new Blob([`\n                onmessage = function(e) {\n                    const buffer = e.data.buffer;\n                    const sampleRate = e.data.sampleRate;\n                    const interleaved = new Float32Array(buffer.numberOfChannels * buffer.length);\n                    for (let i = 0; i < buffer.numberOfChannels; i++) {\n                        interleaved.set(buffer.getChannelData(i), i * buffer.length);\n                    }\n                    const waveBlob = new Blob([interleaved], { type: 'audio/wav' });\n                    postMessage(waveBlob);\n                }\n            `])));\n      worker.onmessage = e => resolve(e.data);\n      worker.postMessage({\n        buffer,\n        sampleRate\n      });\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pagebackground\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"musicbackground\",\n      ref: musicbackgroundRef,\n      children: audioFiles.map((file, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"trackName\",\n          className: \"trackNameStyle\",\n          children: file.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"timeline\",\n          className: \"timelineStyle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"waveformStyle\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: el => containerRefs.current[index] = el,\n            style: {\n              width: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Sidebar, {\n      waveData: waveSurferData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }, this), audioFiles && audioFiles.length > 0 ? /*#__PURE__*/_jsxDEV(PlayButton, {\n      wavesurferRefs: wavesurferRefs,\n      setSpeed: setSpeed // Pass the setSpeed function\n      ,\n      isReady: isReady,\n      speed: speed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No audio tracks available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"exportButton\",\n      onClick: async () => {\n        await mergeAudioFiles(); // Wait for the audio merging to complete\n        navigate('/Exportpage'); // Navigate to the export page after merging\n      },\n      children: \"Export and Merge\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 9\n  }, this);\n}\n_s(Landingpage, \"SH9zidLp9DhBrgJGhmT5SlzK8pc=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Landingpage;\nexport default Landingpage;\nvar _c;\n$RefreshReg$(_c, \"Landingpage\");","map":{"version":3,"names":["React","useRef","useState","useNavigate","WaveSurfer","RegionsPlugin","TimelinePlugin","useLocation","Sidebar","PlayButton","jsxDEV","_jsxDEV","waveSurferData","regions","create","Landingpage","_s","navigate","wavesurferRefs","containerRefs","musicbackgroundRef","location","audioFiles","state","isReady","setIsReady","speed","setSpeed","longestDuration","initializeWaveSurfer","current","length","forEach","file","index","container","console","error","waveSurfer","waveColor","progressColor","height","autoCenter","interact","backend","cursorWidth","cursorColor","backgroundColor","url","minPxPerSec","plugins","on","buffer","getDecodedData","log","duration","sampleRate","numberOfChannels","getDuration","timeline","insertPosition","primaryColor","secondaryColor","primaryFontColor","secondaryFontColor","secondaryLabelOpacity","timeInterval","primaryLabelInterval","secondaryLabelInterval","registerPlugin","region","getRegions","r","id","remove","e","stopPropagation","enableDragSelection","color","push","scheduleWaveSurferInitialization","setTimeout","mergeAudioFiles","audioContext","window","AudioContext","webkitAudioContext","buffers","Promise","all","map","response","fetch","arrayBuffer","decodeAudioData","outputLength","reduce","sum","outputBuffer","createBuffer","offset","channel","getChannelData","set","mergedBlob","bufferToWaveBlob","mergedAudio","URL","createObjectURL","resolve","worker","Worker","Blob","onmessage","data","postMessage","className","children","ref","name","fileName","_jsxFileName","lineNumber","columnNumber","el","style","width","waveData","onClick","_c","$RefreshReg$"],"sources":["C:/Users/james/Downloads/Mellowdies/mellowdies/src/Landingpage/Landingpage.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';  // Import useNavigate at the top\r\nimport WaveSurfer from 'wavesurfer.js';\r\nimport RegionsPlugin from \"wavesurfer.js/dist/plugins/regions.js\";\r\nimport TimelinePlugin from 'wavesurfer.js/dist/plugins/timeline';  // Import the timeline plugin\r\nimport { useLocation } from 'react-router-dom';\r\nimport Sidebar from './Sidebar.js';\r\nimport './Landingpage.css';  \r\nimport PlayButton from './PlayButton.js';\r\n\r\n\r\n\r\nconst waveSurferData = [];\r\nconst regions = RegionsPlugin.create();\r\n\r\nfunction Landingpage() {\r\n    const navigate = useNavigate();  // Define navigate using the useNavigate hook\r\n    const wavesurferRefs = useRef([]);\r\n    const containerRefs = useRef([]);\r\n    const musicbackgroundRef = useRef(null);  // Ref for the music background container\r\n    const location = useLocation();\r\n    const { audioFiles } = location.state || { audioFiles: [] };\r\n    const [isReady, setIsReady] = useState(false);\r\n    const [speed, setSpeed] = useState(1);\r\n    let longestDuration = 0;  // Variable to track the longest track duration\r\n\r\n    const initializeWaveSurfer = () => {\r\n        wavesurferRefs.current = [];\r\n    \r\n        if (audioFiles && audioFiles.length > 0) {\r\n            audioFiles.forEach((file, index) => {\r\n                const container = containerRefs.current[index];\r\n                if (!container) {\r\n                    console.error(`Container for index ${index} not found`);\r\n                    return;\r\n                }\r\n    \r\n                const waveSurfer = WaveSurfer.create({\r\n                    container: container, // Safely use the container\r\n                    waveColor: 'blue',\r\n                    progressColor: '#00FFFF',\r\n                    height: 75,\r\n                    autoCenter: true,\r\n                    interact: true,\r\n                    backend: 'MediaElement',\r\n                    cursorWidth: 2,\r\n                    cursorColor: '#FF0000',\r\n                    backgroundColor: 'rgba(255, 255, 255, 0)',\r\n                    url:file.url,\r\n                    minPxPerSec: 100,  // Adjust this for width control\r\n                    plugins: [regions],\r\n                });\r\n    \r\n                waveSurfer.on('ready', () => {setIsReady(true);\r\n                    const buffer = waveSurfer.getDecodedData();\r\n        \r\n                    console.log('buffer length : ', buffer.length);\r\n                    console.log('buffer duration : ', buffer.duration);\r\n                    console.log('buffer sampleRate : ', buffer.sampleRate);\r\n                    console.log('buffer numberOfChannels : ', buffer.numberOfChannels);\r\n\r\n                    const duration = waveSurfer.getDuration();\r\n\r\n                    if (duration > longestDuration) {\r\n                        longestDuration = duration;  // Track the longest duration\r\n                    }\r\n\r\n                    // Add the timeline plugin only for the first track\r\n                    if (index === 0) {\r\n                        const timeline = TimelinePlugin.create({\r\n                            insertPosition: 'beforebegin',\r\n                            primaryColor: '#000',\r\n                            secondaryColor: '#c0c0c0',\r\n                            primaryFontColor: '#000',\r\n                            secondaryFontColor: '#000',\r\n                            secondaryLabelOpacity: 0.9,\r\n                            timeInterval: 0.2,\r\n                            primaryLabelInterval: 5,\r\n                            secondaryLabelInterval: 1,\r\n                        });\r\n\r\n                        waveSurfer.registerPlugin(timeline);\r\n                    }\r\n                });\r\n    \r\n                regions.on('region-created', (region) => {\r\n                    regions.getRegions().forEach((r) => {\r\n                        if (r.id !== region.id) {\r\n                            r.remove();\r\n                        }\r\n                    });\r\n                });\r\n\r\n                regions.on('region-clicked', (region, e) => {\r\n                    e.stopPropagation();\r\n                    region.remove();\r\n                });\r\n    \r\n                regions.enableDragSelection({\r\n                    color: 'rgba(245, 137, 5, 0.4)',\r\n                });\r\n    \r\n                wavesurferRefs.current[index] = waveSurfer;\r\n                waveSurferData.push({ waveSurfer, regions });\r\n                \r\n            });\r\n        }\r\n    };\r\n\r\n    const scheduleWaveSurferInitialization = () => {\r\n        setTimeout(() => initializeWaveSurfer(), 100); // Small delay\r\n    };\r\n\r\n    if (audioFiles && audioFiles.length > 0 && wavesurferRefs.current.length === 0) {\r\n        scheduleWaveSurferInitialization();\r\n    }\r\n\r\n    const mergeAudioFiles = async () => {\r\n        const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n        const buffers = await Promise.all(audioFiles.map(async (file) => {\r\n            const response = await fetch(file.url);\r\n            const arrayBuffer = await response.arrayBuffer();\r\n            return await audioContext.decodeAudioData(arrayBuffer);\r\n        }));\r\n\r\n        // Create an output buffer of the necessary length\r\n        const outputLength = buffers.reduce((sum, buffer) => sum + buffer.length, 0);\r\n        const outputBuffer = audioContext.createBuffer(\r\n            buffers[0].numberOfChannels,\r\n            outputLength,\r\n            audioContext.sampleRate\r\n        );\r\n\r\n        // Merge buffers into one output buffer\r\n        let offset = 0;\r\n        buffers.forEach((buffer) => {\r\n            for (let channel = 0; channel < buffer.numberOfChannels; channel++) {\r\n                outputBuffer.getChannelData(channel).set(buffer.getChannelData(channel), offset);\r\n            }\r\n            offset += buffer.length;\r\n        });\r\n\r\n        // Convert buffer to audio blob\r\n        const mergedBlob = await bufferToWaveBlob(outputBuffer, audioContext.sampleRate);\r\n\r\n        // Pass mergedBlob to export page via navigation state\r\n        navigate('/Exportpage', { state: { mergedAudio: URL.createObjectURL(mergedBlob) } });\r\n    };\r\n\r\n    const bufferToWaveBlob = (buffer, sampleRate) => {\r\n        return new Promise((resolve) => {\r\n            const worker = new Worker(URL.createObjectURL(new Blob([`\r\n                onmessage = function(e) {\r\n                    const buffer = e.data.buffer;\r\n                    const sampleRate = e.data.sampleRate;\r\n                    const interleaved = new Float32Array(buffer.numberOfChannels * buffer.length);\r\n                    for (let i = 0; i < buffer.numberOfChannels; i++) {\r\n                        interleaved.set(buffer.getChannelData(i), i * buffer.length);\r\n                    }\r\n                    const waveBlob = new Blob([interleaved], { type: 'audio/wav' });\r\n                    postMessage(waveBlob);\r\n                }\r\n            `])));\r\n            worker.onmessage = (e) => resolve(e.data);\r\n            worker.postMessage({ buffer, sampleRate });\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"pagebackground\">\r\n            <div\r\n                className=\"musicbackground\"\r\n                ref={musicbackgroundRef}\r\n            >\r\n                {audioFiles.map((file, index) => (\r\n                    <div>\r\n                        <div id=\"trackName\" className=\"trackNameStyle\">{file.name}</div>\r\n                        <div id=\"timeline\" className=\"timelineStyle\"></div>\r\n                        <div key={index} className=\"waveformStyle\">\r\n                            <div ref={el => containerRefs.current[index] = el} style={{ width: '100%' }}></div>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            <Sidebar waveData={waveSurferData}/>\r\n\r\n            {audioFiles && audioFiles.length > 0 ? (\r\n                <PlayButton\r\n                    wavesurferRefs={wavesurferRefs}\r\n                    setSpeed={setSpeed}  // Pass the setSpeed function\r\n                    isReady={isReady}\r\n                    speed={speed}\r\n                />\r\n            ) : (\r\n                <p>No audio tracks available.</p>\r\n            )}\r\n\r\n<button className=\"exportButton\" onClick={async () => {\r\n    await mergeAudioFiles();  // Wait for the audio merging to complete\r\n    navigate('/Exportpage');  // Navigate to the export page after merging\r\n}}>\r\n    Export and Merge\r\n</button>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Landingpage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}