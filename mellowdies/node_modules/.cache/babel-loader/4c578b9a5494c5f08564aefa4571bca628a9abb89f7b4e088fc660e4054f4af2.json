{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst {\n  UsageState\n} = require(\"../ExportsInfo\");\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst {\n  filterRuntime,\n  runtimeToString\n} = require(\"../util/runtime\");\nconst NullDependency = require(\"./NullDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Dependency\").RuntimeSpec} RuntimeSpec */\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../ModuleGraphConnection\").ConnectionState} ConnectionState */\n/** @typedef {import(\"../javascript/JavascriptParser\").Range} Range */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n/** @typedef {import(\"../util/Hash\")} Hash */\n\nclass PureExpressionDependency extends NullDependency {\n  /**\n   * @param {Range} range the source range\n   */\n  constructor(range) {\n    super();\n    this.range = range;\n    /** @type {Set<string> | false} */\n    this.usedByExports = false;\n  }\n\n  /**\n   * @param {ModuleGraph} moduleGraph module graph\n   * @param {RuntimeSpec} runtime current runtimes\n   * @returns {boolean | RuntimeSpec} runtime condition\n   */\n  _getRuntimeCondition(moduleGraph, runtime) {\n    const usedByExports = this.usedByExports;\n    if (usedByExports !== false) {\n      const selfModule = /** @type {Module} */\n      moduleGraph.getParentModule(this);\n      const exportsInfo = moduleGraph.getExportsInfo(selfModule);\n      const runtimeCondition = filterRuntime(runtime, runtime => {\n        for (const exportName of usedByExports) {\n          if (exportsInfo.getUsed(exportName, runtime) !== UsageState.Unused) {\n            return true;\n          }\n        }\n        return false;\n      });\n      return runtimeCondition;\n    }\n    return false;\n  }\n\n  /**\n   * Update the hash\n   * @param {Hash} hash hash to be updated\n   * @param {UpdateHashContext} context context\n   * @returns {void}\n   */\n  updateHash(hash, context) {\n    const runtimeCondition = this._getRuntimeCondition(context.chunkGraph.moduleGraph, context.runtime);\n    if (runtimeCondition === true) {\n      return;\n    } else if (runtimeCondition === false) {\n      hash.update(\"null\");\n    } else {\n      hash.update(`${runtimeToString(runtimeCondition)}|${runtimeToString(context.runtime)}`);\n    }\n    hash.update(String(this.range));\n  }\n\n  /**\n   * @param {ModuleGraph} moduleGraph the module graph\n   * @returns {ConnectionState} how this dependency connects the module to referencing modules\n   */\n  getModuleEvaluationSideEffectsState(moduleGraph) {\n    return false;\n  }\n\n  /**\n   * @param {ObjectSerializerContext} context context\n   */\n  serialize(context) {\n    const {\n      write\n    } = context;\n    write(this.range);\n    write(this.usedByExports);\n    super.serialize(context);\n  }\n\n  /**\n   * @param {ObjectDeserializerContext} context context\n   */\n  deserialize(context) {\n    const {\n      read\n    } = context;\n    this.range = read();\n    this.usedByExports = read();\n    super.deserialize(context);\n  }\n}\nmakeSerializable(PureExpressionDependency, \"webpack/lib/dependencies/PureExpressionDependency\");\nPureExpressionDependency.Template = class PureExpressionDependencyTemplate extends NullDependency.Template {\n  /**\n   * @param {Dependency} dependency the dependency for which the template should be applied\n   * @param {ReplaceSource} source the current replace source which can be modified\n   * @param {DependencyTemplateContext} templateContext the context object\n   * @returns {void}\n   */\n  apply(dependency, source, {\n    chunkGraph,\n    moduleGraph,\n    runtime,\n    runtimeTemplate,\n    runtimeRequirements\n  }) {\n    const dep = /** @type {PureExpressionDependency} */dependency;\n    const runtimeCondition = dep._getRuntimeCondition(moduleGraph, runtime);\n    if (runtimeCondition === true) {\n      // Do nothing\n    } else if (runtimeCondition === false) {\n      source.insert(dep.range[0], \"(/* unused pure expression or super */ null && (\");\n      source.insert(dep.range[1], \"))\");\n    } else {\n      const condition = runtimeTemplate.runtimeConditionExpression({\n        chunkGraph,\n        runtime,\n        runtimeCondition,\n        runtimeRequirements\n      });\n      source.insert(dep.range[0], `(/* runtime-dependent pure expression or super */ ${condition} ? (`);\n      source.insert(dep.range[1], \") : null)\");\n    }\n  }\n};\nmodule.exports = PureExpressionDependency;","map":{"version":3,"names":["UsageState","require","makeSerializable","filterRuntime","runtimeToString","NullDependency","PureExpressionDependency","constructor","range","usedByExports","_getRuntimeCondition","moduleGraph","runtime","selfModule","getParentModule","exportsInfo","getExportsInfo","runtimeCondition","exportName","getUsed","Unused","updateHash","hash","context","chunkGraph","update","String","getModuleEvaluationSideEffectsState","serialize","write","deserialize","read","Template","PureExpressionDependencyTemplate","apply","dependency","source","runtimeTemplate","runtimeRequirements","dep","insert","condition","runtimeConditionExpression","module","exports"],"sources":["C:/Users/james/Downloads/Mellowdies/mellowdies/node_modules/webpack/lib/dependencies/PureExpressionDependency.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { UsageState } = require(\"../ExportsInfo\");\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst { filterRuntime, runtimeToString } = require(\"../util/runtime\");\nconst NullDependency = require(\"./NullDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Dependency\").RuntimeSpec} RuntimeSpec */\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../ModuleGraphConnection\").ConnectionState} ConnectionState */\n/** @typedef {import(\"../javascript/JavascriptParser\").Range} Range */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n/** @typedef {import(\"../util/Hash\")} Hash */\n\nclass PureExpressionDependency extends NullDependency {\n\t/**\n\t * @param {Range} range the source range\n\t */\n\tconstructor(range) {\n\t\tsuper();\n\t\tthis.range = range;\n\t\t/** @type {Set<string> | false} */\n\t\tthis.usedByExports = false;\n\t}\n\n\t/**\n\t * @param {ModuleGraph} moduleGraph module graph\n\t * @param {RuntimeSpec} runtime current runtimes\n\t * @returns {boolean | RuntimeSpec} runtime condition\n\t */\n\t_getRuntimeCondition(moduleGraph, runtime) {\n\t\tconst usedByExports = this.usedByExports;\n\t\tif (usedByExports !== false) {\n\t\t\tconst selfModule =\n\t\t\t\t/** @type {Module} */\n\t\t\t\t(moduleGraph.getParentModule(this));\n\t\t\tconst exportsInfo = moduleGraph.getExportsInfo(selfModule);\n\t\t\tconst runtimeCondition = filterRuntime(runtime, runtime => {\n\t\t\t\tfor (const exportName of usedByExports) {\n\t\t\t\t\tif (exportsInfo.getUsed(exportName, runtime) !== UsageState.Unused) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t});\n\t\t\treturn runtimeCondition;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Update the hash\n\t * @param {Hash} hash hash to be updated\n\t * @param {UpdateHashContext} context context\n\t * @returns {void}\n\t */\n\tupdateHash(hash, context) {\n\t\tconst runtimeCondition = this._getRuntimeCondition(\n\t\t\tcontext.chunkGraph.moduleGraph,\n\t\t\tcontext.runtime\n\t\t);\n\t\tif (runtimeCondition === true) {\n\t\t\treturn;\n\t\t} else if (runtimeCondition === false) {\n\t\t\thash.update(\"null\");\n\t\t} else {\n\t\t\thash.update(\n\t\t\t\t`${runtimeToString(runtimeCondition)}|${runtimeToString(\n\t\t\t\t\tcontext.runtime\n\t\t\t\t)}`\n\t\t\t);\n\t\t}\n\t\thash.update(String(this.range));\n\t}\n\n\t/**\n\t * @param {ModuleGraph} moduleGraph the module graph\n\t * @returns {ConnectionState} how this dependency connects the module to referencing modules\n\t */\n\tgetModuleEvaluationSideEffectsState(moduleGraph) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * @param {ObjectSerializerContext} context context\n\t */\n\tserialize(context) {\n\t\tconst { write } = context;\n\t\twrite(this.range);\n\t\twrite(this.usedByExports);\n\t\tsuper.serialize(context);\n\t}\n\n\t/**\n\t * @param {ObjectDeserializerContext} context context\n\t */\n\tdeserialize(context) {\n\t\tconst { read } = context;\n\t\tthis.range = read();\n\t\tthis.usedByExports = read();\n\t\tsuper.deserialize(context);\n\t}\n}\n\nmakeSerializable(\n\tPureExpressionDependency,\n\t\"webpack/lib/dependencies/PureExpressionDependency\"\n);\n\nPureExpressionDependency.Template = class PureExpressionDependencyTemplate extends (\n\tNullDependency.Template\n) {\n\t/**\n\t * @param {Dependency} dependency the dependency for which the template should be applied\n\t * @param {ReplaceSource} source the current replace source which can be modified\n\t * @param {DependencyTemplateContext} templateContext the context object\n\t * @returns {void}\n\t */\n\tapply(\n\t\tdependency,\n\t\tsource,\n\t\t{ chunkGraph, moduleGraph, runtime, runtimeTemplate, runtimeRequirements }\n\t) {\n\t\tconst dep = /** @type {PureExpressionDependency} */ (dependency);\n\t\tconst runtimeCondition = dep._getRuntimeCondition(moduleGraph, runtime);\n\t\tif (runtimeCondition === true) {\n\t\t\t// Do nothing\n\t\t} else if (runtimeCondition === false) {\n\t\t\tsource.insert(\n\t\t\t\tdep.range[0],\n\t\t\t\t\"(/* unused pure expression or super */ null && (\"\n\t\t\t);\n\t\t\tsource.insert(dep.range[1], \"))\");\n\t\t} else {\n\t\t\tconst condition = runtimeTemplate.runtimeConditionExpression({\n\t\t\t\tchunkGraph,\n\t\t\t\truntime,\n\t\t\t\truntimeCondition,\n\t\t\t\truntimeRequirements\n\t\t\t});\n\t\t\tsource.insert(\n\t\t\t\tdep.range[0],\n\t\t\t\t`(/* runtime-dependent pure expression or super */ ${condition} ? (`\n\t\t\t);\n\t\t\tsource.insert(dep.range[1], \") : null)\");\n\t\t}\n\t}\n};\n\nmodule.exports = PureExpressionDependency;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}