{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst {\n  cssExportConvention\n} = require(\"../util/conventions\");\nconst createHash = require(\"../util/createHash\");\nconst {\n  makePathsRelative\n} = require(\"../util/identifier\");\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst NullDependency = require(\"./NullDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../../declarations/WebpackOptions\").CssGeneratorExportsConvention} CssGeneratorExportsConvention */\n/** @typedef {import(\"../../declarations/WebpackOptions\").CssGeneratorLocalIdentName} CssGeneratorLocalIdentName */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../CssModule\")} CssModule */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Dependency\").ExportsSpec} ExportsSpec */\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../DependencyTemplate\").CssDependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"../css/CssExportsGenerator\")} CssExportsGenerator */\n/** @typedef {import(\"../css/CssGenerator\")} CssGenerator */\n/** @typedef {import(\"../css/CssParser\").Range} Range */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n/** @typedef {import(\"../util/Hash\")} Hash */\n\n/**\n * @param {string} local css local\n * @param {CssModule} module module\n * @param {ChunkGraph} chunkGraph chunk graph\n * @param {RuntimeTemplate} runtimeTemplate runtime template\n * @returns {string} local ident\n */\nconst getLocalIdent = (local, module, chunkGraph, runtimeTemplate) => {\n  const localIdentName = /** @type {CssGenerator | CssExportsGenerator} */\n  module.generator.localIdentName;\n  const relativeResourcePath = makePathsRelative(/** @type {string} */module.context, module.resourceResolveData.path);\n  const {\n    hashFunction,\n    hashDigest,\n    hashDigestLength,\n    hashSalt,\n    uniqueName\n  } = runtimeTemplate.outputOptions;\n  const hash = createHash(hashFunction);\n  if (hashSalt) {\n    hash.update(hashSalt);\n  }\n  hash.update(relativeResourcePath);\n  if (!/\\[local\\]/.test(localIdentName)) {\n    hash.update(local);\n  }\n  const localIdentHash = /** @type {string} */hash.digest(hashDigest)\n  // Remove all leading digits\n  .replace(/^\\d+/, \"\")\n  // Replace all slashes with underscores (same as in base64url)\n  .replace(/\\//g, \"_\")\n  // Remove everything that is not an alphanumeric or underscore\n  .replace(/[^A-Za-z0-9_]+/g, \"_\").slice(0, hashDigestLength);\n  return runtimeTemplate.compilation.getPath(localIdentName, {\n    filename: relativeResourcePath,\n    hash: localIdentHash,\n    contentHash: localIdentHash,\n    chunkGraph,\n    module\n  }).replace(/\\[local\\]/g, local).replace(/\\[uniqueName\\]/g, uniqueName);\n};\nclass CssLocalIdentifierDependency extends NullDependency {\n  /**\n   * @param {string} name name\n   * @param {Range} range range\n   * @param {string=} prefix prefix\n   */\n  constructor(name, range, prefix = \"\") {\n    super();\n    this.name = name;\n    this.range = range;\n    this.prefix = prefix;\n  }\n  get type() {\n    return \"css local identifier\";\n  }\n\n  /**\n   * @param {string} name export name\n   * @param {CssGeneratorExportsConvention} convention convention of the export name\n   * @returns {string[]} convention results\n   */\n  getExportsConventionNames(name, convention) {\n    if (this._conventionNames) {\n      return this._conventionNames;\n    }\n    this._conventionNames = cssExportConvention(this.name, convention);\n    return this._conventionNames;\n  }\n\n  /**\n   * Returns the exported names\n   * @param {ModuleGraph} moduleGraph module graph\n   * @returns {ExportsSpec | undefined} export names\n   */\n  getExports(moduleGraph) {\n    const module = /** @type {CssModule} */moduleGraph.getParentModule(this);\n    const convention = /** @type {CssGenerator | CssExportsGenerator} */module.generator.convention;\n    const names = this.getExportsConventionNames(this.name, convention);\n    return {\n      exports: names.map(name => ({\n        name,\n        canMangle: true\n      })),\n      dependencies: undefined\n    };\n  }\n\n  /**\n   * Update the hash\n   * @param {Hash} hash hash to be updated\n   * @param {UpdateHashContext} context context\n   * @returns {void}\n   */\n  updateHash(hash, {\n    chunkGraph\n  }) {\n    const module = /** @type {CssModule} */\n    chunkGraph.moduleGraph.getParentModule(this);\n    const generator = /** @type {CssGenerator | CssExportsGenerator} */\n    module.generator;\n    const names = this.getExportsConventionNames(this.name, generator.convention);\n    hash.update(\"exportsConvention\");\n    hash.update(JSON.stringify(names));\n    hash.update(\"localIdentName\");\n    hash.update(generator.localIdentName);\n  }\n\n  /**\n   * @param {ObjectSerializerContext} context context\n   */\n  serialize(context) {\n    const {\n      write\n    } = context;\n    write(this.name);\n    write(this.range);\n    write(this.prefix);\n    super.serialize(context);\n  }\n\n  /**\n   * @param {ObjectDeserializerContext} context context\n   */\n  deserialize(context) {\n    const {\n      read\n    } = context;\n    this.name = read();\n    this.range = read();\n    this.prefix = read();\n    super.deserialize(context);\n  }\n}\n\n/**\n * @param {string} str string\n * @param {string | boolean} omitUnderscore true if you need to omit underscore\n * @returns {string} escaped css identifier\n */\nconst escapeCssIdentifier = (str, omitUnderscore) => {\n  const escaped = `${str}`.replace(\n  // cspell:word uffff\n  /[^a-zA-Z0-9_\\u0081-\\uFFFF-]/g, s => `\\\\${s}`);\n  return !omitUnderscore && /^(?!--)[0-9-]/.test(escaped) ? `_${escaped}` : escaped;\n};\nCssLocalIdentifierDependency.Template = class CssLocalIdentifierDependencyTemplate extends NullDependency.Template {\n  /**\n   * @param {Dependency} dependency the dependency for which the template should be applied\n   * @param {ReplaceSource} source the current replace source which can be modified\n   * @param {DependencyTemplateContext} templateContext the context object\n   * @returns {void}\n   */\n  apply(dependency, source, {\n    module: m,\n    moduleGraph,\n    chunkGraph,\n    runtime,\n    runtimeTemplate,\n    cssExportsData\n  }) {\n    const dep = /** @type {CssLocalIdentifierDependency} */dependency;\n    const module = /** @type {CssModule} */m;\n    const convention = /** @type {CssGenerator | CssExportsGenerator} */module.generator.convention;\n    const names = dep.getExportsConventionNames(dep.name, convention);\n    const usedNames = /** @type {string[]} */\n    names.map(name => moduleGraph.getExportInfo(module, name).getUsedName(name, runtime)).filter(Boolean);\n    if (usedNames.length === 0) return;\n\n    // use the first usedName to generate localIdent, it's shorter when mangle exports enabled\n    const localIdent = dep.prefix + getLocalIdent(usedNames[0], module, chunkGraph, runtimeTemplate);\n    source.replace(dep.range[0], dep.range[1] - 1, escapeCssIdentifier(localIdent, dep.prefix));\n    for (const used of usedNames) {\n      cssExportsData.exports.set(used, localIdent);\n    }\n  }\n};\nmakeSerializable(CssLocalIdentifierDependency, \"webpack/lib/dependencies/CssLocalIdentifierDependency\");\nmodule.exports = CssLocalIdentifierDependency;","map":{"version":3,"names":["cssExportConvention","require","createHash","makePathsRelative","makeSerializable","NullDependency","getLocalIdent","local","module","chunkGraph","runtimeTemplate","localIdentName","generator","relativeResourcePath","context","resourceResolveData","path","hashFunction","hashDigest","hashDigestLength","hashSalt","uniqueName","outputOptions","hash","update","test","localIdentHash","digest","replace","slice","compilation","getPath","filename","contentHash","CssLocalIdentifierDependency","constructor","name","range","prefix","type","getExportsConventionNames","convention","_conventionNames","getExports","moduleGraph","getParentModule","names","exports","map","canMangle","dependencies","undefined","updateHash","JSON","stringify","serialize","write","deserialize","read","escapeCssIdentifier","str","omitUnderscore","escaped","s","Template","CssLocalIdentifierDependencyTemplate","apply","dependency","source","m","runtime","cssExportsData","dep","usedNames","getExportInfo","getUsedName","filter","Boolean","length","localIdent","used","set"],"sources":["C:/Users/james/Downloads/Mellowdies/mellowdies/node_modules/webpack/lib/dependencies/CssLocalIdentifierDependency.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst { cssExportConvention } = require(\"../util/conventions\");\nconst createHash = require(\"../util/createHash\");\nconst { makePathsRelative } = require(\"../util/identifier\");\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst NullDependency = require(\"./NullDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../../declarations/WebpackOptions\").CssGeneratorExportsConvention} CssGeneratorExportsConvention */\n/** @typedef {import(\"../../declarations/WebpackOptions\").CssGeneratorLocalIdentName} CssGeneratorLocalIdentName */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../CssModule\")} CssModule */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Dependency\").ExportsSpec} ExportsSpec */\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../DependencyTemplate\").CssDependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"../css/CssExportsGenerator\")} CssExportsGenerator */\n/** @typedef {import(\"../css/CssGenerator\")} CssGenerator */\n/** @typedef {import(\"../css/CssParser\").Range} Range */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n/** @typedef {import(\"../util/Hash\")} Hash */\n\n/**\n * @param {string} local css local\n * @param {CssModule} module module\n * @param {ChunkGraph} chunkGraph chunk graph\n * @param {RuntimeTemplate} runtimeTemplate runtime template\n * @returns {string} local ident\n */\nconst getLocalIdent = (local, module, chunkGraph, runtimeTemplate) => {\n\tconst localIdentName =\n\t\t/** @type {CssGenerator | CssExportsGenerator} */\n\t\t(module.generator).localIdentName;\n\tconst relativeResourcePath = makePathsRelative(\n\t\t/** @type {string} */ (module.context),\n\t\tmodule.resourceResolveData.path\n\t);\n\tconst { hashFunction, hashDigest, hashDigestLength, hashSalt, uniqueName } =\n\t\truntimeTemplate.outputOptions;\n\tconst hash = createHash(hashFunction);\n\tif (hashSalt) {\n\t\thash.update(hashSalt);\n\t}\n\thash.update(relativeResourcePath);\n\tif (!/\\[local\\]/.test(localIdentName)) {\n\t\thash.update(local);\n\t}\n\tconst localIdentHash = /** @type {string} */ (hash.digest(hashDigest))\n\t\t// Remove all leading digits\n\t\t.replace(/^\\d+/, \"\")\n\t\t// Replace all slashes with underscores (same as in base64url)\n\t\t.replace(/\\//g, \"_\")\n\t\t// Remove everything that is not an alphanumeric or underscore\n\t\t.replace(/[^A-Za-z0-9_]+/g, \"_\")\n\t\t.slice(0, hashDigestLength);\n\treturn runtimeTemplate.compilation\n\t\t.getPath(localIdentName, {\n\t\t\tfilename: relativeResourcePath,\n\t\t\thash: localIdentHash,\n\t\t\tcontentHash: localIdentHash,\n\t\t\tchunkGraph,\n\t\t\tmodule\n\t\t})\n\t\t.replace(/\\[local\\]/g, local)\n\t\t.replace(/\\[uniqueName\\]/g, uniqueName);\n};\n\nclass CssLocalIdentifierDependency extends NullDependency {\n\t/**\n\t * @param {string} name name\n\t * @param {Range} range range\n\t * @param {string=} prefix prefix\n\t */\n\tconstructor(name, range, prefix = \"\") {\n\t\tsuper();\n\t\tthis.name = name;\n\t\tthis.range = range;\n\t\tthis.prefix = prefix;\n\t}\n\n\tget type() {\n\t\treturn \"css local identifier\";\n\t}\n\n\t/**\n\t * @param {string} name export name\n\t * @param {CssGeneratorExportsConvention} convention convention of the export name\n\t * @returns {string[]} convention results\n\t */\n\tgetExportsConventionNames(name, convention) {\n\t\tif (this._conventionNames) {\n\t\t\treturn this._conventionNames;\n\t\t}\n\t\tthis._conventionNames = cssExportConvention(this.name, convention);\n\t\treturn this._conventionNames;\n\t}\n\n\t/**\n\t * Returns the exported names\n\t * @param {ModuleGraph} moduleGraph module graph\n\t * @returns {ExportsSpec | undefined} export names\n\t */\n\tgetExports(moduleGraph) {\n\t\tconst module = /** @type {CssModule} */ (moduleGraph.getParentModule(this));\n\t\tconst convention = /** @type {CssGenerator | CssExportsGenerator} */ (\n\t\t\tmodule.generator\n\t\t).convention;\n\t\tconst names = this.getExportsConventionNames(this.name, convention);\n\t\treturn {\n\t\t\texports: names.map(name => ({\n\t\t\t\tname,\n\t\t\t\tcanMangle: true\n\t\t\t})),\n\t\t\tdependencies: undefined\n\t\t};\n\t}\n\n\t/**\n\t * Update the hash\n\t * @param {Hash} hash hash to be updated\n\t * @param {UpdateHashContext} context context\n\t * @returns {void}\n\t */\n\tupdateHash(hash, { chunkGraph }) {\n\t\tconst module = /** @type {CssModule} */ (\n\t\t\tchunkGraph.moduleGraph.getParentModule(this)\n\t\t);\n\t\tconst generator = /** @type {CssGenerator | CssExportsGenerator} */ (\n\t\t\tmodule.generator\n\t\t);\n\t\tconst names = this.getExportsConventionNames(\n\t\t\tthis.name,\n\t\t\tgenerator.convention\n\t\t);\n\t\thash.update(\"exportsConvention\");\n\t\thash.update(JSON.stringify(names));\n\t\thash.update(\"localIdentName\");\n\t\thash.update(generator.localIdentName);\n\t}\n\n\t/**\n\t * @param {ObjectSerializerContext} context context\n\t */\n\tserialize(context) {\n\t\tconst { write } = context;\n\t\twrite(this.name);\n\t\twrite(this.range);\n\t\twrite(this.prefix);\n\t\tsuper.serialize(context);\n\t}\n\n\t/**\n\t * @param {ObjectDeserializerContext} context context\n\t */\n\tdeserialize(context) {\n\t\tconst { read } = context;\n\t\tthis.name = read();\n\t\tthis.range = read();\n\t\tthis.prefix = read();\n\t\tsuper.deserialize(context);\n\t}\n}\n\n/**\n * @param {string} str string\n * @param {string | boolean} omitUnderscore true if you need to omit underscore\n * @returns {string} escaped css identifier\n */\nconst escapeCssIdentifier = (str, omitUnderscore) => {\n\tconst escaped = `${str}`.replace(\n\t\t// cspell:word uffff\n\t\t/[^a-zA-Z0-9_\\u0081-\\uFFFF-]/g,\n\t\ts => `\\\\${s}`\n\t);\n\treturn !omitUnderscore && /^(?!--)[0-9-]/.test(escaped)\n\t\t? `_${escaped}`\n\t\t: escaped;\n};\n\nCssLocalIdentifierDependency.Template = class CssLocalIdentifierDependencyTemplate extends (\n\tNullDependency.Template\n) {\n\t/**\n\t * @param {Dependency} dependency the dependency for which the template should be applied\n\t * @param {ReplaceSource} source the current replace source which can be modified\n\t * @param {DependencyTemplateContext} templateContext the context object\n\t * @returns {void}\n\t */\n\tapply(\n\t\tdependency,\n\t\tsource,\n\t\t{\n\t\t\tmodule: m,\n\t\t\tmoduleGraph,\n\t\t\tchunkGraph,\n\t\t\truntime,\n\t\t\truntimeTemplate,\n\t\t\tcssExportsData\n\t\t}\n\t) {\n\t\tconst dep = /** @type {CssLocalIdentifierDependency} */ (dependency);\n\t\tconst module = /** @type {CssModule} */ (m);\n\t\tconst convention = /** @type {CssGenerator | CssExportsGenerator} */ (\n\t\t\tmodule.generator\n\t\t).convention;\n\t\tconst names = dep.getExportsConventionNames(dep.name, convention);\n\t\tconst usedNames = /** @type {string[]} */ (\n\t\t\tnames\n\t\t\t\t.map(name =>\n\t\t\t\t\tmoduleGraph.getExportInfo(module, name).getUsedName(name, runtime)\n\t\t\t\t)\n\t\t\t\t.filter(Boolean)\n\t\t);\n\t\tif (usedNames.length === 0) return;\n\n\t\t// use the first usedName to generate localIdent, it's shorter when mangle exports enabled\n\t\tconst localIdent =\n\t\t\tdep.prefix +\n\t\t\tgetLocalIdent(usedNames[0], module, chunkGraph, runtimeTemplate);\n\t\tsource.replace(\n\t\t\tdep.range[0],\n\t\t\tdep.range[1] - 1,\n\t\t\tescapeCssIdentifier(localIdent, dep.prefix)\n\t\t);\n\t\tfor (const used of usedNames) {\n\t\t\tcssExportsData.exports.set(used, localIdent);\n\t\t}\n\t}\n};\n\nmakeSerializable(\n\tCssLocalIdentifierDependency,\n\t\"webpack/lib/dependencies/CssLocalIdentifierDependency\"\n);\n\nmodule.exports = CssLocalIdentifierDependency;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}