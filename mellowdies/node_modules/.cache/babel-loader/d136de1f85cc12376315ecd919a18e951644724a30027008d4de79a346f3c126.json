{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst path = require(\"path\");\nconst CHAR_HASH = \"#\".charCodeAt(0);\nconst CHAR_SLASH = \"/\".charCodeAt(0);\nconst CHAR_BACKSLASH = \"\\\\\".charCodeAt(0);\nconst CHAR_A = \"A\".charCodeAt(0);\nconst CHAR_Z = \"Z\".charCodeAt(0);\nconst CHAR_LOWER_A = \"a\".charCodeAt(0);\nconst CHAR_LOWER_Z = \"z\".charCodeAt(0);\nconst CHAR_DOT = \".\".charCodeAt(0);\nconst CHAR_COLON = \":\".charCodeAt(0);\nconst posixNormalize = path.posix.normalize;\nconst winNormalize = path.win32.normalize;\n\n/**\n * @enum {number}\n */\nconst PathType = Object.freeze({\n  Empty: 0,\n  Normal: 1,\n  Relative: 2,\n  AbsoluteWin: 3,\n  AbsolutePosix: 4,\n  Internal: 5\n});\nexports.PathType = PathType;\nconst invalidSegmentRegEx = /(^|\\\\|\\/)((\\.|%2e)(\\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))?(\\\\|\\/|$)/i;\nexports.invalidSegmentRegEx = invalidSegmentRegEx;\nconst deprecatedInvalidSegmentRegEx = /(^|\\\\|\\/)((\\.|%2e)(\\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\\\|\\/|$)/i;\nexports.deprecatedInvalidSegmentRegEx = deprecatedInvalidSegmentRegEx;\n\n/**\n * @param {string} p a path\n * @returns {PathType} type of path\n */\nconst getType = p => {\n  switch (p.length) {\n    case 0:\n      return PathType.Empty;\n    case 1:\n      {\n        const c0 = p.charCodeAt(0);\n        switch (c0) {\n          case CHAR_DOT:\n            return PathType.Relative;\n          case CHAR_SLASH:\n            return PathType.AbsolutePosix;\n          case CHAR_HASH:\n            return PathType.Internal;\n        }\n        return PathType.Normal;\n      }\n    case 2:\n      {\n        const c0 = p.charCodeAt(0);\n        switch (c0) {\n          case CHAR_DOT:\n            {\n              const c1 = p.charCodeAt(1);\n              switch (c1) {\n                case CHAR_DOT:\n                case CHAR_SLASH:\n                  return PathType.Relative;\n              }\n              return PathType.Normal;\n            }\n          case CHAR_SLASH:\n            return PathType.AbsolutePosix;\n          case CHAR_HASH:\n            return PathType.Internal;\n        }\n        const c1 = p.charCodeAt(1);\n        if (c1 === CHAR_COLON) {\n          if (c0 >= CHAR_A && c0 <= CHAR_Z || c0 >= CHAR_LOWER_A && c0 <= CHAR_LOWER_Z) {\n            return PathType.AbsoluteWin;\n          }\n        }\n        return PathType.Normal;\n      }\n  }\n  const c0 = p.charCodeAt(0);\n  switch (c0) {\n    case CHAR_DOT:\n      {\n        const c1 = p.charCodeAt(1);\n        switch (c1) {\n          case CHAR_SLASH:\n            return PathType.Relative;\n          case CHAR_DOT:\n            {\n              const c2 = p.charCodeAt(2);\n              if (c2 === CHAR_SLASH) return PathType.Relative;\n              return PathType.Normal;\n            }\n        }\n        return PathType.Normal;\n      }\n    case CHAR_SLASH:\n      return PathType.AbsolutePosix;\n    case CHAR_HASH:\n      return PathType.Internal;\n  }\n  const c1 = p.charCodeAt(1);\n  if (c1 === CHAR_COLON) {\n    const c2 = p.charCodeAt(2);\n    if ((c2 === CHAR_BACKSLASH || c2 === CHAR_SLASH) && (c0 >= CHAR_A && c0 <= CHAR_Z || c0 >= CHAR_LOWER_A && c0 <= CHAR_LOWER_Z)) {\n      return PathType.AbsoluteWin;\n    }\n  }\n  return PathType.Normal;\n};\nexports.getType = getType;\n\n/**\n * @param {string} p a path\n * @returns {string} the normalized path\n */\nconst normalize = p => {\n  switch (getType(p)) {\n    case PathType.Empty:\n      return p;\n    case PathType.AbsoluteWin:\n      return winNormalize(p);\n    case PathType.Relative:\n      {\n        const r = posixNormalize(p);\n        return getType(r) === PathType.Relative ? r : `./${r}`;\n      }\n  }\n  return posixNormalize(p);\n};\nexports.normalize = normalize;\n\n/**\n * @param {string} rootPath the root path\n * @param {string | undefined} request the request path\n * @returns {string} the joined path\n */\nconst join = (rootPath, request) => {\n  if (!request) return normalize(rootPath);\n  const requestType = getType(request);\n  switch (requestType) {\n    case PathType.AbsolutePosix:\n      return posixNormalize(request);\n    case PathType.AbsoluteWin:\n      return winNormalize(request);\n  }\n  switch (getType(rootPath)) {\n    case PathType.Normal:\n    case PathType.Relative:\n    case PathType.AbsolutePosix:\n      return posixNormalize(`${rootPath}/${request}`);\n    case PathType.AbsoluteWin:\n      return winNormalize(`${rootPath}\\\\${request}`);\n  }\n  switch (requestType) {\n    case PathType.Empty:\n      return rootPath;\n    case PathType.Relative:\n      {\n        const r = posixNormalize(rootPath);\n        return getType(r) === PathType.Relative ? r : `./${r}`;\n      }\n  }\n  return posixNormalize(rootPath);\n};\nexports.join = join;\n\n/** @type {Map<string, Map<string, string | undefined>>} */\nconst joinCache = new Map();\n\n/**\n * @param {string} rootPath the root path\n * @param {string} request the request path\n * @returns {string} the joined path\n */\nconst cachedJoin = (rootPath, request) => {\n  /** @type {string | undefined} */\n  let cacheEntry;\n  let cache = joinCache.get(rootPath);\n  if (cache === undefined) {\n    joinCache.set(rootPath, cache = new Map());\n  } else {\n    cacheEntry = cache.get(request);\n    if (cacheEntry !== undefined) return cacheEntry;\n  }\n  cacheEntry = join(rootPath, request);\n  cache.set(request, cacheEntry);\n  return cacheEntry;\n};\nexports.cachedJoin = cachedJoin;","map":{"version":3,"names":["path","require","CHAR_HASH","charCodeAt","CHAR_SLASH","CHAR_BACKSLASH","CHAR_A","CHAR_Z","CHAR_LOWER_A","CHAR_LOWER_Z","CHAR_DOT","CHAR_COLON","posixNormalize","posix","normalize","winNormalize","win32","PathType","Object","freeze","Empty","Normal","Relative","AbsoluteWin","AbsolutePosix","Internal","exports","invalidSegmentRegEx","deprecatedInvalidSegmentRegEx","getType","p","length","c0","c1","c2","r","join","rootPath","request","requestType","joinCache","Map","cachedJoin","cacheEntry","cache","get","undefined","set"],"sources":["C:/Users/james/Downloads/Mellowdies/mellowdies/node_modules/enhanced-resolve/lib/util/path.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst path = require(\"path\");\n\nconst CHAR_HASH = \"#\".charCodeAt(0);\nconst CHAR_SLASH = \"/\".charCodeAt(0);\nconst CHAR_BACKSLASH = \"\\\\\".charCodeAt(0);\nconst CHAR_A = \"A\".charCodeAt(0);\nconst CHAR_Z = \"Z\".charCodeAt(0);\nconst CHAR_LOWER_A = \"a\".charCodeAt(0);\nconst CHAR_LOWER_Z = \"z\".charCodeAt(0);\nconst CHAR_DOT = \".\".charCodeAt(0);\nconst CHAR_COLON = \":\".charCodeAt(0);\n\nconst posixNormalize = path.posix.normalize;\nconst winNormalize = path.win32.normalize;\n\n/**\n * @enum {number}\n */\nconst PathType = Object.freeze({\n\tEmpty: 0,\n\tNormal: 1,\n\tRelative: 2,\n\tAbsoluteWin: 3,\n\tAbsolutePosix: 4,\n\tInternal: 5\n});\nexports.PathType = PathType;\n\nconst invalidSegmentRegEx =\n\t/(^|\\\\|\\/)((\\.|%2e)(\\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))?(\\\\|\\/|$)/i;\nexports.invalidSegmentRegEx = invalidSegmentRegEx;\n\nconst deprecatedInvalidSegmentRegEx =\n\t/(^|\\\\|\\/)((\\.|%2e)(\\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\\\|\\/|$)/i;\nexports.deprecatedInvalidSegmentRegEx = deprecatedInvalidSegmentRegEx;\n\n/**\n * @param {string} p a path\n * @returns {PathType} type of path\n */\nconst getType = p => {\n\tswitch (p.length) {\n\t\tcase 0:\n\t\t\treturn PathType.Empty;\n\t\tcase 1: {\n\t\t\tconst c0 = p.charCodeAt(0);\n\t\t\tswitch (c0) {\n\t\t\t\tcase CHAR_DOT:\n\t\t\t\t\treturn PathType.Relative;\n\t\t\t\tcase CHAR_SLASH:\n\t\t\t\t\treturn PathType.AbsolutePosix;\n\t\t\t\tcase CHAR_HASH:\n\t\t\t\t\treturn PathType.Internal;\n\t\t\t}\n\t\t\treturn PathType.Normal;\n\t\t}\n\t\tcase 2: {\n\t\t\tconst c0 = p.charCodeAt(0);\n\t\t\tswitch (c0) {\n\t\t\t\tcase CHAR_DOT: {\n\t\t\t\t\tconst c1 = p.charCodeAt(1);\n\t\t\t\t\tswitch (c1) {\n\t\t\t\t\t\tcase CHAR_DOT:\n\t\t\t\t\t\tcase CHAR_SLASH:\n\t\t\t\t\t\t\treturn PathType.Relative;\n\t\t\t\t\t}\n\t\t\t\t\treturn PathType.Normal;\n\t\t\t\t}\n\t\t\t\tcase CHAR_SLASH:\n\t\t\t\t\treturn PathType.AbsolutePosix;\n\t\t\t\tcase CHAR_HASH:\n\t\t\t\t\treturn PathType.Internal;\n\t\t\t}\n\t\t\tconst c1 = p.charCodeAt(1);\n\t\t\tif (c1 === CHAR_COLON) {\n\t\t\t\tif (\n\t\t\t\t\t(c0 >= CHAR_A && c0 <= CHAR_Z) ||\n\t\t\t\t\t(c0 >= CHAR_LOWER_A && c0 <= CHAR_LOWER_Z)\n\t\t\t\t) {\n\t\t\t\t\treturn PathType.AbsoluteWin;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn PathType.Normal;\n\t\t}\n\t}\n\tconst c0 = p.charCodeAt(0);\n\tswitch (c0) {\n\t\tcase CHAR_DOT: {\n\t\t\tconst c1 = p.charCodeAt(1);\n\t\t\tswitch (c1) {\n\t\t\t\tcase CHAR_SLASH:\n\t\t\t\t\treturn PathType.Relative;\n\t\t\t\tcase CHAR_DOT: {\n\t\t\t\t\tconst c2 = p.charCodeAt(2);\n\t\t\t\t\tif (c2 === CHAR_SLASH) return PathType.Relative;\n\t\t\t\t\treturn PathType.Normal;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn PathType.Normal;\n\t\t}\n\t\tcase CHAR_SLASH:\n\t\t\treturn PathType.AbsolutePosix;\n\t\tcase CHAR_HASH:\n\t\t\treturn PathType.Internal;\n\t}\n\tconst c1 = p.charCodeAt(1);\n\tif (c1 === CHAR_COLON) {\n\t\tconst c2 = p.charCodeAt(2);\n\t\tif (\n\t\t\t(c2 === CHAR_BACKSLASH || c2 === CHAR_SLASH) &&\n\t\t\t((c0 >= CHAR_A && c0 <= CHAR_Z) ||\n\t\t\t\t(c0 >= CHAR_LOWER_A && c0 <= CHAR_LOWER_Z))\n\t\t) {\n\t\t\treturn PathType.AbsoluteWin;\n\t\t}\n\t}\n\treturn PathType.Normal;\n};\nexports.getType = getType;\n\n/**\n * @param {string} p a path\n * @returns {string} the normalized path\n */\nconst normalize = p => {\n\tswitch (getType(p)) {\n\t\tcase PathType.Empty:\n\t\t\treturn p;\n\t\tcase PathType.AbsoluteWin:\n\t\t\treturn winNormalize(p);\n\t\tcase PathType.Relative: {\n\t\t\tconst r = posixNormalize(p);\n\t\t\treturn getType(r) === PathType.Relative ? r : `./${r}`;\n\t\t}\n\t}\n\treturn posixNormalize(p);\n};\nexports.normalize = normalize;\n\n/**\n * @param {string} rootPath the root path\n * @param {string | undefined} request the request path\n * @returns {string} the joined path\n */\nconst join = (rootPath, request) => {\n\tif (!request) return normalize(rootPath);\n\tconst requestType = getType(request);\n\tswitch (requestType) {\n\t\tcase PathType.AbsolutePosix:\n\t\t\treturn posixNormalize(request);\n\t\tcase PathType.AbsoluteWin:\n\t\t\treturn winNormalize(request);\n\t}\n\tswitch (getType(rootPath)) {\n\t\tcase PathType.Normal:\n\t\tcase PathType.Relative:\n\t\tcase PathType.AbsolutePosix:\n\t\t\treturn posixNormalize(`${rootPath}/${request}`);\n\t\tcase PathType.AbsoluteWin:\n\t\t\treturn winNormalize(`${rootPath}\\\\${request}`);\n\t}\n\tswitch (requestType) {\n\t\tcase PathType.Empty:\n\t\t\treturn rootPath;\n\t\tcase PathType.Relative: {\n\t\t\tconst r = posixNormalize(rootPath);\n\t\t\treturn getType(r) === PathType.Relative ? r : `./${r}`;\n\t\t}\n\t}\n\treturn posixNormalize(rootPath);\n};\nexports.join = join;\n\n/** @type {Map<string, Map<string, string | undefined>>} */\nconst joinCache = new Map();\n\n/**\n * @param {string} rootPath the root path\n * @param {string} request the request path\n * @returns {string} the joined path\n */\nconst cachedJoin = (rootPath, request) => {\n\t/** @type {string | undefined} */\n\tlet cacheEntry;\n\tlet cache = joinCache.get(rootPath);\n\tif (cache === undefined) {\n\t\tjoinCache.set(rootPath, (cache = new Map()));\n\t} else {\n\t\tcacheEntry = cache.get(request);\n\t\tif (cacheEntry !== undefined) return cacheEntry;\n\t}\n\tcacheEntry = join(rootPath, request);\n\tcache.set(request, cacheEntry);\n\treturn cacheEntry;\n};\nexports.cachedJoin = cachedJoin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}